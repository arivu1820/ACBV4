package com.futureinspirator.acbaradise;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.RadioButton;
import android.widget.RelativeLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.cardview.widget.CardView;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.HashMap;

public class summary extends AppCompatActivity {

    private String Category1 = "GeneralService", Category2 = "WaterWash", Category3 = "AMC", Category4 = "Spares", Category5 = "Faults", Category6 = "Installuninstall";
    private FirebaseAuth mAuth= FirebaseAuth.getInstance();
    private DatabaseReference mDatabase= FirebaseDatabase.getInstance().getReference().child(mAuth.getCurrentUser().getUid());

    private String payment = "0";

    // General Service


    private RelativeLayout placelocation;
    private Button gssubsplit;
    private Button gsaddsplit;
    private TextView gstxtsplit;
    private TextView gssplitrt;
    private TextView gssplittt;
    private CardView gssplitacprogressbar;
    private CardView gssplitaccardview;

    private Button gssubwindow;
    private Button gsaddwindow;
    private TextView gstxtwindow;
    private TextView gswindowrt;
    private TextView gswindowtt;
    private CardView gswindowacprogressbar;
    private CardView gswindowaccardview;

    private Button gssubcassette;
    private Button gsaddcassette;
    private TextView gstxtcassette;
    private TextView gscassettert;
    private TextView gscassettett;
    private CardView gscassetteacprogressbar;
    private CardView gscassetteaccardview;

    // Water Wash

    private Button wwsubsplitss;
    private Button wwaddsplitss;
    private TextView wwtxtsplitss;
    private TextView wwsplitssrt;
    private TextView wwsplitsstt;
    private CardView wwsplitssacprogressbar;
    private CardView wwsplitssaccardview;

    private Button wwsubwindowss;
    private Button wwaddwindowss;
    private TextView wwtxtwindowss;
    private TextView wwwindowssrt;
    private TextView wwwindowsstt;
    private CardView wwwindowssacprogressbar;
    private CardView wwwindowssaccardview;

    private Button wwsubcassettess;
    private Button wwaddcassettess;
    private TextView wwtxtcassettess;
    private TextView wwcassettessrt;
    private TextView wwcassettesstt;
    private CardView wwcassettessacprogressbar;
    private CardView wwcassettessaccardview;

    private Button wwsubsplit360;
    private Button wwaddsplit360;
    private TextView wwtxtsplit360;
    private TextView wwsplit360rt;
    private TextView wwsplit360tt;
    private CardView wwsplit360acprogressbar;
    private CardView wwsplit360accardview;

    private Button wwsubcassette360;
    private Button wwaddcassette360;
    private TextView wwtxtcassette360;
    private TextView wwcassette360rt;
    private TextView wwcassette360tt;
    private CardView wwcassette360acprogressbar;
    private CardView wwcassette360accardview;

    //  AMC

    // split

    // scheme1

    private Button amcsplitscheme1withsparetotalsub;
    private Button amcsplitscheme1withsparetotaladd;
    private TextView amcsplitscheme1withsparetotaltxt;
    private TextView amcsplitscheme1withsparetotalrt;
    private TextView amcsplitscheme1withsparetotaltt;
    private CardView amcsplitscheme1withsparetotalprogressbar;
    private CardView amcsplitscheme1withsparetotalcardview;

    private Button amcsplitscheme1withsparelimitedsub;
    private Button amcsplitscheme1withsparelimitedadd;
    private TextView amcsplitscheme1withsparelimitedtxt;
    private TextView amcsplitscheme1withsparelimitedrt;
    private TextView amcsplitscheme1withsparelimitedtt;
    private CardView amcsplitscheme1withsparelimitedprogressbar;
    private CardView amcsplitscheme1withsparelimitedcardview;

    private Button amcsplitscheme1withsparenosub;
    private Button amcsplitscheme1withsparenoadd;
    private TextView amcsplitscheme1withsparenotxt;
    private TextView amcsplitscheme1withsparenort;
    private TextView amcsplitscheme1withsparenott;
    private CardView amcsplitscheme1withsparenoprogressbar;
    private CardView amcsplitscheme1withsparenocardview;


    // scheme2

    private Button amcsplitscheme2withsparetotalsub;
    private Button amcsplitscheme2withsparetotaladd;
    private TextView amcsplitscheme2withsparetotaltxt;
    private TextView amcsplitscheme2withsparetotalrt;
    private TextView amcsplitscheme2withsparetotaltt;
    private CardView amcsplitscheme2withsparetotalprogressbar;
    private CardView amcsplitscheme2withsparetotalcardview;

    private Button amcsplitscheme2withsparelimitedsub;
    private Button amcsplitscheme2withsparelimitedadd;
    private TextView amcsplitscheme2withsparelimitedtxt;
    private TextView amcsplitscheme2withsparelimitedrt;
    private TextView amcsplitscheme2withsparelimitedtt;
    private CardView amcsplitscheme2withsparelimitedprogressbar;
    private CardView amcsplitscheme2withsparelimitedcardview;

    private Button amcsplitscheme2withsparenosub;
    private Button amcsplitscheme2withsparenoadd;
    private TextView amcsplitscheme2withsparenotxt;
    private TextView amcsplitscheme2withsparenort;
    private TextView amcsplitscheme2withsparenott;
    private CardView amcsplitscheme2withsparenoprogressbar;
    private CardView amcsplitscheme2withsparenocardview;

    // scheme3

    private Button amcsplitscheme3withsparetotalsub;
    private Button amcsplitscheme3withsparetotaladd;
    private TextView amcsplitscheme3withsparetotaltxt;
    private TextView amcsplitscheme3withsparetotalrt;
    private TextView amcsplitscheme3withsparetotaltt;
    private CardView amcsplitscheme3withsparetotalprogressbar;
    private CardView amcsplitscheme3withsparetotalcardview;

    private Button amcsplitscheme3withsparelimitedsub;
    private Button amcsplitscheme3withsparelimitedadd;
    private TextView amcsplitscheme3withsparelimitedtxt;
    private TextView amcsplitscheme3withsparelimitedrt;
    private TextView amcsplitscheme3withsparelimitedtt;
    private CardView amcsplitscheme3withsparelimitedprogressbar;
    private CardView amcsplitscheme3withsparelimitedcardview;

    private Button amcsplitscheme3withsparenosub;
    private Button amcsplitscheme3withsparenoadd;
    private TextView amcsplitscheme3withsparenotxt;
    private TextView amcsplitscheme3withsparenort;
    private TextView amcsplitscheme3withsparenott;
    private CardView amcsplitscheme3withsparenoprogressbar;
    private CardView amcsplitscheme3withsparenocardview;

    // window

    // scheme1

    private Button amcwindowscheme1withsparetotalsub;
    private Button amcwindowscheme1withsparetotaladd;
    private TextView amcwindowscheme1withsparetotaltxt;
    private TextView amcwindowscheme1withsparetotalrt;
    private TextView amcwindowscheme1withsparetotaltt;
    private CardView amcwindowscheme1withsparetotalprogressbar;
    private CardView amcwindowscheme1withsparetotalcardview;

    private Button amcwindowscheme1withsparelimitedsub;
    private Button amcwindowscheme1withsparelimitedadd;
    private TextView amcwindowscheme1withsparelimitedtxt;
    private TextView amcwindowscheme1withsparelimitedrt;
    private TextView amcwindowscheme1withsparelimitedtt;
    private CardView amcwindowscheme1withsparelimitedprogressbar;
    private CardView amcwindowscheme1withsparelimitedcardview;

    private Button amcwindowscheme1withsparenosub;
    private Button amcwindowscheme1withsparenoadd;
    private TextView amcwindowscheme1withsparenotxt;
    private TextView amcwindowscheme1withsparenort;
    private TextView amcwindowscheme1withsparenott;
    private CardView amcwindowscheme1withsparenoprogressbar;
    private CardView amcwindowscheme1withsparenocardview;


    // scheme2

    private Button amcwindowscheme2withsparetotalsub;
    private Button amcwindowscheme2withsparetotaladd;
    private TextView amcwindowscheme2withsparetotaltxt;
    private TextView amcwindowscheme2withsparetotalrt;
    private TextView amcwindowscheme2withsparetotaltt;
    private CardView amcwindowscheme2withsparetotalprogressbar;
    private CardView amcwindowscheme2withsparetotalcardview;

    private Button amcwindowscheme2withsparelimitedsub;
    private Button amcwindowscheme2withsparelimitedadd;
    private TextView amcwindowscheme2withsparelimitedtxt;
    private TextView amcwindowscheme2withsparelimitedrt;
    private TextView amcwindowscheme2withsparelimitedtt;
    private CardView amcwindowscheme2withsparelimitedprogressbar;
    private CardView amcwindowscheme2withsparelimitedcardview;

    private Button amcwindowscheme2withsparenosub;
    private Button amcwindowscheme2withsparenoadd;
    private TextView amcwindowscheme2withsparenotxt;
    private TextView amcwindowscheme2withsparenort;
    private TextView amcwindowscheme2withsparenott;
    private CardView amcwindowscheme2withsparenoprogressbar;
    private CardView amcwindowscheme2withsparenocardview;

    // cassette

    // scheme1

    private Button amccassettescheme1withsparetotalsub;
    private Button amccassettescheme1withsparetotaladd;
    private TextView amccassettescheme1withsparetotaltxt;
    private TextView amccassettescheme1withsparetotalrt;
    private TextView amccassettescheme1withsparetotaltt;
    private CardView amccassettescheme1withsparetotalprogressbar;
    private CardView amccassettescheme1withsparetotalcardview;

    private Button amccassettescheme1withsparelimitedsub;
    private Button amccassettescheme1withsparelimitedadd;
    private TextView amccassettescheme1withsparelimitedtxt;
    private TextView amccassettescheme1withsparelimitedrt;
    private TextView amccassettescheme1withsparelimitedtt;
    private CardView amccassettescheme1withsparelimitedprogressbar;
    private CardView amccassettescheme1withsparelimitedcardview;

    private Button amccassettescheme1withsparenosub;
    private Button amccassettescheme1withsparenoadd;
    private TextView amccassettescheme1withsparenotxt;
    private TextView amccassettescheme1withsparenort;
    private TextView amccassettescheme1withsparenott;
    private CardView amccassettescheme1withsparenoprogressbar;
    private CardView amccassettescheme1withsparenocardview;


    // Spares

    // splitac

    private Button subsparesplitaccapacitor;
    private Button addsparesplitaccapacitor;
    private TextView txtsparesplitaccapacitor;
    private TextView sparesplitaccapacitorrt;
    private TextView sparesplitaccapacitortt;
    private CardView sparesplitaccapacitorprogressbar;
    private CardView sparesplitaccapacitorcardview;

    private Button subsparesplitacblower;
    private Button addsparesplitacblower;
    private TextView txtsparesplitacblower;
    private TextView sparesplitacblowerrt;
    private TextView sparesplitacblowertt;
    private CardView sparesplitacblowerprogressbar;
    private CardView sparesplitacblowercardview;

    private Button subsparesplitacoutdoorfan;
    private Button addsparesplitacoutdoorfan;
    private TextView txtsparesplitacoutdoorfan;
    private TextView sparesplitacoutdoorfanrt;
    private TextView sparesplitacoutdoorfantt;
    private CardView sparesplitacoutdoorfanprogressbar;
    private CardView sparesplitacoutdoorfancardview;

    private Button subsparesplitacindoormotor;
    private Button addsparesplitacindoormotor;
    private TextView txtsparesplitacindoormotor;
    private TextView sparesplitacindoormotorrt;
    private TextView sparesplitacindoormotortt;
    private CardView sparesplitacindoormotorprogressbar;
    private CardView sparesplitacindoormotorcardview;

    private Button subsparesplitacoutdoormotor;
    private Button addsparesplitacoutdoormotor;
    private TextView txtsparesplitacoutdoormotor;
    private TextView sparesplitacoutdoormotorrt;
    private TextView sparesplitacoutdoormotortt;
    private CardView sparesplitacoutdoormotorprogressbar;
    private CardView sparesplitacoutdoormotorcardview;

    private Button subsparesplitacswingmotor;
    private Button addsparesplitacswingmotor;
    private TextView txtsparesplitacswingmotor;
    private TextView sparesplitacswingmotorrt;
    private TextView sparesplitacswingmotortt;
    private CardView sparesplitacswingmotorprogressbar;
    private CardView sparesplitacswingmotorcardview;

    private Button subsparesplitacindoorcoil;
    private Button addsparesplitacindoorcoil;
    private TextView txtsparesplitacindoorcoil;
    private TextView sparesplitacindoorcoilrt;
    private TextView sparesplitacindoorcoiltt;
    private CardView sparesplitacindoorcoilprogressbar;
    private CardView sparesplitacindoorcoilcardview;

    private Button subsparesplitacoutdoorcondenser;
    private Button addsparesplitacoutdoorcondenser;
    private TextView txtsparesplitacoutdoorcondenser;
    private TextView sparesplitacoutdoorcondenserrt;
    private TextView sparesplitacoutdoorcondensertt;
    private CardView sparesplitacoutdoorcondenserprogressbar;
    private CardView sparesplitacoutdoorcondensercardview;

    private Button subsparesplitacswingflap;
    private Button addsparesplitacswingflap;
    private TextView txtsparesplitacswingflap;
    private TextView sparesplitacswingflaprt;
    private TextView sparesplitacswingflaptt;
    private CardView sparesplitacswingflapprogressbar;
    private CardView sparesplitacswingflapcardview;

    private Button subsparesplitacremote;
    private Button addsparesplitacremote;
    private TextView txtsparesplitacremote;
    private TextView sparesplitacremotert;
    private TextView sparesplitacremotett;
    private CardView sparesplitacremoteprogressbar;
    private CardView sparesplitacremotecardview;

    // windowac

    private Button subsparewindowaccapacitor;
    private Button addsparewindowaccapacitor;
    private TextView txtsparewindowaccapacitor;
    private TextView sparewindowaccapacitorrt;
    private TextView sparewindowaccapacitortt;
    private CardView sparewindowaccapacitorprogressbar;
    private CardView sparewindowaccapacitorcardview;

    private Button subsparewindowacblower;
    private Button addsparewindowacblower;
    private TextView txtsparewindowacblower;
    private TextView sparewindowacblowerrt;
    private TextView sparewindowacblowertt;
    private CardView sparewindowacblowerprogressbar;
    private CardView sparewindowacblowercardview;

    private Button subsparewindowacoutdoorfan;
    private Button addsparewindowacoutdoorfan;
    private TextView txtsparewindowacoutdoorfan;
    private TextView sparewindowacoutdoorfanrt;
    private TextView sparewindowacoutdoorfantt;
    private CardView sparewindowacoutdoorfanprogressbar;
    private CardView sparewindowacoutdoorfancardview;

    private Button subsparewindowacindoormotor;
    private Button addsparewindowacindoormotor;
    private TextView txtsparewindowacindoormotor;
    private TextView sparewindowacindoormotorrt;
    private TextView sparewindowacindoormotortt;
    private CardView sparewindowacindoormotorprogressbar;
    private CardView sparewindowacindoormotorcardview;

    private Button subsparewindowacoutdoormotor;
    private Button addsparewindowacoutdoormotor;
    private TextView txtsparewindowacoutdoormotor;
    private TextView sparewindowacoutdoormotorrt;
    private TextView sparewindowacoutdoormotortt;
    private CardView sparewindowacoutdoormotorprogressbar;
    private CardView sparewindowacoutdoormotorcardview;
//
    private Button subsparewindowacswingmotor;
    private Button addsparewindowacswingmotor;
    private TextView txtsparewindowacswingmotor;
    private TextView sparewindowacswingmotorrt;
    private TextView sparewindowacswingmotortt;
    private CardView sparewindowacswingmotorprogressbar;
    private CardView sparewindowacswingmotorcardview;

    private Button subsparewindowacindoorcoil;
    private Button addsparewindowacindoorcoil;
    private TextView txtsparewindowacindoorcoil;
    private TextView sparewindowacindoorcoilrt;
    private TextView sparewindowacindoorcoiltt;
    private CardView sparewindowacindoorcoilprogressbar;
    private CardView sparewindowacindoorcoilcardview;

    private Button subsparewindowacoutdoorcondenser;
    private Button addsparewindowacoutdoorcondenser;
    private TextView txtsparewindowacoutdoorcondenser;
    private TextView sparewindowacoutdoorcondenserrt;
    private TextView sparewindowacoutdoorcondensertt;
    private CardView sparewindowacoutdoorcondenserprogressbar;
    private CardView sparewindowacoutdoorcondensercardview;

    private Button subsparewindowacswingflap;
    private Button addsparewindowacswingflap;
    private TextView txtsparewindowacswingflap;
    private TextView sparewindowacswingflaprt;
    private TextView sparewindowacswingflaptt;
    private CardView sparewindowacswingflapprogressbar;
    private CardView sparewindowacswingflapcardview;

    private Button subsparewindowacremote;
    private Button addsparewindowacremote;
    private TextView txtsparewindowacremote;
    private TextView sparewindowacremotert;
    private TextView sparewindowacremotett;
    private CardView sparewindowacremoteprogressbar;
    private CardView sparewindowacremotecardview;

    // cassetteac

    private Button subsparecassetteaccapacitor;
    private Button addsparecassetteaccapacitor;
    private TextView txtsparecassetteaccapacitor;
    private TextView sparecassetteaccapacitorrt;
    private TextView sparecassetteaccapacitortt;
    private CardView sparecassetteaccapacitorprogressbar;
    private CardView sparecassetteaccapacitorcardview;

    private Button subsparecassetteacblower;
    private Button addsparecassetteacblower;
    private TextView txtsparecassetteacblower;
    private TextView sparecassetteacblowerrt;
    private TextView sparecassetteacblowertt;
    private CardView sparecassetteacblowerprogressbar;
    private CardView sparecassetteacblowercardview;

    private Button subsparecassetteacoutdoorfan;
    private Button addsparecassetteacoutdoorfan;
    private TextView txtsparecassetteacoutdoorfan;
    private TextView sparecassetteacoutdoorfanrt;
    private TextView sparecassetteacoutdoorfantt;
    private CardView sparecassetteacoutdoorfanprogressbar;
    private CardView sparecassetteacoutdoorfancardview;

    private Button subsparecassetteacindoormotor;
    private Button addsparecassetteacindoormotor;
    private TextView txtsparecassetteacindoormotor;
    private TextView sparecassetteacindoormotorrt;
    private TextView sparecassetteacindoormotortt;
    private CardView sparecassetteacindoormotorprogressbar;
    private CardView sparecassetteacindoormotorcardview;

    private Button subsparecassetteacoutdoormotor;
    private Button addsparecassetteacoutdoormotor;
    private TextView txtsparecassetteacoutdoormotor;
    private TextView sparecassetteacoutdoormotorrt;
    private TextView sparecassetteacoutdoormotortt;
    private CardView sparecassetteacoutdoormotorprogressbar;
    private CardView sparecassetteacoutdoormotorcardview;

    private Button subsparecassetteacswingmotor;
    private Button addsparecassetteacswingmotor;
    private TextView txtsparecassetteacswingmotor;
    private TextView sparecassetteacswingmotorrt;
    private TextView sparecassetteacswingmotortt;
    private CardView sparecassetteacswingmotorprogressbar;
    private CardView sparecassetteacswingmotorcardview;

    private Button subsparecassetteacindoorcoil;
    private Button addsparecassetteacindoorcoil;
    private TextView txtsparecassetteacindoorcoil;
    private TextView sparecassetteacindoorcoilrt;
    private TextView sparecassetteacindoorcoiltt;
    private CardView sparecassetteacindoorcoilprogressbar;
    private CardView sparecassetteacindoorcoilcardview;

    private Button subsparecassetteacoutdoorcondenser;
    private Button addsparecassetteacoutdoorcondenser;
    private TextView txtsparecassetteacoutdoorcondenser;
    private TextView sparecassetteacoutdoorcondenserrt;
    private TextView sparecassetteacoutdoorcondensertt;
    private CardView sparecassetteacoutdoorcondenserprogressbar;
    private CardView sparecassetteacoutdoorcondensercardview;

    private Button subsparecassetteacswingflap;
    private Button addsparecassetteacswingflap;
    private TextView txtsparecassetteacswingflap;
    private TextView sparecassetteacswingflaprt;
    private TextView sparecassetteacswingflaptt;
    private CardView sparecassetteacswingflapprogressbar;
    private CardView sparecassetteacswingflapcardview;

    private Button subsparecassetteacremote;
    private Button addsparecassetteacremote;
    private TextView txtsparecassetteacremote;
    private TextView sparecassetteacremotert;
    private TextView sparecassetteacremotett;
    private CardView sparecassetteacremoteprogressbar;
    private CardView sparecassetteacremotecardview;

    //faults

    //spiltac

    private Button subfaultsplitacwaterleak;
    private Button addfaultsplitacwaterleak;
    private TextView txtfaultsplitacwaterleak;
    private TextView faultsplitacwaterleakrt;
    private TextView faultsplitacwaterleaktt;
    private CardView faultsplitacwaterleakprogressbar;
    private CardView faultsplitacwaterleakcardview;

    private Button subfaultsplitacgasleak;
    private Button addfaultsplitacgasleak;
    private TextView txtfaultsplitacgasleak;
    private TextView faultsplitacgasleakrt;
    private TextView faultsplitacgasleaktt;
    private CardView faultsplitacgasleakprogressbar;
    private CardView faultsplitacgasleakcardview;

    private Button subfaultsplitacpcboard;
    private Button addfaultsplitacpcboard;
    private TextView txtfaultsplitacpcboard;
    private TextView faultsplitacpcboardrt;
    private TextView faultsplitacpcboardtt;
    private CardView faultsplitacpcboardprogressbar;
    private CardView faultsplitacpcboardcardview;

    private Button subfaultsplitacstabilizer;
    private Button addfaultsplitacstabilizer;
    private TextView txtfaultsplitacstabilizer;
    private TextView faultsplitacstabilizerrt;
    private TextView faultsplitacstabilizertt;
    private CardView faultsplitacstabilizerprogressbar;
    private CardView faultsplitacstabilizercardview;

    private Button subfaultsplitacindoorcoil;
    private Button addfaultsplitacindoorcoil;
    private TextView txtfaultsplitacindoorcoil;
    private TextView faultsplitacindoorcoilrt;
    private TextView faultsplitacindoorcoiltt;
    private CardView faultsplitacindoorcoilprogressbar;
    private CardView faultsplitacindoorcoilcardview;

    private Button subfaultsplitacoutdoorcondenser;
    private Button addfaultsplitacoutdoorcondenser;
    private TextView txtfaultsplitacoutdoorcondenser;
    private TextView faultsplitacoutdoorcondenserrt;
    private TextView faultsplitacoutdoorcondensertt;
    private CardView faultsplitacoutdoorcondenserprogressbar;
    private CardView faultsplitacoutdoorcondensercardview;

    private Button subfaultsplitacremote;
    private Button addfaultsplitacremote;
    private TextView txtfaultsplitacremote;
    private TextView faultsplitacremotert;
    private TextView faultsplitacremotett;
    private CardView faultsplitacremoteprogressbar;
    private CardView faultsplitacremotecardview;

    //windowac

    private Button subfaultwindowacwaterleak;
    private Button addfaultwindowacwaterleak;
    private TextView txtfaultwindowacwaterleak;
    private TextView faultwindowacwaterleakrt;
    private TextView faultwindowacwaterleaktt;
    private CardView faultwindowacwaterleakprogressbar;
    private CardView faultwindowacwaterleakcardview;

    private Button subfaultwindowacgasleak;
    private Button addfaultwindowacgasleak;
    private TextView txtfaultwindowacgasleak;
    private TextView faultwindowacgasleakrt;
    private TextView faultwindowacgasleaktt;
    private CardView faultwindowacgasleakprogressbar;
    private CardView faultwindowacgasleakcardview;

    private Button subfaultwindowacpcboard;
    private Button addfaultwindowacpcboard;
    private TextView txtfaultwindowacpcboard;
    private TextView faultwindowacpcboardrt;
    private TextView faultwindowacpcboardtt;
    private CardView faultwindowacpcboardprogressbar;
    private CardView faultwindowacpcboardcardview;

    private Button subfaultwindowacstabilizer;
    private Button addfaultwindowacstabilizer;
    private TextView txtfaultwindowacstabilizer;
    private TextView faultwindowacstabilizerrt;
    private TextView faultwindowacstabilizertt;
    private CardView faultwindowacstabilizerprogressbar;
    private CardView faultwindowacstabilizercardview;

    private Button subfaultwindowacindoorcoil;
    private Button addfaultwindowacindoorcoil;
    private TextView txtfaultwindowacindoorcoil;
    private TextView faultwindowacindoorcoilrt;
    private TextView faultwindowacindoorcoiltt;
    private CardView faultwindowacindoorcoilprogressbar;
    private CardView faultwindowacindoorcoilcardview;

    private Button subfaultwindowacoutdoorcondenser;
    private Button addfaultwindowacoutdoorcondenser;
    private TextView txtfaultwindowacoutdoorcondenser;
    private TextView faultwindowacoutdoorcondenserrt;
    private TextView faultwindowacoutdoorcondensertt;
    private CardView faultwindowacoutdoorcondenserprogressbar;
    private CardView faultwindowacoutdoorcondensercardview;

    private Button subfaultwindowacremote;
    private Button addfaultwindowacremote;
    private TextView txtfaultwindowacremote;
    private TextView faultwindowacremotert;
    private TextView faultwindowacremotett;
    private CardView faultwindowacremoteprogressbar;
    private CardView faultwindowacremotecardview;

    //cassetteac

    private Button subfaultcassetteacwaterleak;
    private Button addfaultcassetteacwaterleak;
    private TextView txtfaultcassetteacwaterleak;
    private TextView faultcassetteacwaterleakrt;
    private TextView faultcassetteacwaterleaktt;
    private CardView faultcassetteacwaterleakprogressbar;
    private CardView faultcassetteacwaterleakcardview;

    private Button subfaultcassetteacgasleak;
    private Button addfaultcassetteacgasleak;
    private TextView txtfaultcassetteacgasleak;
    private TextView faultcassetteacgasleakrt;
    private TextView faultcassetteacgasleaktt;
    private CardView faultcassetteacgasleakprogressbar;
    private CardView faultcassetteacgasleakcardview;

    private Button subfaultcassetteacpcboard;
    private Button addfaultcassetteacpcboard;
    private TextView txtfaultcassetteacpcboard;
    private TextView faultcassetteacpcboardrt;
    private TextView faultcassetteacpcboardtt;
    private CardView faultcassetteacpcboardprogressbar;
    private CardView faultcassetteacpcboardcardview;

    private Button subfaultcassetteacstabilizer;
    private Button addfaultcassetteacstabilizer;
    private TextView txtfaultcassetteacstabilizer;
    private TextView faultcassetteacstabilizerrt;
    private TextView faultcassetteacstabilizertt;
    private CardView faultcassetteacstabilizerprogressbar;
    private CardView faultcassetteacstabilizercardview;

    private Button subfaultcassetteacindoorcoil;
    private Button addfaultcassetteacindoorcoil;
    private TextView txtfaultcassetteacindoorcoil;
    private TextView faultcassetteacindoorcoilrt;
    private TextView faultcassetteacindoorcoiltt;
    private CardView faultcassetteacindoorcoilprogressbar;
    private CardView faultcassetteacindoorcoilcardview;

    private Button subfaultcassetteacoutdoorcondenser;
    private Button addfaultcassetteacoutdoorcondenser;
    private TextView txtfaultcassetteacoutdoorcondenser;
    private TextView faultcassetteacoutdoorcondenserrt;
    private TextView faultcassetteacoutdoorcondensertt;
    private CardView faultcassetteacoutdoorcondenserprogressbar;
    private CardView faultcassetteacoutdoorcondensercardview;

    private Button subfaultcassetteacremote;
    private Button addfaultcassetteacremote;
    private TextView txtfaultcassetteacremote;
    private TextView faultcassetteacremotert;
    private TextView faultcassetteacremotett;
    private CardView faultcassetteacremoteprogressbar;
    private CardView faultcassetteacremotecardview;

    // installation and uninstallation

    //splitac
    private Button subsplitacinstall;
    private Button addsplitacinstall;
    private TextView txtsplitacinstall;
    private TextView splitacinstallrt;
    private TextView splitacinstalltt;
    private CardView splitacinstallprogressbar;
    private CardView splitacinstallcardview;

    private Button subsplitacuninstall;
    private Button addsplitacuninstall;
    private TextView txtsplitacuninstall;
    private TextView splitacuninstallrt;
    private TextView splitacuninstalltt;
    private CardView splitacuninstallprogressbar;
    private CardView splitacuninstallcardview;

    private Button subsplitaccombo;
    private Button addsplitaccombo;
    private TextView txtsplitaccombo;
    private TextView splitaccombort;
    private TextView splitaccombott;
    private CardView splitaccomboprogressbar;
    private CardView splitaccombocardview;

    //windowac
    private Button subwindowacinstall;
    private Button addwindowacinstall;
    private TextView txtwindowacinstall;
    private TextView windowacinstallrt;
    private TextView windowacinstalltt;
    private CardView windowacinstallprogressbar;
    private CardView windowacinstallcardview;

    private Button subwindowacuninstall;
    private Button addwindowacuninstall;
    private TextView txtwindowacuninstall;
    private TextView windowacuninstallrt;
    private TextView windowacuninstalltt;
    private CardView windowacuninstallprogressbar;
    private CardView windowacuninstallcardview;

    private Button subwindowaccombo;
    private Button addwindowaccombo;
    private TextView txtwindowaccombo;
    private TextView windowaccombort;
    private TextView windowaccombott;
    private CardView windowaccomboprogressbar;
    private CardView windowaccombocardview;

    //cassetteac
    private Button subcassetteacinstall;
    private Button addcassetteacinstall;
    private TextView txtcassetteacinstall;
    private TextView cassetteacinstallrt;
    private TextView cassetteacinstalltt;
    private CardView cassetteacinstallprogressbar;
    private CardView cassetteacinstallcardview;

    private Button subcassetteacuninstall;
    private Button addcassetteacuninstall;
    private TextView txtcassetteacuninstall;
    private TextView cassetteacuninstallrt;
    private TextView cassetteacuninstalltt;
    private CardView cassetteacuninstallprogressbar;
    private CardView cassetteacuninstallcardview;

    private Button subcassetteaccombo;
    private Button addcassetteaccombo;
    private TextView txtcassetteaccombo;
    private TextView cassetteaccombort;
    private TextView cassetteaccombott;
    private CardView cassetteaccomboprogressbar;
    private CardView cassetteaccombocardview;

    private FrameLayout frontloadingpage;
    private DatabaseReference discount = FirebaseDatabase.getInstance().getReference();

    private DatabaseReference root = FirebaseDatabase.getInstance().getReference();
    private DatabaseReference cart = FirebaseDatabase.getInstance().getReference();
    private int gssplitacprice = 0, gswindowacprice = 0, gscassetteacprice = 0;  // general service
    private int wwsplitssacprice = 0, wwwindowssacprice = 0, wwcassettessacprice = 0, wwsplit360acprice = 0, wwcassette360acprice = 0;  // water wash
    private int amcsplitscheme1withsparetotalprice = 0, amcsplitscheme1withsparelimitedprice = 0, amcsplitscheme1withsparenoprice = 0;  // amc split scheme 1
    private int amcsplitscheme2withsparetotalprice = 0, amcsplitscheme2withsparelimitedprice = 0, amcsplitscheme2withsparenoprice = 0;  // amc split scheme 2
    private int amcsplitscheme3withsparetotalprice = 0, amcsplitscheme3withsparelimitedprice = 0, amcsplitscheme3withsparenoprice = 0;  // amc split scheme 3
    private int amcwindowscheme1withsparetotalprice = 0, amcwindowscheme1withsparelimitedprice = 0, amcwindowscheme1withsparenoprice = 0;  // amc window scheme 1
    private int amcwindowscheme2withsparetotalprice = 0, amcwindowscheme2withsparelimitedprice = 0, amcwindowscheme2withsparenoprice = 0;  // amc window scheme 2
    private int amccassettescheme1withsparetotalprice = 0, amccassettescheme1withsparelimitedprice = 0, amccassettescheme1withsparenoprice = 0;  // amc cassette scheme 1
    private int sparessplitaccapacitorprice = 0, sparessplitacblowerprice = 0, sparessplitacoutdoorfanprice = 0, sparessplitacindoormotorprice = 0, sparessplitacoutdoormotorprice = 0, sparessplitacswingmotorprice = 0, sparessplitacindoorcoilprice = 0, sparessplitacoutdoorcondenserprice = 0, sparessplitacswingflapprice = 0, sparessplitacremoteprice = 0;  // spares splitac
    private int spareswindowaccapacitorprice = 0, spareswindowacblowerprice = 0, spareswindowacoutdoorfanprice = 0, spareswindowacindoormotorprice = 0, spareswindowacoutdoormotorprice = 0, spareswindowacswingmotorprice = 0, spareswindowacindoorcoilprice = 0, spareswindowacoutdoorcondenserprice = 0, spareswindowacswingflapprice = 0, spareswindowacremoteprice = 0;  // spares windowac
    private int sparescassetteaccapacitorprice = 0, sparescassetteacblowerprice = 0, sparescassetteacoutdoorfanprice = 0, sparescassetteacindoormotorprice = 0, sparescassetteacoutdoormotorprice = 0, sparescassetteacswingmotorprice = 0, sparescassetteacindoorcoilprice = 0, sparescassetteacoutdoorcondenserprice = 0, sparescassetteacswingflapprice = 0, sparescassetteacremoteprice = 0;  // spares cassetteac
    private int faultssplitacwaterleakprice = 0, faultssplitacgasleakprice = 0, faultssplitacpcboardprice = 0, faultssplitacstabilizerprice = 0, faultssplitacindoorcoilprice = 0, faultssplitacoutdoorcondenserprice = 0, faultssplitacremoteprice = 0;  //faults splitac
    private int faultswindowacwaterleakprice = 0, faultswindowacgasleakprice = 0, faultswindowacpcboardprice = 0, faultswindowacstabilizerprice = 0, faultswindowacindoorcoilprice = 0, faultswindowacoutdoorcondenserprice = 0, faultswindowacremoteprice = 0;  //faults windowac
    private int faultscassetteacwaterleakprice = 0, faultscassetteacgasleakprice = 0, faultscassetteacpcboardprice = 0, faultscassetteacstabilizerprice = 0, faultscassetteacindoorcoilprice = 0, faultscassetteacoutdoorcondenserprice = 0, faultscassetteacremoteprice = 0;  //faults cassetteac
    private int splitacinstallprice = 0, splitacuninstallprice = 0, splitaccomboprice = 0;  // installation and uninstallation splitac
    private int windowacinstallprice = 0, windowacuninstallprice = 0, windowaccomboprice = 0;  // installation and uninstallation windowac
    private int cassetteacinstallprice = 0, cassetteacuninstallprice = 0, cassetteaccomboprice = 0;  // installation and uninstallation cassetteac

    // discount
    private int disgssplitacprice = 0, disgswindowacprice = 0, disgscassetteacprice = 0;  // general service
    private int diswwsplitssacprice = 0, diswwwindowssacprice = 0, diswwcassettessacprice = 0, diswwsplit360acprice = 0, diswwcassette360acprice = 0;  // water wash
    private int disamcsplitscheme1withsparetotalprice = 0, disamcsplitscheme1withsparelimitedprice = 0, disamcsplitscheme1withsparenoprice = 0;  // amc split scheme 1
    private int disamcsplitscheme2withsparetotalprice = 0, disamcsplitscheme2withsparelimitedprice = 0, disamcsplitscheme2withsparenoprice = 0;  // amc split scheme 2
    private int disamcsplitscheme3withsparetotalprice = 0, disamcsplitscheme3withsparelimitedprice = 0, disamcsplitscheme3withsparenoprice = 0;  // amc split scheme 3
    private int disamcwindowscheme1withsparetotalprice = 0, disamcwindowscheme1withsparelimitedprice = 0, disamcwindowscheme1withsparenoprice = 0;  // amc window scheme 1
    private int disamcwindowscheme2withsparetotalprice = 0, disamcwindowscheme2withsparelimitedprice = 0, disamcwindowscheme2withsparenoprice = 0;  // amc window scheme 2
    private int disamccassettescheme1withsparetotalprice = 0, disamccassettescheme1withsparelimitedprice = 0, disamccassettescheme1withsparenoprice = 0;  // amc cassette scheme 1
    private int dissparessplitaccapacitorprice = 0, dissparessplitacblowerprice = 0, dissparessplitacoutdoorfanprice = 0, dissparessplitacindoormotorprice = 0, dissparessplitacoutdoormotorprice = 0, dissparessplitacswingmotorprice = 0, dissparessplitacindoorcoilprice = 0, dissparessplitacoutdoorcondenserprice = 0, dissparessplitacswingflapprice = 0, dissparessplitacremoteprice = 0;  // spares splitac
    private int disspareswindowaccapacitorprice = 0, disspareswindowacblowerprice = 0, disspareswindowacoutdoorfanprice = 0, disspareswindowacindoormotorprice = 0, disspareswindowacoutdoormotorprice = 0, disspareswindowacswingmotorprice = 0, disspareswindowacindoorcoilprice = 0, disspareswindowacoutdoorcondenserprice = 0, disspareswindowacswingflapprice = 0, disspareswindowacremoteprice = 0;  // spares windowac
    private int dissparescassetteaccapacitorprice = 0, dissparescassetteacblowerprice = 0, dissparescassetteacoutdoorfanprice = 0, dissparescassetteacindoormotorprice = 0, dissparescassetteacoutdoormotorprice = 0, dissparescassetteacswingmotorprice = 0, dissparescassetteacindoorcoilprice = 0, dissparescassetteacoutdoorcondenserprice = 0, dissparescassetteacswingflapprice = 0, dissparescassetteacremoteprice = 0;  // spares cassetteac
    private int disfaultssplitacwaterleakprice = 0, disfaultssplitacgasleakprice = 0, disfaultssplitacpcboardprice = 0, disfaultssplitacstabilizerprice = 0, disfaultssplitacindoorcoilprice = 0, disfaultssplitacoutdoorcondenserprice = 0, disfaultssplitacremoteprice = 0;  //faults splitac
    private int disfaultswindowacwaterleakprice = 0, disfaultswindowacgasleakprice = 0, disfaultswindowacpcboardprice = 0, disfaultswindowacstabilizerprice = 0, disfaultswindowacindoorcoilprice = 0, disfaultswindowacoutdoorcondenserprice = 0, disfaultswindowacremoteprice = 0;  //faults windowac
    private int disfaultscassetteacwaterleakprice = 0, disfaultscassetteacgasleakprice = 0, disfaultscassetteacpcboardprice = 0, disfaultscassetteacstabilizerprice = 0, disfaultscassetteacindoorcoilprice = 0, disfaultscassetteacoutdoorcondenserprice = 0, disfaultscassetteacremoteprice = 0;  //faults cassetteac
    private int dissplitacinstallprice = 0, dissplitacuninstallprice = 0, dissplitaccomboprice = 0;  // installation and uninstallation splitac
    private int diswindowacinstallprice = 0, diswindowacuninstallprice = 0, diswindowaccomboprice = 0;  // installation and uninstallation windowac
    private int discassetteacinstallprice = 0, discassetteacuninstallprice = 0, discassetteaccomboprice = 0;  // installation and uninstallation cassetteac

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_summary);


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        root.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {

                // general service

                String stringgssplitacprice = snapshot.child("Products").child(Category1).child("Price").child("SplitAC").getValue().toString();
                String stringgswindowacprice = snapshot.child("Products").child(Category1).child("Price").child("WindowAC").getValue().toString();
                String stringgscassetteacprice = snapshot.child("Products").child(Category1).child("Price").child("CassetteAC").getValue().toString();
                gssplitacprice = Integer.parseInt(stringgssplitacprice);
                gswindowacprice = Integer.parseInt(stringgswindowacprice);
                gscassetteacprice = Integer.parseInt(stringgscassetteacprice);

                //water wash
                String stringwwsplitssacprice = snapshot.child("Products").child(Category2).child("Price").child("SplitSSAC").getValue().toString();
                String stringwwwindowssacprice = snapshot.child("Products").child(Category2).child("Price").child("WindowSSAC").getValue().toString();
                String stringwwcassettessacprice = snapshot.child("Products").child(Category2).child("Price").child("CassetteSSAC").getValue().toString();
                String stringwwsplit360acprice = snapshot.child("Products").child(Category2).child("Price").child("Split360AC").getValue().toString();
                String stringwwcassette360acprice = snapshot.child("Products").child(Category2).child("Price").child("Cassette360AC").getValue().toString();


                wwsplitssacprice = Integer.parseInt(stringwwsplitssacprice);
                wwwindowssacprice = Integer.parseInt(stringwwwindowssacprice);
                wwcassettessacprice = Integer.parseInt(stringwwcassettessacprice);
                wwsplit360acprice = Integer.parseInt(stringwwsplit360acprice);
                wwcassette360acprice = Integer.parseInt(stringwwcassette360acprice);

                //amc

                //split
                //scheme1
                String stringamcsplitscheme1withsparetotalprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Price").child("Totalspare").getValue().toString();
                String stringamcsplitscheme1withsparelimitedprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Price").child("Limitedspare").getValue().toString();
                String stringamcsplitscheme1withsparenoprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").child("Price").child("Nospare").getValue().toString();

                amcsplitscheme1withsparetotalprice = Integer.parseInt(stringamcsplitscheme1withsparetotalprice);
                amcsplitscheme1withsparelimitedprice = Integer.parseInt(stringamcsplitscheme1withsparelimitedprice);
                amcsplitscheme1withsparenoprice = Integer.parseInt(stringamcsplitscheme1withsparenoprice);


                //scheme2
                String stringamcsplitscheme2withsparetotalprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Price").child("Totalspare").getValue().toString();
                String stringamcsplitscheme2withsparelimitedprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Price").child("Limitedspare").getValue().toString();
                String stringamcsplitscheme2withsparenoprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").child("Price").child("Nospare").getValue().toString();


                amcsplitscheme2withsparetotalprice = Integer.parseInt(stringamcsplitscheme2withsparetotalprice);
                amcsplitscheme2withsparelimitedprice = Integer.parseInt(stringamcsplitscheme2withsparelimitedprice);
                amcsplitscheme2withsparenoprice = Integer.parseInt(stringamcsplitscheme2withsparenoprice);

                //scheme3
                String stringamcsplitscheme3withsparetotalprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Price").child("Totalspare").getValue().toString();
                String stringamcsplitscheme3withsparelimitedprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Price").child("Limitedspare").getValue().toString();
                String stringamcsplitscheme3withsparenoprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").child("Price").child("Nospare").getValue().toString();


                amcsplitscheme3withsparetotalprice = Integer.parseInt(stringamcsplitscheme3withsparetotalprice);
                amcsplitscheme3withsparelimitedprice = Integer.parseInt(stringamcsplitscheme3withsparelimitedprice);
                amcsplitscheme3withsparenoprice = Integer.parseInt(stringamcsplitscheme3withsparenoprice);


                //window
                //scheme1
                String stringamcwindowscheme1withsparetotalprice = snapshot.child("Products").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Price").child("Totalspare").getValue().toString();
                String stringamcwindowscheme1withsparelimitedprice = snapshot.child("Products").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Price").child("Limitedspare").getValue().toString();
                String stringamcwindowscheme1withsparenoprice = snapshot.child("Products").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").child("Price").child("Nospare").getValue().toString();

                amcwindowscheme1withsparetotalprice = Integer.parseInt(stringamcwindowscheme1withsparetotalprice);
                amcwindowscheme1withsparelimitedprice = Integer.parseInt(stringamcwindowscheme1withsparelimitedprice);
                amcwindowscheme1withsparenoprice = Integer.parseInt(stringamcwindowscheme1withsparenoprice);

                //scheme2
                String stringamcwindowscheme2withsparetotalprice = snapshot.child("Products").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Price").child("Totalspare").getValue().toString();
                String stringamcwindowscheme2withsparelimitedprice = snapshot.child("Products").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Price").child("Limitedspare").getValue().toString();
                String stringamcwindowscheme2withsparenoprice = snapshot.child("Products").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").child("Price").child("Nospare").getValue().toString();


                amcwindowscheme2withsparetotalprice = Integer.parseInt(stringamcwindowscheme2withsparetotalprice);
                amcwindowscheme2withsparelimitedprice = Integer.parseInt(stringamcwindowscheme2withsparelimitedprice);
                amcwindowscheme2withsparenoprice = Integer.parseInt(stringamcwindowscheme2withsparenoprice);

                //cassette
                //scheme1
                String stringamccassettescheme1withsparetotalprice = snapshot.child("Products").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Price").child("Totalspare").getValue().toString();
                String stringamccassettescheme1withsparelimitedprice = snapshot.child("Products").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Price").child("Limitedspare").getValue().toString();
                String stringamccassettescheme1withsparenoprice = snapshot.child("Products").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").child("Price").child("Nospare").getValue().toString();

                amccassettescheme1withsparetotalprice = Integer.parseInt(stringamccassettescheme1withsparetotalprice);
                amccassettescheme1withsparelimitedprice = Integer.parseInt(stringamccassettescheme1withsparelimitedprice);
                amccassettescheme1withsparenoprice = Integer.parseInt(stringamccassettescheme1withsparenoprice);


                //spares
                //splitac
                String stringsparessplitaccapacitorprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Price").child("Capacitor").getValue().toString();
                String stringsparessplitacblowerprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Price").child("Blower").getValue().toString();
                String stringsparessplitacoutdoorfanprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Price").child("Outdoorfan").getValue().toString();
                String stringsparessplitacindoormotorprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Price").child("Indoormotor").getValue().toString();
                String stringsparessplitacoutdoormotorprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Price").child("Outdoormotor").getValue().toString();
                String stringsparessplitacswingmotorprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Price").child("Swingmotor").getValue().toString();
                String stringsparessplitacindoorcoilprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Price").child("Indoorcoil").getValue().toString();
                String stringsparessplitacoutdoorcondenserprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Price").child("Outdoorcondenser").getValue().toString();
                String stringsparessplitacswingflapprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Price").child("Swingflap").getValue().toString();
                String stringsparessplitacremoteprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Price").child("Remote").getValue().toString();


                sparessplitaccapacitorprice = Integer.parseInt(stringsparessplitaccapacitorprice);
                sparessplitacblowerprice = Integer.parseInt(stringsparessplitacblowerprice);
                sparessplitacoutdoorfanprice = Integer.parseInt(stringsparessplitacoutdoorfanprice);
                sparessplitacindoormotorprice = Integer.parseInt(stringsparessplitacindoormotorprice);
                sparessplitacoutdoormotorprice = Integer.parseInt(stringsparessplitacoutdoormotorprice);
                sparessplitacswingmotorprice = Integer.parseInt(stringsparessplitacswingmotorprice);
                sparessplitacindoorcoilprice = Integer.parseInt(stringsparessplitacindoorcoilprice);
                sparessplitacoutdoorcondenserprice = Integer.parseInt(stringsparessplitacoutdoorcondenserprice);
                sparessplitacswingflapprice = Integer.parseInt(stringsparessplitacswingflapprice);
                sparessplitacremoteprice = Integer.parseInt(stringsparessplitacremoteprice);

                //windowac
                String stringspareswindowaccapacitorprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Price").child("Capacitor").getValue().toString();
                String stringspareswindowacblowerprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Price").child("Blower").getValue().toString();
                String stringspareswindowacoutdoorfanprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Price").child("Outdoorfan").getValue().toString();
                String stringspareswindowacindoormotorprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Price").child("Indoormotor").getValue().toString();
                String stringspareswindowacoutdoormotorprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Price").child("Outdoormotor").getValue().toString();
                String stringspareswindowacswingmotorprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Price").child("Swingmotor").getValue().toString();
                String stringspareswindowacindoorcoilprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Price").child("Indoorcoil").getValue().toString();
                String stringspareswindowacoutdoorcondenserprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Price").child("Outdoorcondenser").getValue().toString();
                String stringspareswindowacswingflapprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Price").child("Swingflap").getValue().toString();
                String stringspareswindowacremoteprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Price").child("Remote").getValue().toString();


                spareswindowaccapacitorprice = Integer.parseInt(stringspareswindowaccapacitorprice);
                spareswindowacblowerprice = Integer.parseInt(stringspareswindowacblowerprice);
                spareswindowacoutdoorfanprice = Integer.parseInt(stringspareswindowacoutdoorfanprice);
                spareswindowacindoormotorprice = Integer.parseInt(stringspareswindowacindoormotorprice);
                spareswindowacoutdoormotorprice = Integer.parseInt(stringspareswindowacoutdoormotorprice);
                spareswindowacswingmotorprice = Integer.parseInt(stringspareswindowacswingmotorprice);
                spareswindowacindoorcoilprice = Integer.parseInt(stringspareswindowacindoorcoilprice);
                spareswindowacoutdoorcondenserprice = Integer.parseInt(stringspareswindowacoutdoorcondenserprice);
                spareswindowacswingflapprice = Integer.parseInt(stringspareswindowacswingflapprice);
                spareswindowacremoteprice = Integer.parseInt(stringspareswindowacremoteprice);

                //cassetteac
                String stringsparescassetteaccapacitorprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Price").child("Capacitor").getValue().toString();
                String stringsparescassetteacblowerprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Price").child("Blower").getValue().toString();
                String stringsparescassetteacoutdoorfanprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Price").child("Outdoorfan").getValue().toString();
                String stringsparescassetteacindoormotorprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Price").child("Indoormotor").getValue().toString();
                String stringsparescassetteacoutdoormotorprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Price").child("Outdoormotor").getValue().toString();
                String stringsparescassetteacswingmotorprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Price").child("Swingmotor").getValue().toString();
                String stringsparescassetteacindoorcoilprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Price").child("Indoorcoil").getValue().toString();
                String stringsparescassetteacoutdoorcondenserprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Price").child("Outdoorcondenser").getValue().toString();
                String stringsparescassetteacswingflapprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Price").child("Swingflap").getValue().toString();
                String stringsparescassetteacremoteprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Price").child("Remote").getValue().toString();


                sparescassetteaccapacitorprice = Integer.parseInt(stringsparescassetteaccapacitorprice);
                sparescassetteacblowerprice = Integer.parseInt(stringsparescassetteacblowerprice);
                sparescassetteacoutdoorfanprice = Integer.parseInt(stringsparescassetteacoutdoorfanprice);
                sparescassetteacindoormotorprice = Integer.parseInt(stringsparescassetteacindoormotorprice);
                sparescassetteacoutdoormotorprice = Integer.parseInt(stringsparescassetteacoutdoormotorprice);
                sparescassetteacswingmotorprice = Integer.parseInt(stringsparescassetteacswingmotorprice);
                sparescassetteacindoorcoilprice = Integer.parseInt(stringsparescassetteacindoorcoilprice);
                sparescassetteacoutdoorcondenserprice = Integer.parseInt(stringsparescassetteacoutdoorcondenserprice);
                sparescassetteacswingflapprice = Integer.parseInt(stringsparescassetteacswingflapprice);
                sparescassetteacremoteprice = Integer.parseInt(stringsparescassetteacremoteprice);

                //Faults

                //splitac
                String stringfaultssplitacwaterleakprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Price").child("Waterleak").getValue().toString();
                String stringfaultssplitacgasleakprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Price").child("Gasleak").getValue().toString();
                String stringfaultssplitacpcboardprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Price").child("Pcboard").getValue().toString();
                String stringfaultssplitacstabilizerprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Price").child("Stabilizer").getValue().toString();
                String stringfaultssplitacindoorcoilprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Price").child("Indoorcoil").getValue().toString();
                String stringfaultssplitacoutdoorcondenserprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Price").child("Outdoorcondenser").getValue().toString();
                String stringfaultssplitacremoteprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Price").child("Remote").getValue().toString();


                faultssplitacwaterleakprice = Integer.parseInt(stringfaultssplitacwaterleakprice);
                faultssplitacgasleakprice = Integer.parseInt(stringfaultssplitacgasleakprice);
                faultssplitacpcboardprice = Integer.parseInt(stringfaultssplitacpcboardprice);
                faultssplitacstabilizerprice = Integer.parseInt(stringfaultssplitacstabilizerprice);
                faultssplitacindoorcoilprice = Integer.parseInt(stringfaultssplitacindoorcoilprice);
                faultssplitacoutdoorcondenserprice = Integer.parseInt(stringfaultssplitacoutdoorcondenserprice);
                faultssplitacremoteprice = Integer.parseInt(stringfaultssplitacremoteprice);

                //windowac
                String stringfaultswindowacwaterleakprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Price").child("Waterleak").getValue().toString();
                String stringfaultswindowacgasleakprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Price").child("Gasleak").getValue().toString();
                String stringfaultswindowacpcboardprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Price").child("Pcboard").getValue().toString();
                String stringfaultswindowacstabilizerprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Price").child("Stabilizer").getValue().toString();
                String stringfaultswindowacindoorcoilprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Price").child("Indoorcoil").getValue().toString();
                String stringfaultswindowacoutdoorcondenserprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Price").child("Outdoorcondenser").getValue().toString();
                String stringfaultswindowacremoteprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Price").child("Remote").getValue().toString();


                faultswindowacwaterleakprice = Integer.parseInt(stringfaultswindowacwaterleakprice);
                faultswindowacgasleakprice = Integer.parseInt(stringfaultswindowacgasleakprice);
                faultswindowacpcboardprice = Integer.parseInt(stringfaultswindowacpcboardprice);
                faultswindowacstabilizerprice = Integer.parseInt(stringfaultswindowacstabilizerprice);
                faultswindowacindoorcoilprice = Integer.parseInt(stringfaultswindowacindoorcoilprice);
                faultswindowacoutdoorcondenserprice = Integer.parseInt(stringfaultswindowacoutdoorcondenserprice);
                faultswindowacremoteprice = Integer.parseInt(stringfaultswindowacremoteprice);

                //cassetteac
                String stringfaultscassetteacwaterleakprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Price").child("Waterleak").getValue().toString();
                String stringfaultscassetteacgasleakprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Price").child("Gasleak").getValue().toString();
                String stringfaultscassetteacpcboardprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Price").child("Pcboard").getValue().toString();
                String stringfaultscassetteacstabilizerprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Price").child("Stabilizer").getValue().toString();
                String stringfaultscassetteacindoorcoilprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Price").child("Indoorcoil").getValue().toString();
                String stringfaultscassetteacoutdoorcondenserprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Price").child("Outdoorcondenser").getValue().toString();
                String stringfaultscassetteacremoteprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Price").child("Remote").getValue().toString();


                faultscassetteacwaterleakprice = Integer.parseInt(stringfaultscassetteacwaterleakprice);
                faultscassetteacgasleakprice = Integer.parseInt(stringfaultscassetteacgasleakprice);
                faultscassetteacpcboardprice = Integer.parseInt(stringfaultscassetteacpcboardprice);
                faultscassetteacstabilizerprice = Integer.parseInt(stringfaultscassetteacstabilizerprice);
                faultscassetteacindoorcoilprice = Integer.parseInt(stringfaultscassetteacindoorcoilprice);
                faultscassetteacoutdoorcondenserprice = Integer.parseInt(stringfaultscassetteacoutdoorcondenserprice);
                faultscassetteacremoteprice = Integer.parseInt(stringfaultscassetteacremoteprice);


                //INSTALLATION AND UNINSTALLATION

                //SPLITA
                //
                //
                String stringsplitacinstallprice = snapshot.child("Products").child(Category6).child("SplitAC").child("Price").child("Install").getValue().toString();
                String stringsplitacuninstallprice = snapshot.child("Products").child(Category6).child("SplitAC").child("Price").child("Uninstall").getValue().toString();
                String stringsplitaccomboprice = snapshot.child("Products").child(Category6).child("SplitAC").child("Price").child("Combo").getValue().toString();


                splitacinstallprice = Integer.parseInt(stringsplitacinstallprice);
                splitacuninstallprice = Integer.parseInt(stringsplitacuninstallprice);
                splitaccomboprice = Integer.parseInt(stringsplitaccomboprice);

                //windowA
                //
                //
                String stringwindowacinstallprice = snapshot.child("Products").child(Category6).child("WindowAC").child("Price").child("Install").getValue().toString();
                String stringwindowacuninstallprice = snapshot.child("Products").child(Category6).child("WindowAC").child("Price").child("Uninstall").getValue().toString();
                String stringwindowaccomboprice = snapshot.child("Products").child(Category6).child("WindowAC").child("Price").child("Combo").getValue().toString();


                windowacinstallprice = Integer.parseInt(stringwindowacinstallprice);
                windowacuninstallprice = Integer.parseInt(stringwindowacuninstallprice);
                windowaccomboprice = Integer.parseInt(stringwindowaccomboprice);

                //cassetteA
                //
                //
                String stringcassetteacinstallprice = snapshot.child("Products").child(Category6).child("CassetteAC").child("Price").child("Install").getValue().toString();
                String stringcassetteacuninstallprice = snapshot.child("Products").child(Category6).child("CassetteAC").child("Price").child("Uninstall").getValue().toString();
                String stringcassetteaccomboprice = snapshot.child("Products").child(Category6).child("CassetteAC").child("Price").child("Combo").getValue().toString();


                cassetteacinstallprice = Integer.parseInt(stringcassetteacinstallprice);
                cassetteacuninstallprice = Integer.parseInt(stringcassetteacuninstallprice);
                cassetteaccomboprice = Integer.parseInt(stringcassetteaccomboprice);

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        discount.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {

                // general service

                String disstringgssplitacprice = snapshot.child("Products").child(Category1).child("Discount").child("SplitAC").getValue().toString();
                String disstringgswindowacprice = snapshot.child("Products").child(Category1).child("Discount").child("WindowAC").getValue().toString();
                String disstringgscassetteacprice = snapshot.child("Products").child(Category1).child("Discount").child("CassetteAC").getValue().toString();
                disgssplitacprice = Integer.parseInt(disstringgssplitacprice);
                disgswindowacprice = Integer.parseInt(disstringgswindowacprice);
                disgscassetteacprice = Integer.parseInt(disstringgscassetteacprice);

                // water wash
                String disstringwwsplitssacprice = snapshot.child("Products").child("WaterWash").child("Discount").child("SplitSSAC").getValue().toString();
                String disstringwwwindowssacprice = snapshot.child("Products").child("WaterWash").child("Discount").child("WindowSSAC").getValue().toString();
                String disstringwwcassettessacprice = snapshot.child("Products").child("WaterWash").child("Discount").child("CassetteSSAC").getValue().toString();
                String disstringwwsplit360acprice = snapshot.child("Products").child("WaterWash").child("Discount").child("Split360AC").getValue().toString();
                String disstringwwcassette360acprice = snapshot.child("Products").child("WaterWash").child("Discount").child("Cassette360AC").getValue().toString();


                diswwsplitssacprice = Integer.parseInt(disstringwwsplitssacprice);
                diswwwindowssacprice = Integer.parseInt(disstringwwwindowssacprice);
                diswwcassettessacprice = Integer.parseInt(disstringwwcassettessacprice);
                diswwsplit360acprice = Integer.parseInt(disstringwwsplit360acprice);
                diswwcassette360acprice = Integer.parseInt(disstringwwcassette360acprice);

                //amc

                //split
                //scheme1
                String disstringamcsplitscheme1withsparetotalprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Discount").child("Totalspare").getValue().toString();
                String disstringamcsplitscheme1withsparelimitedprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Discount").child("Limitedspare").getValue().toString();
                String disstringamcsplitscheme1withsparenoprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").child("Discount").child("Nospare").getValue().toString();

                disamcsplitscheme1withsparetotalprice = Integer.parseInt(disstringamcsplitscheme1withsparetotalprice);
                disamcsplitscheme1withsparelimitedprice = Integer.parseInt(disstringamcsplitscheme1withsparelimitedprice);
                disamcsplitscheme1withsparenoprice = Integer.parseInt(disstringamcsplitscheme1withsparenoprice);


                //scheme2
                String disstringamcsplitscheme2withsparetotalprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Discount").child("Totalspare").getValue().toString();
                String disstringamcsplitscheme2withsparelimitedprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Discount").child("Limitedspare").getValue().toString();
                String disstringamcsplitscheme2withsparenoprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").child("Discount").child("Nospare").getValue().toString();


                disamcsplitscheme2withsparetotalprice = Integer.parseInt(disstringamcsplitscheme2withsparetotalprice);
                disamcsplitscheme2withsparelimitedprice = Integer.parseInt(disstringamcsplitscheme2withsparelimitedprice);
                disamcsplitscheme2withsparenoprice = Integer.parseInt(disstringamcsplitscheme2withsparenoprice);

                //scheme3
                String disstringamcsplitscheme3withsparetotalprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Discount").child("Totalspare").getValue().toString();
                String disstringamcsplitscheme3withsparelimitedprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Discount").child("Limitedspare").getValue().toString();
                String disstringamcsplitscheme3withsparenoprice = snapshot.child("Products").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").child("Discount").child("Nospare").getValue().toString();


                disamcsplitscheme3withsparetotalprice = Integer.parseInt(disstringamcsplitscheme3withsparetotalprice);
                disamcsplitscheme3withsparelimitedprice = Integer.parseInt(disstringamcsplitscheme3withsparelimitedprice);
                disamcsplitscheme3withsparenoprice = Integer.parseInt(disstringamcsplitscheme3withsparenoprice);


                //window
                //scheme1
                String disstringamcwindowscheme1withsparetotalprice = snapshot.child("Products").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Discount").child("Totalspare").getValue().toString();
                String disstringamcwindowscheme1withsparelimitedprice = snapshot.child("Products").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Discount").child("Limitedspare").getValue().toString();
                String disstringamcwindowscheme1withsparenoprice = snapshot.child("Products").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").child("Discount").child("Nospare").getValue().toString();

                disamcwindowscheme1withsparetotalprice = Integer.parseInt(disstringamcwindowscheme1withsparetotalprice);
                disamcwindowscheme1withsparelimitedprice = Integer.parseInt(disstringamcwindowscheme1withsparelimitedprice);
                disamcwindowscheme1withsparenoprice = Integer.parseInt(disstringamcwindowscheme1withsparenoprice);

                //scheme2
                String disstringamcwindowscheme2withsparetotalprice = snapshot.child("Products").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Discount").child("Totalspare").getValue().toString();
                String disstringamcwindowscheme2withsparelimitedprice = snapshot.child("Products").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Discount").child("Limitedspare").getValue().toString();
                String disstringamcwindowscheme2withsparenoprice = snapshot.child("Products").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").child("Discount").child("Nospare").getValue().toString();


                disamcwindowscheme2withsparetotalprice = Integer.parseInt(disstringamcwindowscheme2withsparetotalprice);
                disamcwindowscheme2withsparelimitedprice = Integer.parseInt(disstringamcwindowscheme2withsparelimitedprice);
                disamcwindowscheme2withsparenoprice = Integer.parseInt(disstringamcwindowscheme2withsparenoprice);

                //cassette
                //scheme1
                String disstringamccassettescheme1withsparetotalprice = snapshot.child("Products").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Discount").child("Totalspare").getValue().toString();
                String disstringamccassettescheme1withsparelimitedprice = snapshot.child("Products").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Discount").child("Limitedspare").getValue().toString();
                String disstringamccassettescheme1withsparenoprice = snapshot.child("Products").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").child("Discount").child("Nospare").getValue().toString();

                disamccassettescheme1withsparetotalprice = Integer.parseInt(disstringamccassettescheme1withsparetotalprice);
                disamccassettescheme1withsparelimitedprice = Integer.parseInt(disstringamccassettescheme1withsparelimitedprice);
                disamccassettescheme1withsparenoprice = Integer.parseInt(disstringamccassettescheme1withsparenoprice);


                //spares
                //splitac
                String disstringsparessplitaccapacitorprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Discount").child("Capacitor").getValue().toString();
                String disstringsparessplitacblowerprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Discount").child("Blower").getValue().toString();
                String disstringsparessplitacoutdoorfanprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Discount").child("Outdoorfan").getValue().toString();
                String disstringsparessplitacindoormotorprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Discount").child("Indoormotor").getValue().toString();
                String disstringsparessplitacoutdoormotorprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Discount").child("Outdoormotor").getValue().toString();
                String disstringsparessplitacswingmotorprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Discount").child("Swingmotor").getValue().toString();
                String disstringsparessplitacindoorcoilprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Discount").child("Indoorcoil").getValue().toString();
                String disstringsparessplitacoutdoorcondenserprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Discount").child("Outdoorcondenser").getValue().toString();
                String disstringsparessplitacswingflapprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Discount").child("Swingflap").getValue().toString();
                String disstringsparessplitacremoteprice = snapshot.child("Products").child(Category4).child("SplitAC").child("Discount").child("Remote").getValue().toString();


                dissparessplitaccapacitorprice = Integer.parseInt(disstringsparessplitaccapacitorprice);
                dissparessplitacblowerprice = Integer.parseInt(disstringsparessplitacblowerprice);
                dissparessplitacoutdoorfanprice = Integer.parseInt(disstringsparessplitacoutdoorfanprice);
                dissparessplitacindoormotorprice = Integer.parseInt(disstringsparessplitacindoormotorprice);
                dissparessplitacoutdoormotorprice = Integer.parseInt(disstringsparessplitacoutdoormotorprice);
                dissparessplitacswingmotorprice = Integer.parseInt(disstringsparessplitacswingmotorprice);
                dissparessplitacindoorcoilprice = Integer.parseInt(disstringsparessplitacindoorcoilprice);
                dissparessplitacoutdoorcondenserprice = Integer.parseInt(disstringsparessplitacoutdoorcondenserprice);
                dissparessplitacswingflapprice = Integer.parseInt(disstringsparessplitacswingflapprice);
                dissparessplitacremoteprice = Integer.parseInt(disstringsparessplitacremoteprice);

                //windowac
                String disstringspareswindowaccapacitorprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Discount").child("Capacitor").getValue().toString();
                String disstringspareswindowacblowerprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Discount").child("Blower").getValue().toString();
                String disstringspareswindowacoutdoorfanprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Discount").child("Outdoorfan").getValue().toString();
                String disstringspareswindowacindoormotorprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Discount").child("Indoormotor").getValue().toString();
                String disstringspareswindowacoutdoormotorprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Discount").child("Outdoormotor").getValue().toString();
                String disstringspareswindowacswingmotorprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Discount").child("Swingmotor").getValue().toString();
                String disstringspareswindowacindoorcoilprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Discount").child("Indoorcoil").getValue().toString();
                String disstringspareswindowacoutdoorcondenserprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Discount").child("Outdoorcondenser").getValue().toString();
                String disstringspareswindowacswingflapprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Discount").child("Swingflap").getValue().toString();
                String disstringspareswindowacremoteprice = snapshot.child("Products").child(Category4).child("WindowAC").child("Discount").child("Remote").getValue().toString();


                disspareswindowaccapacitorprice = Integer.parseInt(disstringspareswindowaccapacitorprice);
                disspareswindowacblowerprice = Integer.parseInt(disstringspareswindowacblowerprice);
                disspareswindowacoutdoorfanprice = Integer.parseInt(disstringspareswindowacoutdoorfanprice);
                disspareswindowacindoormotorprice = Integer.parseInt(disstringspareswindowacindoormotorprice);
                disspareswindowacoutdoormotorprice = Integer.parseInt(disstringspareswindowacoutdoormotorprice);
                disspareswindowacswingmotorprice = Integer.parseInt(disstringspareswindowacswingmotorprice);
                disspareswindowacindoorcoilprice = Integer.parseInt(disstringspareswindowacindoorcoilprice);
                disspareswindowacoutdoorcondenserprice = Integer.parseInt(disstringspareswindowacoutdoorcondenserprice);
                disspareswindowacswingflapprice = Integer.parseInt(disstringspareswindowacswingflapprice);
                disspareswindowacremoteprice = Integer.parseInt(disstringspareswindowacremoteprice);

                //cassetteac
                String disstringsparescassetteaccapacitorprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Discount").child("Capacitor").getValue().toString();
                String disstringsparescassetteacblowerprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Discount").child("Blower").getValue().toString();
                String disstringsparescassetteacoutdoorfanprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Discount").child("Outdoorfan").getValue().toString();
                String disstringsparescassetteacindoormotorprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Discount").child("Indoormotor").getValue().toString();
                String disstringsparescassetteacoutdoormotorprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Discount").child("Outdoormotor").getValue().toString();
                String disstringsparescassetteacswingmotorprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Discount").child("Swingmotor").getValue().toString();
                String disstringsparescassetteacindoorcoilprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Discount").child("Indoorcoil").getValue().toString();
                String disstringsparescassetteacoutdoorcondenserprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Discount").child("Outdoorcondenser").getValue().toString();
                String disstringsparescassetteacswingflapprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Discount").child("Swingflap").getValue().toString();
                String disstringsparescassetteacremoteprice = snapshot.child("Products").child(Category4).child("CassetteAC").child("Discount").child("Remote").getValue().toString();


                dissparescassetteaccapacitorprice = Integer.parseInt(disstringsparescassetteaccapacitorprice);
                dissparescassetteacblowerprice = Integer.parseInt(disstringsparescassetteacblowerprice);
                dissparescassetteacoutdoorfanprice = Integer.parseInt(disstringsparescassetteacoutdoorfanprice);
                dissparescassetteacindoormotorprice = Integer.parseInt(disstringsparescassetteacindoormotorprice);
                dissparescassetteacoutdoormotorprice = Integer.parseInt(disstringsparescassetteacoutdoormotorprice);
                dissparescassetteacswingmotorprice = Integer.parseInt(disstringsparescassetteacswingmotorprice);
                dissparescassetteacindoorcoilprice = Integer.parseInt(disstringsparescassetteacindoorcoilprice);
                dissparescassetteacoutdoorcondenserprice = Integer.parseInt(disstringsparescassetteacoutdoorcondenserprice);
                dissparescassetteacswingflapprice = Integer.parseInt(disstringsparescassetteacswingflapprice);
                dissparescassetteacremoteprice = Integer.parseInt(disstringsparescassetteacremoteprice);

                //Faults

                //splitac
                String disstringfaultssplitacwaterleakprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Discount").child("Waterleak").getValue().toString();
                String disstringfaultssplitacgasleakprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Discount").child("Gasleak").getValue().toString();
                String disstringfaultssplitacpcboardprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Discount").child("Pcboard").getValue().toString();
                String disstringfaultssplitacstabilizerprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Discount").child("Stabilizer").getValue().toString();
                String disstringfaultssplitacindoorcoilprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Discount").child("Indoorcoil").getValue().toString();
                String disstringfaultssplitacoutdoorcondenserprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Discount").child("Outdoorcondenser").getValue().toString();
                String disstringfaultssplitacremoteprice = snapshot.child("Products").child(Category5).child("SplitAC").child("Discount").child("Remote").getValue().toString();


                disfaultssplitacwaterleakprice = Integer.parseInt(disstringfaultssplitacwaterleakprice);
                disfaultssplitacgasleakprice = Integer.parseInt(disstringfaultssplitacgasleakprice);
                disfaultssplitacpcboardprice = Integer.parseInt(disstringfaultssplitacpcboardprice);
                disfaultssplitacstabilizerprice = Integer.parseInt(disstringfaultssplitacstabilizerprice);
                disfaultssplitacindoorcoilprice = Integer.parseInt(disstringfaultssplitacindoorcoilprice);
                disfaultssplitacoutdoorcondenserprice = Integer.parseInt(disstringfaultssplitacoutdoorcondenserprice);
                disfaultssplitacremoteprice = Integer.parseInt(disstringfaultssplitacremoteprice);

                //windowac
                String disstringfaultswindowacwaterleakprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Discount").child("Waterleak").getValue().toString();
                String disstringfaultswindowacgasleakprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Discount").child("Gasleak").getValue().toString();
                String disstringfaultswindowacpcboardprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Discount").child("Pcboard").getValue().toString();
                String disstringfaultswindowacstabilizerprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Discount").child("Stabilizer").getValue().toString();
                String disstringfaultswindowacindoorcoilprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Discount").child("Indoorcoil").getValue().toString();
                String disstringfaultswindowacoutdoorcondenserprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Discount").child("Outdoorcondenser").getValue().toString();
                String disstringfaultswindowacremoteprice = snapshot.child("Products").child(Category5).child("WindowAC").child("Discount").child("Remote").getValue().toString();


                disfaultswindowacwaterleakprice = Integer.parseInt(disstringfaultswindowacwaterleakprice);
                disfaultswindowacgasleakprice = Integer.parseInt(disstringfaultswindowacgasleakprice);
                disfaultswindowacpcboardprice = Integer.parseInt(disstringfaultswindowacpcboardprice);
                disfaultswindowacstabilizerprice = Integer.parseInt(disstringfaultswindowacstabilizerprice);
                disfaultswindowacindoorcoilprice = Integer.parseInt(disstringfaultswindowacindoorcoilprice);
                disfaultswindowacoutdoorcondenserprice = Integer.parseInt(disstringfaultswindowacoutdoorcondenserprice);
                disfaultswindowacremoteprice = Integer.parseInt(disstringfaultswindowacremoteprice);

                //cassetteac
                String disstringfaultscassetteacwaterleakprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Discount").child("Waterleak").getValue().toString();
                String disstringfaultscassetteacgasleakprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Discount").child("Gasleak").getValue().toString();
                String disstringfaultscassetteacpcboardprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Discount").child("Pcboard").getValue().toString();
                String disstringfaultscassetteacstabilizerprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Discount").child("Stabilizer").getValue().toString();
                String disstringfaultscassetteacindoorcoilprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Discount").child("Indoorcoil").getValue().toString();
                String disstringfaultscassetteacoutdoorcondenserprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Discount").child("Outdoorcondenser").getValue().toString();
                String disstringfaultscassetteacremoteprice = snapshot.child("Products").child(Category5).child("CassetteAC").child("Discount").child("Remote").getValue().toString();


                disfaultscassetteacwaterleakprice = Integer.parseInt(disstringfaultscassetteacwaterleakprice);
                disfaultscassetteacgasleakprice = Integer.parseInt(disstringfaultscassetteacgasleakprice);
                disfaultscassetteacpcboardprice = Integer.parseInt(disstringfaultscassetteacpcboardprice);
                disfaultscassetteacstabilizerprice = Integer.parseInt(disstringfaultscassetteacstabilizerprice);
                disfaultscassetteacindoorcoilprice = Integer.parseInt(disstringfaultscassetteacindoorcoilprice);
                disfaultscassetteacoutdoorcondenserprice = Integer.parseInt(disstringfaultscassetteacoutdoorcondenserprice);
                disfaultscassetteacremoteprice = Integer.parseInt(disstringfaultscassetteacremoteprice);


                //INSTALLATION AND UNINSTALLATION

                //SPLITA
                //
                //
                String disstringsplitacinstallprice = snapshot.child("Products").child(Category6).child("SplitAC").child("Discount").child("Install").getValue().toString();
                String disstringsplitacuninstallprice = snapshot.child("Products").child(Category6).child("SplitAC").child("Discount").child("Uninstall").getValue().toString();
                String disstringsplitaccomboprice = snapshot.child("Products").child(Category6).child("SplitAC").child("Discount").child("Combo").getValue().toString();


                dissplitacinstallprice = Integer.parseInt(disstringsplitacinstallprice);
                dissplitacuninstallprice = Integer.parseInt(disstringsplitacuninstallprice);
                dissplitaccomboprice = Integer.parseInt(disstringsplitaccomboprice);

                //windowA
                //
                //
                String disstringwindowacinstallprice = snapshot.child("Products").child(Category6).child("WindowAC").child("Discount").child("Install").getValue().toString();
                String disstringwindowacuninstallprice = snapshot.child("Products").child(Category6).child("WindowAC").child("Discount").child("Uninstall").getValue().toString();
                String disstringwindowaccomboprice = snapshot.child("Products").child(Category6).child("WindowAC").child("Discount").child("Combo").getValue().toString();


                diswindowacinstallprice = Integer.parseInt(disstringwindowacinstallprice);
                diswindowacuninstallprice = Integer.parseInt(disstringwindowacuninstallprice);
                diswindowaccomboprice = Integer.parseInt(disstringwindowaccomboprice);

                //cassetteA
                //
                //
                String disstringcassetteacinstallprice = snapshot.child("Products").child(Category6).child("CassetteAC").child("Discount").child("Install").getValue().toString();
                String disstringcassetteacuninstallprice = snapshot.child("Products").child(Category6).child("CassetteAC").child("Discount").child("Uninstall").getValue().toString();
                String disstringcassetteaccomboprice = snapshot.child("Products").child(Category6).child("CassetteAC").child("Discount").child("Combo").getValue().toString();


                discassetteacinstallprice = Integer.parseInt(disstringcassetteacinstallprice);
                discassetteacuninstallprice = Integer.parseInt(disstringcassetteacuninstallprice);
                discassetteaccomboprice = Integer.parseInt(disstringcassetteaccomboprice);

            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });


        //////////////ccccccccccccccc///////////////aaaaaaaaaaaaa///////////rrrrrrrrrrrr/////////////////ttttttttttttttttt/////////////////


        // general service

        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String gssplitacdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("SplitAC").getValue().toString();
                String gssplitacdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("SplitACTOTAL").getValue().toString();
                gstxtsplit.setText("" + gssplitacdatabaseQvalue);
                gssplitrt.setText("" + gssplitacprice);
                gssplittt.setText("" + gssplitacdatabaseQprice);
                int intgssplitacdatabaseQvalue = Integer.parseInt(gssplitacdatabaseQvalue);
                if (intgssplitacdatabaseQvalue <= 0) {
                    gssplitaccardview.setVisibility(View.GONE);
                } else {
                    gssplitaccardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String gswindowacdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("WindowAC").getValue().toString();
                String gswindowacdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("WindowACTOTAL").getValue().toString();
                gstxtwindow.setText("" + gswindowacdatabaseQvalue);
                gswindowrt.setText("" + gswindowacprice);
                gswindowtt.setText("" + gswindowacdatabaseQprice);
                int intgswindowacdatabaseQvalue = Integer.parseInt(gswindowacdatabaseQvalue);
                if (intgswindowacdatabaseQvalue <= 0) {
                    gswindowaccardview.setVisibility(View.GONE);
                } else {
                    gswindowaccardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String gscassetteacdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("CassetteAC").getValue().toString();
                String gscassetteacdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("CassetteACTOTAL").getValue().toString();
                gstxtcassette.setText("" + gscassetteacdatabaseQvalue);
                gscassettert.setText("" + gscassetteacprice);
                gscassettett.setText("" + gscassetteacdatabaseQprice);
                int intgscassetteacdatabaseQvalue = Integer.parseInt(gscassetteacdatabaseQvalue);
                if (intgscassetteacdatabaseQvalue <= 0) {
                    gscassetteaccardview.setVisibility(View.GONE);
                } else {
                    gscassetteaccardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });


        // water wash

        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String wwsplitssacdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("SplitSSAC").getValue().toString();
                String wwsplitssacdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("SplitSSACTOTAL").getValue().toString();
                wwtxtsplitss.setText("" + wwsplitssacdatabaseQvalue);
                wwsplitssrt.setText("" + wwsplitssacprice);
                wwsplitsstt.setText("" + wwsplitssacdatabaseQprice);
                int intwwsplitssacdatabaseQvalue = Integer.parseInt(wwsplitssacdatabaseQvalue);
                if (intwwsplitssacdatabaseQvalue <= 0) {
                    wwsplitssaccardview.setVisibility(View.GONE);
                } else {
                    wwsplitssaccardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String wwwindowssacdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("WindowSSAC").getValue().toString();
                String wwwindowssacdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("WindowSSACTOTAL").getValue().toString();
                wwtxtwindowss.setText("" + wwwindowssacdatabaseQvalue);
                wwwindowssrt.setText("" + wwwindowssacprice);
                wwwindowsstt.setText("" + wwwindowssacdatabaseQprice);
                int intwwwindowssacdatabaseQvalue = Integer.parseInt(wwwindowssacdatabaseQvalue);
                if (intwwwindowssacdatabaseQvalue <= 0) {
                    wwwindowssaccardview.setVisibility(View.GONE);
                } else {
                    wwwindowssaccardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String wwcassettessacdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("CassetteSSAC").getValue().toString();
                String wwcassettessacdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("CassetteSSACTOTAL").getValue().toString();
                wwtxtcassettess.setText("" + wwcassettessacdatabaseQvalue);
                wwcassettessrt.setText("" + wwcassettessacprice);
                wwcassettesstt.setText("" + wwcassettessacdatabaseQprice);
                int intwwcassettessacdatabaseQvalue = Integer.parseInt(wwcassettessacdatabaseQvalue);
                if (intwwcassettessacdatabaseQvalue <= 0) {
                    wwcassettessaccardview.setVisibility(View.GONE);
                } else {
                    wwcassettessaccardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String wwsplit360acdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Split360AC").getValue().toString();
                String wwsplit360acdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Split360ACTOTAL").getValue().toString();
                wwtxtsplit360.setText("" + wwsplit360acdatabaseQvalue);
                wwsplit360rt.setText("" + wwsplit360acprice);
                wwsplit360tt.setText("" + wwsplit360acdatabaseQprice);
                int intwwsplit360acdatabaseQvalue = Integer.parseInt(wwsplit360acdatabaseQvalue);
                if (intwwsplit360acdatabaseQvalue <= 0) {
                    wwsplit360accardview.setVisibility(View.GONE);
                } else {
                    wwsplit360accardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String wwcassette360acdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Cassette360AC").getValue().toString();
                String wwcassette360acdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Cassette360ACTOTAL").getValue().toString();
                wwtxtcassette360.setText("" + wwcassette360acdatabaseQvalue);
                wwcassette360rt.setText("" + wwcassette360acprice);
                wwcassette360tt.setText("" + wwcassette360acdatabaseQprice);
                int intwwcassette360acdatabaseQvalue = Integer.parseInt(wwcassette360acdatabaseQvalue);
                if (intwwcassette360acdatabaseQvalue <= 0) {
                    wwcassette360accardview.setVisibility(View.GONE);
                } else {
                    wwcassette360accardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });


        // AMC
        //SPLIT AC

        //scheme1
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcsplitscheme1withsparetotalvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString();
                String databaseamcsplitscheme1withsparetotalprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                amcsplitscheme1withsparetotaltxt.setText("" + databaseamcsplitscheme1withsparetotalvalue);
                amcsplitscheme1withsparetotalrt.setText("" + amcsplitscheme1withsparetotalprice);
                amcsplitscheme1withsparetotaltt.setText("" + databaseamcsplitscheme1withsparetotalprice);
                int intdatabaseamcsplitscheme1withsparetotalvalue = Integer.parseInt(databaseamcsplitscheme1withsparetotalvalue);
                if (intdatabaseamcsplitscheme1withsparetotalvalue <= 0) {
                    amcsplitscheme1withsparetotalcardview.setVisibility(View.GONE);
                } else {
                    amcsplitscheme1withsparetotalcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcsplitscheme1withsparelimitedvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString();
                String databaseamcsplitscheme1withsparelimitedprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                amcsplitscheme1withsparelimitedtxt.setText("" + databaseamcsplitscheme1withsparelimitedvalue);
                amcsplitscheme1withsparelimitedrt.setText("" + amcsplitscheme1withsparelimitedprice);
                amcsplitscheme1withsparelimitedtt.setText("" + databaseamcsplitscheme1withsparelimitedprice);
                int intdatabaseamcsplitscheme1withsparelimitedvalue = Integer.parseInt(databaseamcsplitscheme1withsparelimitedvalue);
                if (intdatabaseamcsplitscheme1withsparelimitedvalue <= 0) {
                    amcsplitscheme1withsparelimitedcardview.setVisibility(View.GONE);
                } else {
                    amcsplitscheme1withsparelimitedcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcsplitscheme1withsparenovalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString();
                String databaseamcsplitscheme1withsparenoprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                amcsplitscheme1withsparenotxt.setText("" + databaseamcsplitscheme1withsparenovalue);
                amcsplitscheme1withsparenort.setText("" + amcsplitscheme1withsparenoprice);
                amcsplitscheme1withsparenott.setText("" + databaseamcsplitscheme1withsparenoprice);
                int intdatabaseamcsplitscheme1withsparenovalue = Integer.parseInt(databaseamcsplitscheme1withsparenovalue);
                if (intdatabaseamcsplitscheme1withsparenovalue <= 0) {
                    amcsplitscheme1withsparenocardview.setVisibility(View.GONE);
                } else {
                    amcsplitscheme1withsparenocardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        //scheme2
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcsplitscheme2withsparetotalvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Totalspare").getValue().toString();
                String databaseamcsplitscheme2withsparetotalprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                amcsplitscheme2withsparetotaltxt.setText("" + databaseamcsplitscheme2withsparetotalvalue);
                amcsplitscheme2withsparetotalrt.setText("" + amcsplitscheme2withsparetotalprice);
                amcsplitscheme2withsparetotaltt.setText("" + databaseamcsplitscheme2withsparetotalprice);
                int intdatabaseamcsplitscheme2withsparetotalvalue = Integer.parseInt(databaseamcsplitscheme2withsparetotalvalue);
                if (intdatabaseamcsplitscheme2withsparetotalvalue <= 0) {
                    amcsplitscheme2withsparetotalcardview.setVisibility(View.GONE);
                } else {
                    amcsplitscheme2withsparetotalcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcsplitscheme2withsparelimitedvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Limitedspare").getValue().toString();
                String databaseamcsplitscheme2withsparelimitedprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                amcsplitscheme2withsparelimitedtxt.setText("" + databaseamcsplitscheme2withsparelimitedvalue);
                amcsplitscheme2withsparelimitedrt.setText("" + amcsplitscheme2withsparelimitedprice);
                amcsplitscheme2withsparelimitedtt.setText("" + databaseamcsplitscheme2withsparelimitedprice);
                int intdatabaseamcsplitscheme2withsparelimitedvalue = Integer.parseInt(databaseamcsplitscheme2withsparelimitedvalue);
                if (intdatabaseamcsplitscheme2withsparelimitedvalue <= 0) {
                    amcsplitscheme2withsparelimitedcardview.setVisibility(View.GONE);
                } else {
                    amcsplitscheme2withsparelimitedcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcsplitscheme2withsparenovalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").child("Nospare").getValue().toString();
                String databaseamcsplitscheme2withsparenoprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                amcsplitscheme2withsparenotxt.setText("" + databaseamcsplitscheme2withsparenovalue);
                amcsplitscheme2withsparenort.setText("" + amcsplitscheme2withsparenoprice);
                amcsplitscheme2withsparenott.setText("" + databaseamcsplitscheme2withsparenoprice);
                int intdatabaseamcsplitscheme2withsparenovalue = Integer.parseInt(databaseamcsplitscheme2withsparenovalue);
                if (intdatabaseamcsplitscheme2withsparenovalue <= 0) {
                    amcsplitscheme2withsparenocardview.setVisibility(View.GONE);
                } else {
                    amcsplitscheme2withsparenocardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        //scheme3
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcsplitscheme3withsparetotalvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Totalspare").getValue().toString();
                String databaseamcsplitscheme3withsparetotalprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                amcsplitscheme3withsparetotaltxt.setText("" + databaseamcsplitscheme3withsparetotalvalue);
                amcsplitscheme3withsparetotalrt.setText("" + amcsplitscheme3withsparetotalprice);
                amcsplitscheme3withsparetotaltt.setText("" + databaseamcsplitscheme3withsparetotalprice);
                int intdatabaseamcsplitscheme3withsparetotalvalue = Integer.parseInt(databaseamcsplitscheme3withsparetotalvalue);
                if (intdatabaseamcsplitscheme3withsparetotalvalue <= 0) {
                    amcsplitscheme3withsparetotalcardview.setVisibility(View.GONE);
                } else {
                    amcsplitscheme3withsparetotalcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcsplitscheme3withsparelimitedvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Limitedspare").getValue().toString();
                String databaseamcsplitscheme3withsparelimitedprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                amcsplitscheme3withsparelimitedtxt.setText("" + databaseamcsplitscheme3withsparelimitedvalue);
                amcsplitscheme3withsparelimitedrt.setText("" + amcsplitscheme3withsparelimitedprice);
                amcsplitscheme3withsparelimitedtt.setText("" + databaseamcsplitscheme3withsparelimitedprice);
                int intdatabaseamcsplitscheme3withsparelimitedvalue = Integer.parseInt(databaseamcsplitscheme3withsparelimitedvalue);
                if (intdatabaseamcsplitscheme3withsparelimitedvalue <= 0) {
                    amcsplitscheme3withsparelimitedcardview.setVisibility(View.GONE);
                } else {
                    amcsplitscheme3withsparelimitedcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcsplitscheme3withsparenovalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").child("Nospare").getValue().toString();
                String databaseamcsplitscheme3withsparenoprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                amcsplitscheme3withsparenotxt.setText("" + databaseamcsplitscheme3withsparenovalue);
                amcsplitscheme3withsparenort.setText("" + amcsplitscheme3withsparenoprice);
                amcsplitscheme3withsparenott.setText("" + databaseamcsplitscheme3withsparenoprice);
                int intdatabaseamcsplitscheme3withsparenovalue = Integer.parseInt(databaseamcsplitscheme3withsparenovalue);
                if (intdatabaseamcsplitscheme3withsparenovalue <= 0) {
                    amcsplitscheme3withsparenocardview.setVisibility(View.GONE);
                } else {
                    amcsplitscheme3withsparenocardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });


        //window AC

        //scheme1
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcwindowscheme1withsparetotalvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString();
                String databaseamcwindowscheme1withsparetotalprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                amcwindowscheme1withsparetotaltxt.setText("" + databaseamcwindowscheme1withsparetotalvalue);
                amcwindowscheme1withsparetotalrt.setText("" + amcwindowscheme1withsparetotalprice);
                amcwindowscheme1withsparetotaltt.setText("" + databaseamcwindowscheme1withsparetotalprice);
                int intdatabaseamcwindowscheme1withsparetotalvalue = Integer.parseInt(databaseamcwindowscheme1withsparetotalvalue);
                if (intdatabaseamcwindowscheme1withsparetotalvalue <= 0) {
                    amcwindowscheme1withsparetotalcardview.setVisibility(View.GONE);
                } else {
                    amcwindowscheme1withsparetotalcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcwindowscheme1withsparelimitedvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString();
                String databaseamcwindowscheme1withsparelimitedprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                amcwindowscheme1withsparelimitedtxt.setText("" + databaseamcwindowscheme1withsparelimitedvalue);
                amcwindowscheme1withsparelimitedrt.setText("" + amcwindowscheme1withsparelimitedprice);
                amcwindowscheme1withsparelimitedtt.setText("" + databaseamcwindowscheme1withsparelimitedprice);
                int intdatabaseamcwindowscheme1withsparelimitedvalue = Integer.parseInt(databaseamcwindowscheme1withsparelimitedvalue);
                if (intdatabaseamcwindowscheme1withsparelimitedvalue <= 0) {
                    amcwindowscheme1withsparelimitedcardview.setVisibility(View.GONE);
                } else {
                    amcwindowscheme1withsparelimitedcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcwindowscheme1withsparenovalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString();
                String databaseamcwindowscheme1withsparenoprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                amcwindowscheme1withsparenotxt.setText("" + databaseamcwindowscheme1withsparenovalue);
                amcwindowscheme1withsparenort.setText("" + amcwindowscheme1withsparenoprice);
                amcwindowscheme1withsparenott.setText("" + databaseamcwindowscheme1withsparenoprice);
                int intdatabaseamcwindowscheme1withsparenovalue = Integer.parseInt(databaseamcwindowscheme1withsparenovalue);
                if (intdatabaseamcwindowscheme1withsparenovalue <= 0) {
                    amcwindowscheme1withsparenocardview.setVisibility(View.GONE);
                } else {
                    amcwindowscheme1withsparenocardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        //scheme2
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcwindowscheme2withsparetotalvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Totalspare").getValue().toString();
                String databaseamcwindowscheme2withsparetotalprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                amcwindowscheme2withsparetotaltxt.setText("" + databaseamcwindowscheme2withsparetotalvalue);
                amcwindowscheme2withsparetotalrt.setText("" + amcwindowscheme2withsparetotalprice);
                amcwindowscheme2withsparetotaltt.setText("" + databaseamcwindowscheme2withsparetotalprice);
                int intdatabaseamcwindowscheme2withsparetotalvalue = Integer.parseInt(databaseamcwindowscheme2withsparetotalvalue);
                if (intdatabaseamcwindowscheme2withsparetotalvalue <= 0) {
                    amcwindowscheme2withsparetotalcardview.setVisibility(View.GONE);
                } else {
                    amcwindowscheme2withsparetotalcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcwindowscheme2withsparelimitedvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Limitedspare").getValue().toString();
                String databaseamcwindowscheme2withsparelimitedprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                amcwindowscheme2withsparelimitedtxt.setText("" + databaseamcwindowscheme2withsparelimitedvalue);
                amcwindowscheme2withsparelimitedrt.setText("" + amcwindowscheme2withsparelimitedprice);
                amcwindowscheme2withsparelimitedtt.setText("" + databaseamcwindowscheme2withsparelimitedprice);
                int intdatabaseamcwindowscheme2withsparelimitedvalue = Integer.parseInt(databaseamcwindowscheme2withsparelimitedvalue);
                if (intdatabaseamcwindowscheme2withsparelimitedvalue <= 0) {
                    amcwindowscheme2withsparelimitedcardview.setVisibility(View.GONE);
                } else {
                    amcwindowscheme2withsparelimitedcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamcwindowscheme2withsparenovalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").child("Nospare").getValue().toString();
                String databaseamcwindowscheme2withsparenoprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                amcwindowscheme2withsparenotxt.setText("" + databaseamcwindowscheme2withsparenovalue);
                amcwindowscheme2withsparenort.setText("" + amcwindowscheme2withsparenoprice);
                amcwindowscheme2withsparenott.setText("" + databaseamcwindowscheme2withsparenoprice);
                int intdatabaseamcwindowscheme2withsparenovalue = Integer.parseInt(databaseamcwindowscheme2withsparenovalue);
                if (intdatabaseamcwindowscheme2withsparenovalue <= 0) {
                    amcwindowscheme2withsparenocardview.setVisibility(View.GONE);
                } else {
                    amcwindowscheme2withsparenocardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });


        //cassette AC

        //scheme1
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamccassettescheme1withsparetotalvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString();
                String databaseamccassettescheme1withsparetotalprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                amccassettescheme1withsparetotaltxt.setText("" + databaseamccassettescheme1withsparetotalvalue);
                amccassettescheme1withsparetotalrt.setText("" + amccassettescheme1withsparetotalprice);
                amccassettescheme1withsparetotaltt.setText("" + databaseamccassettescheme1withsparetotalprice);
                int intdatabaseamccassettescheme1withsparetotalvalue = Integer.parseInt(databaseamccassettescheme1withsparetotalvalue);
                if (intdatabaseamccassettescheme1withsparetotalvalue <= 0) {
                    amccassettescheme1withsparetotalcardview.setVisibility(View.GONE);
                } else {
                    amccassettescheme1withsparetotalcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamccassettescheme1withsparelimitedvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString();
                String databaseamccassettescheme1withsparelimitedprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                amccassettescheme1withsparelimitedtxt.setText("" + databaseamccassettescheme1withsparelimitedvalue);
                amccassettescheme1withsparelimitedrt.setText("" + amccassettescheme1withsparelimitedprice);
                amccassettescheme1withsparelimitedtt.setText("" + databaseamccassettescheme1withsparelimitedprice);
                int intdatabaseamccassettescheme1withsparelimitedvalue = Integer.parseInt(databaseamccassettescheme1withsparelimitedvalue);
                if (intdatabaseamccassettescheme1withsparelimitedvalue <= 0) {
                    amccassettescheme1withsparelimitedcardview.setVisibility(View.GONE);
                } else {
                    amccassettescheme1withsparelimitedcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String databaseamccassettescheme1withsparenovalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString();
                String databaseamccassettescheme1withsparenoprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                amccassettescheme1withsparenotxt.setText("" + databaseamccassettescheme1withsparenovalue);
                amccassettescheme1withsparenort.setText("" + amccassettescheme1withsparenoprice);
                amccassettescheme1withsparenott.setText("" + databaseamccassettescheme1withsparenoprice);
                int intdatabaseamccassettescheme1withsparenovalue = Integer.parseInt(databaseamccassettescheme1withsparenovalue);
                if (intdatabaseamccassettescheme1withsparenovalue <= 0) {
                    amccassettescheme1withsparenocardview.setVisibility(View.GONE);
                } else {
                    amccassettescheme1withsparenocardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        //spares

        // splitac

        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparessplitaccapacitordatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Capacitor").getValue().toString();
                String sparessplitaccapacitordatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("CapacitorTOTAL").getValue().toString();
                txtsparesplitaccapacitor.setText("" + sparessplitaccapacitordatabaseQvalue);
                sparesplitaccapacitorrt.setText("" + sparessplitaccapacitorprice);
                sparesplitaccapacitortt.setText("" + sparessplitaccapacitordatabaseQprice);
                int intsparessplitaccapacitordatabaseQvalue = Integer.parseInt(sparessplitaccapacitordatabaseQvalue);
                if (intsparessplitaccapacitordatabaseQvalue <= 0) {
                    sparesplitaccapacitorcardview.setVisibility(View.GONE);
                } else {
                    sparesplitaccapacitorcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparessplitacblowerdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Blower").getValue().toString();
                String sparessplitacblowerdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("BlowerTOTAL").getValue().toString();
                txtsparesplitacblower.setText("" + sparessplitacblowerdatabaseQvalue);
                sparesplitacblowerrt.setText("" + sparessplitacblowerprice);
                sparesplitacblowertt.setText("" + sparessplitacblowerdatabaseQprice);
                int intsparessplitacblowerdatabaseQvalue = Integer.parseInt(sparessplitacblowerdatabaseQvalue);
                if (intsparessplitacblowerdatabaseQvalue <= 0) {
                    sparesplitacblowercardview.setVisibility(View.GONE);
                } else {
                    sparesplitacblowercardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparessplitacoutdoorfandatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoorfan").getValue().toString();
                String sparessplitacoutdoorfandatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("OutdoorfanTOTAL").getValue().toString();
                txtsparesplitacoutdoorfan.setText("" + sparessplitacoutdoorfandatabaseQvalue);
                sparesplitacoutdoorfanrt.setText("" + sparessplitacoutdoorfanprice);
                sparesplitacoutdoorfantt.setText("" + sparessplitacoutdoorfandatabaseQprice);
                int intsparessplitacoutdoorfandatabaseQvalue = Integer.parseInt(sparessplitacoutdoorfandatabaseQvalue);
                if (intsparessplitacoutdoorfandatabaseQvalue <= 0) {
                    sparesplitacoutdoorfancardview.setVisibility(View.GONE);
                } else {
                    sparesplitacoutdoorfancardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparessplitacindoormotordatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Indoormotor").getValue().toString();
                String sparessplitacindoormotordatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("IndoormotorTOTAL").getValue().toString();
                txtsparesplitacindoormotor.setText("" + sparessplitacindoormotordatabaseQvalue);
                sparesplitacindoormotorrt.setText("" + sparessplitacindoormotorprice);
                sparesplitacindoormotortt.setText("" + sparessplitacindoormotordatabaseQprice);
                int intsparessplitacindoormotordatabaseQvalue = Integer.parseInt(sparessplitacindoormotordatabaseQvalue);
                if (intsparessplitacindoormotordatabaseQvalue <= 0) {
                    sparesplitacindoormotorcardview.setVisibility(View.GONE);
                } else {
                    sparesplitacindoormotorcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparessplitacoutdoormotordatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoormotor").getValue().toString();
                String sparessplitacoutdoormotordatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("OutdoormotorTOTAL").getValue().toString();
                txtsparesplitacoutdoormotor.setText("" + sparessplitacoutdoormotordatabaseQvalue);
                sparesplitacoutdoormotorrt.setText("" + sparessplitacoutdoormotorprice);
                sparesplitacoutdoormotortt.setText("" + sparessplitacoutdoormotordatabaseQprice);
                int intsparessplitacoutdoormotordatabaseQvalue = Integer.parseInt(sparessplitacoutdoormotordatabaseQvalue);
                if (intsparessplitacoutdoormotordatabaseQvalue <= 0) {
                    sparesplitacoutdoormotorcardview.setVisibility(View.GONE);
                } else {
                    sparesplitacoutdoormotorcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparessplitacswingmotordatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Swingmotor").getValue().toString();
                String sparessplitacswingmotordatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("SwingmotorTOTAL").getValue().toString();
                txtsparesplitacswingmotor.setText("" + sparessplitacswingmotordatabaseQvalue);
                sparesplitacswingmotorrt.setText("" + sparessplitacswingmotorprice);
                sparesplitacswingmotortt.setText("" + sparessplitacswingmotordatabaseQprice);
                int intsparessplitacswingmotordatabaseQvalue = Integer.parseInt(sparessplitacswingmotordatabaseQvalue);
                if (intsparessplitacswingmotordatabaseQvalue <= 0) {
                    sparesplitacswingmotorcardview.setVisibility(View.GONE);
                } else {
                    sparesplitacswingmotorcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparessplitacindoorcoildatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Indoorcoil").getValue().toString();
                String sparessplitacindoorcoildatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("IndoorcoilTOTAL").getValue().toString();
                txtsparesplitacindoorcoil.setText("" + sparessplitacindoorcoildatabaseQvalue);
                sparesplitacindoorcoilrt.setText("" + sparessplitacindoorcoilprice);
                sparesplitacindoorcoiltt.setText("" + sparessplitacindoorcoildatabaseQprice);
                int intsparessplitacindoorcoildatabaseQvalue = Integer.parseInt(sparessplitacindoorcoildatabaseQvalue);
                if (intsparessplitacindoorcoildatabaseQvalue <= 0) {
                    sparesplitacindoorcoilcardview.setVisibility(View.GONE);
                } else {
                    sparesplitacindoorcoilcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparessplitacoutdoorcondenserdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoorcondenser").getValue().toString();
                String sparessplitacoutdoorcondenserdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("OutdoorcondenserTOTAL").getValue().toString();
                txtsparesplitacoutdoorcondenser.setText("" + sparessplitacoutdoorcondenserdatabaseQvalue);
                sparesplitacoutdoorcondenserrt.setText("" + sparessplitacoutdoorcondenserprice);
                sparesplitacoutdoorcondensertt.setText("" + sparessplitacoutdoorcondenserdatabaseQprice);
                int intsparessplitacoutdoorcondenserdatabaseQvalue = Integer.parseInt(sparessplitacoutdoorcondenserdatabaseQvalue);
                if (intsparessplitacoutdoorcondenserdatabaseQvalue <= 0) {
                    sparesplitacoutdoorcondensercardview.setVisibility(View.GONE);
                } else {
                    sparesplitacoutdoorcondensercardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparessplitacswingflapdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Swingflap").getValue().toString();
                String sparessplitacswingflapdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("SwingflapTOTAL").getValue().toString();
                txtsparesplitacswingflap.setText("" + sparessplitacswingflapdatabaseQvalue);
                sparesplitacswingflaprt.setText("" + sparessplitacswingflapprice);
                sparesplitacswingflaptt.setText("" + sparessplitacswingflapdatabaseQprice);
                int intsparessplitacswingflapdatabaseQvalue = Integer.parseInt(sparessplitacswingflapdatabaseQvalue);
                if (intsparessplitacswingflapdatabaseQvalue <= 0) {
                    sparesplitacswingflapcardview.setVisibility(View.GONE);
                } else {
                    sparesplitacswingflapcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparessplitacremotedatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Remote").getValue().toString();
                String sparessplitacremotedatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("RemoteTOTAL").getValue().toString();
                txtsparesplitacremote.setText("" + sparessplitacremotedatabaseQvalue);
                sparesplitacremotert.setText("" + sparessplitacremoteprice);
                sparesplitacremotett.setText("" + sparessplitacremotedatabaseQprice);
                int intsparessplitacremotedatabaseQvalue = Integer.parseInt(sparessplitacremotedatabaseQvalue);
                if (intsparessplitacremotedatabaseQvalue <= 0) {
                    sparesplitacremotecardview.setVisibility(View.GONE);
                } else {
                    sparesplitacremotecardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        // windowac

        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String spareswindowaccapacitordatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Capacitor").getValue().toString();
                String spareswindowaccapacitordatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("CapacitorTOTAL").getValue().toString();
                txtsparewindowaccapacitor.setText("" + spareswindowaccapacitordatabaseQvalue);
                sparewindowaccapacitorrt.setText("" + spareswindowaccapacitorprice);
                sparewindowaccapacitortt.setText("" + spareswindowaccapacitordatabaseQprice);
                int intspareswindowaccapacitordatabaseQvalue = Integer.parseInt(spareswindowaccapacitordatabaseQvalue);
                if (intspareswindowaccapacitordatabaseQvalue <= 0) {
                    sparewindowaccapacitorcardview.setVisibility(View.GONE);
                } else {
                    sparewindowaccapacitorcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String spareswindowacblowerdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Blower").getValue().toString();
                String spareswindowacblowerdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("BlowerTOTAL").getValue().toString();
                txtsparewindowacblower.setText("" + spareswindowacblowerdatabaseQvalue);
                sparewindowacblowerrt.setText("" + spareswindowacblowerprice);
                sparewindowacblowertt.setText("" + spareswindowacblowerdatabaseQprice);
                int intspareswindowacblowerdatabaseQvalue = Integer.parseInt(spareswindowacblowerdatabaseQvalue);
                if (intspareswindowacblowerdatabaseQvalue <= 0) {
                    sparewindowacblowercardview.setVisibility(View.GONE);
                } else {
                    sparewindowacblowercardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String spareswindowacoutdoorfandatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoorfan").getValue().toString();
                String spareswindowacoutdoorfandatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("OutdoorfanTOTAL").getValue().toString();
                txtsparewindowacoutdoorfan.setText("" + spareswindowacoutdoorfandatabaseQvalue);
                sparewindowacoutdoorfanrt.setText("" + spareswindowacoutdoorfanprice);
                sparewindowacoutdoorfantt.setText("" + spareswindowacoutdoorfandatabaseQprice);
                int intspareswindowacoutdoorfandatabaseQvalue = Integer.parseInt(spareswindowacoutdoorfandatabaseQvalue);
                if (intspareswindowacoutdoorfandatabaseQvalue <= 0) {
                    sparewindowacoutdoorfancardview.setVisibility(View.GONE);
                } else {
                    sparewindowacoutdoorfancardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String spareswindowacindoormotordatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Indoormotor").getValue().toString();
                String spareswindowacindoormotordatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("IndoormotorTOTAL").getValue().toString();
                txtsparewindowacindoormotor.setText("" + spareswindowacindoormotordatabaseQvalue);
                sparewindowacindoormotorrt.setText("" + spareswindowacindoormotorprice);
                sparewindowacindoormotortt.setText("" + spareswindowacindoormotordatabaseQprice);
                int intspareswindowacindoormotordatabaseQvalue = Integer.parseInt(spareswindowacindoormotordatabaseQvalue);
                if (intspareswindowacindoormotordatabaseQvalue <= 0) {
                    sparewindowacindoormotorcardview.setVisibility(View.GONE);
                } else {
                    sparewindowacindoormotorcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String spareswindowacoutdoormotordatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoormotor").getValue().toString();
                String spareswindowacoutdoormotordatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("OutdoormotorTOTAL").getValue().toString();
                txtsparewindowacoutdoormotor.setText("" + spareswindowacoutdoormotordatabaseQvalue);
                sparewindowacoutdoormotorrt.setText("" + spareswindowacoutdoormotorprice);
                sparewindowacoutdoormotortt.setText("" + spareswindowacoutdoormotordatabaseQprice);
                int intspareswindowacoutdoormotordatabaseQvalue = Integer.parseInt(spareswindowacoutdoormotordatabaseQvalue);
                if (intspareswindowacoutdoormotordatabaseQvalue <= 0) {
                    sparewindowacoutdoormotorcardview.setVisibility(View.GONE);
                } else {
                    sparewindowacoutdoormotorcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String spareswindowacswingmotordatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Swingmotor").getValue().toString();
                String spareswindowacswingmotordatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("SwingmotorTOTAL").getValue().toString();
                txtsparewindowacswingmotor.setText("" + spareswindowacswingmotordatabaseQvalue);
                sparewindowacswingmotorrt.setText("" + spareswindowacswingmotorprice);
                sparewindowacswingmotortt.setText("" + spareswindowacswingmotordatabaseQprice);
                int intspareswindowacswingmotordatabaseQvalue = Integer.parseInt(spareswindowacswingmotordatabaseQvalue);
                if (intspareswindowacswingmotordatabaseQvalue <= 0) {
                    sparewindowacswingmotorcardview.setVisibility(View.GONE);
                } else {
                    sparewindowacswingmotorcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String spareswindowacindoorcoildatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Indoorcoil").getValue().toString();
                String spareswindowacindoorcoildatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("IndoorcoilTOTAL").getValue().toString();
                txtsparewindowacindoorcoil.setText("" + spareswindowacindoorcoildatabaseQvalue);
                sparewindowacindoorcoilrt.setText("" + spareswindowacindoorcoilprice);
                sparewindowacindoorcoiltt.setText("" + spareswindowacindoorcoildatabaseQprice);
                int intspareswindowacindoorcoildatabaseQvalue = Integer.parseInt(spareswindowacindoorcoildatabaseQvalue);
                if (intspareswindowacindoorcoildatabaseQvalue <= 0) {
                    sparewindowacindoorcoilcardview.setVisibility(View.GONE);
                } else {
                    sparewindowacindoorcoilcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String spareswindowacoutdoorcondenserdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoorcondenser").getValue().toString();
                String spareswindowacoutdoorcondenserdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("OutdoorcondenserTOTAL").getValue().toString();
                txtsparewindowacoutdoorcondenser.setText("" + spareswindowacoutdoorcondenserdatabaseQvalue);
                sparewindowacoutdoorcondenserrt.setText("" + spareswindowacoutdoorcondenserprice);
                sparewindowacoutdoorcondensertt.setText("" + spareswindowacoutdoorcondenserdatabaseQprice);
                int intspareswindowacoutdoorcondenserdatabaseQvalue = Integer.parseInt(spareswindowacoutdoorcondenserdatabaseQvalue);
                if (intspareswindowacoutdoorcondenserdatabaseQvalue <= 0) {
                    sparewindowacoutdoorcondensercardview.setVisibility(View.GONE);
                } else {
                    sparewindowacoutdoorcondensercardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String spareswindowacswingflapdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Swingflap").getValue().toString();
                String spareswindowacswingflapdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("SwingflapTOTAL").getValue().toString();
                txtsparewindowacswingflap.setText("" + spareswindowacswingflapdatabaseQvalue);
                sparewindowacswingflaprt.setText("" + spareswindowacswingflapprice);
                sparewindowacswingflaptt.setText("" + spareswindowacswingflapdatabaseQprice);
                int intspareswindowacswingflapdatabaseQvalue = Integer.parseInt(spareswindowacswingflapdatabaseQvalue);
                if (intspareswindowacswingflapdatabaseQvalue <= 0) {
                    sparewindowacswingflapcardview.setVisibility(View.GONE);
                } else {
                    sparewindowacswingflapcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String spareswindowacremotedatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Remote").getValue().toString();
                String spareswindowacremotedatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("RemoteTOTAL").getValue().toString();
                txtsparewindowacremote.setText("" + spareswindowacremotedatabaseQvalue);
                sparewindowacremotert.setText("" + spareswindowacremoteprice);
                sparewindowacremotett.setText("" + spareswindowacremotedatabaseQprice);
                int intspareswindowacremotedatabaseQvalue = Integer.parseInt(spareswindowacremotedatabaseQvalue);
                if (intspareswindowacremotedatabaseQvalue <= 0) {
                    sparewindowacremotecardview.setVisibility(View.GONE);
                } else {
                    sparewindowacremotecardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        // cassetteac

        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparescassetteaccapacitordatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Capacitor").getValue().toString();
                String sparescassetteaccapacitordatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("CapacitorTOTAL").getValue().toString();
                txtsparecassetteaccapacitor.setText("" + sparescassetteaccapacitordatabaseQvalue);
                sparecassetteaccapacitorrt.setText("" + sparescassetteaccapacitorprice);
                sparecassetteaccapacitortt.setText("" + sparescassetteaccapacitordatabaseQprice);
                int intsparescassetteaccapacitordatabaseQvalue = Integer.parseInt(sparescassetteaccapacitordatabaseQvalue);
                if (intsparescassetteaccapacitordatabaseQvalue <= 0) {
                    sparecassetteaccapacitorcardview.setVisibility(View.GONE);
                } else {
                    sparecassetteaccapacitorcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparescassetteacblowerdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Blower").getValue().toString();
                String sparescassetteacblowerdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("BlowerTOTAL").getValue().toString();
                txtsparecassetteacblower.setText("" + sparescassetteacblowerdatabaseQvalue);
                sparecassetteacblowerrt.setText("" + sparescassetteacblowerprice);
                sparecassetteacblowertt.setText("" + sparescassetteacblowerdatabaseQprice);
                int intsparescassetteacblowerdatabaseQvalue = Integer.parseInt(sparescassetteacblowerdatabaseQvalue);
                if (intsparescassetteacblowerdatabaseQvalue <= 0) {
                    sparecassetteacblowercardview.setVisibility(View.GONE);
                } else {
                    sparecassetteacblowercardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparescassetteacoutdoorfandatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoorfan").getValue().toString();
                String sparescassetteacoutdoorfandatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("OutdoorfanTOTAL").getValue().toString();
                txtsparecassetteacoutdoorfan.setText("" + sparescassetteacoutdoorfandatabaseQvalue);
                sparecassetteacoutdoorfanrt.setText("" + sparescassetteacoutdoorfanprice);
                sparecassetteacoutdoorfantt.setText("" + sparescassetteacoutdoorfandatabaseQprice);
                int intsparescassetteacoutdoorfandatabaseQvalue = Integer.parseInt(sparescassetteacoutdoorfandatabaseQvalue);
                if (intsparescassetteacoutdoorfandatabaseQvalue <= 0) {
                    sparecassetteacoutdoorfancardview.setVisibility(View.GONE);
                } else {
                    sparecassetteacoutdoorfancardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparescassetteacindoormotordatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Indoormotor").getValue().toString();
                String sparescassetteacindoormotordatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("IndoormotorTOTAL").getValue().toString();
                txtsparecassetteacindoormotor.setText("" + sparescassetteacindoormotordatabaseQvalue);
                sparecassetteacindoormotorrt.setText("" + sparescassetteacindoormotorprice);
                sparecassetteacindoormotortt.setText("" + sparescassetteacindoormotordatabaseQprice);
                int intsparescassetteacindoormotordatabaseQvalue = Integer.parseInt(sparescassetteacindoormotordatabaseQvalue);
                if (intsparescassetteacindoormotordatabaseQvalue <= 0) {
                    sparecassetteacindoormotorcardview.setVisibility(View.GONE);
                } else {
                    sparecassetteacindoormotorcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparescassetteacoutdoormotordatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoormotor").getValue().toString();
                String sparescassetteacoutdoormotordatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("OutdoormotorTOTAL").getValue().toString();
                txtsparecassetteacoutdoormotor.setText("" + sparescassetteacoutdoormotordatabaseQvalue);
                sparecassetteacoutdoormotorrt.setText("" + sparescassetteacoutdoormotorprice);
                sparecassetteacoutdoormotortt.setText("" + sparescassetteacoutdoormotordatabaseQprice);
                int intsparescassetteacoutdoormotordatabaseQvalue = Integer.parseInt(sparescassetteacoutdoormotordatabaseQvalue);
                if (intsparescassetteacoutdoormotordatabaseQvalue <= 0) {
                    sparecassetteacoutdoormotorcardview.setVisibility(View.GONE);
                } else {
                    sparecassetteacoutdoormotorcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparescassetteacswingmotordatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Swingmotor").getValue().toString();
                String sparescassetteacswingmotordatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("SwingmotorTOTAL").getValue().toString();
                txtsparecassetteacswingmotor.setText("" + sparescassetteacswingmotordatabaseQvalue);
                sparecassetteacswingmotorrt.setText("" + sparescassetteacswingmotorprice);
                sparecassetteacswingmotortt.setText("" + sparescassetteacswingmotordatabaseQprice);
                int intsparescassetteacswingmotordatabaseQvalue = Integer.parseInt(sparescassetteacswingmotordatabaseQvalue);
                if (intsparescassetteacswingmotordatabaseQvalue <= 0) {
                    sparecassetteacswingmotorcardview.setVisibility(View.GONE);
                } else {
                    sparecassetteacswingmotorcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparescassetteacindoorcoildatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Indoorcoil").getValue().toString();
                String sparescassetteacindoorcoildatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("IndoorcoilTOTAL").getValue().toString();
                txtsparecassetteacindoorcoil.setText("" + sparescassetteacindoorcoildatabaseQvalue);
                sparecassetteacindoorcoilrt.setText("" + sparescassetteacindoorcoilprice);
                sparecassetteacindoorcoiltt.setText("" + sparescassetteacindoorcoildatabaseQprice);
                int intsparescassetteacindoorcoildatabaseQvalue = Integer.parseInt(sparescassetteacindoorcoildatabaseQvalue);
                if (intsparescassetteacindoorcoildatabaseQvalue <= 0) {
                    sparecassetteacindoorcoilcardview.setVisibility(View.GONE);
                } else {
                    sparecassetteacindoorcoilcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparescassetteacoutdoorcondenserdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoorcondenser").getValue().toString();
                String sparescassetteacoutdoorcondenserdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("OutdoorcondenserTOTAL").getValue().toString();
                txtsparecassetteacoutdoorcondenser.setText("" + sparescassetteacoutdoorcondenserdatabaseQvalue);
                sparecassetteacoutdoorcondenserrt.setText("" + sparescassetteacoutdoorcondenserprice);
                sparecassetteacoutdoorcondensertt.setText("" + sparescassetteacoutdoorcondenserdatabaseQprice);
                int intsparescassetteacoutdoorcondenserdatabaseQvalue = Integer.parseInt(sparescassetteacoutdoorcondenserdatabaseQvalue);
                if (intsparescassetteacoutdoorcondenserdatabaseQvalue <= 0) {
                    sparecassetteacoutdoorcondensercardview.setVisibility(View.GONE);
                } else {
                    sparecassetteacoutdoorcondensercardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparescassetteacswingflapdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Swingflap").getValue().toString();
                String sparescassetteacswingflapdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("SwingflapTOTAL").getValue().toString();
                txtsparecassetteacswingflap.setText("" + sparescassetteacswingflapdatabaseQvalue);
                sparecassetteacswingflaprt.setText("" + sparescassetteacswingflapprice);
                sparecassetteacswingflaptt.setText("" + sparescassetteacswingflapdatabaseQprice);
                int intsparescassetteacswingflapdatabaseQvalue = Integer.parseInt(sparescassetteacswingflapdatabaseQvalue);
                if (intsparescassetteacswingflapdatabaseQvalue <= 0) {
                    sparecassetteacswingflapcardview.setVisibility(View.GONE);
                } else {
                    sparecassetteacswingflapcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String sparescassetteacremotedatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Remote").getValue().toString();
                String sparescassetteacremotedatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("RemoteTOTAL").getValue().toString();
                txtsparecassetteacremote.setText("" + sparescassetteacremotedatabaseQvalue);
                sparecassetteacremotert.setText("" + sparescassetteacremoteprice);
                sparecassetteacremotett.setText("" + sparescassetteacremotedatabaseQprice);
                int intsparescassetteacremotedatabaseQvalue = Integer.parseInt(sparescassetteacremotedatabaseQvalue);
                if (intsparescassetteacremotedatabaseQvalue <= 0) {
                    sparecassetteacremotecardview.setVisibility(View.GONE);
                } else {
                    sparecassetteacremotecardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });


        //faults

        // splitac

        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultssplitacwaterleakdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Waterleak").getValue().toString();
                String faultssplitacwaterleakdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("WaterleakTOTAL").getValue().toString();
                txtfaultsplitacwaterleak.setText("" + faultssplitacwaterleakdatabaseQvalue);
                faultsplitacwaterleakrt.setText("" + faultssplitacwaterleakprice);
                faultsplitacwaterleaktt.setText("" + faultssplitacwaterleakdatabaseQprice);
                int intfaultssplitacwaterleakdatabaseQvalue = Integer.parseInt(faultssplitacwaterleakdatabaseQvalue);
                if (intfaultssplitacwaterleakdatabaseQvalue <= 0) {
                    faultsplitacwaterleakcardview.setVisibility(View.GONE);
                } else {
                    faultsplitacwaterleakcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultssplitacgasleakdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Gasleak").getValue().toString();
                String faultssplitacgasleakdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("GasleakTOTAL").getValue().toString();
                txtfaultsplitacgasleak.setText("" + faultssplitacgasleakdatabaseQvalue);
                faultsplitacgasleakrt.setText("" + faultssplitacgasleakprice);
                faultsplitacgasleaktt.setText("" + faultssplitacgasleakdatabaseQprice);
                int intfaultssplitacgasleakdatabaseQvalue = Integer.parseInt(faultssplitacgasleakdatabaseQvalue);
                if (intfaultssplitacgasleakdatabaseQvalue <= 0) {
                    faultsplitacgasleakcardview.setVisibility(View.GONE);
                } else {
                    faultsplitacgasleakcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultssplitacpcboarddatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Pcboard").getValue().toString();
                String faultssplitacpcboarddatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("PcboardTOTAL").getValue().toString();
                txtfaultsplitacpcboard.setText("" + faultssplitacpcboarddatabaseQvalue);
                faultsplitacpcboardrt.setText("" + faultssplitacpcboardprice);
                faultsplitacpcboardtt.setText("" + faultssplitacpcboarddatabaseQprice);
                int intfaultssplitacpcboarddatabaseQvalue = Integer.parseInt(faultssplitacpcboarddatabaseQvalue);
                if (intfaultssplitacpcboarddatabaseQvalue <= 0) {
                    faultsplitacpcboardcardview.setVisibility(View.GONE);
                } else {
                    faultsplitacpcboardcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultssplitacstabilizerdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Stabilizer").getValue().toString();
                String faultssplitacstabilizerdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("StabilizerTOTAL").getValue().toString();
                txtfaultsplitacstabilizer.setText("" + faultssplitacstabilizerdatabaseQvalue);
                faultsplitacstabilizerrt.setText("" + faultssplitacstabilizerprice);
                faultsplitacstabilizertt.setText("" + faultssplitacstabilizerdatabaseQprice);
                int intfaultssplitacstabilizerdatabaseQvalue = Integer.parseInt(faultssplitacstabilizerdatabaseQvalue);
                if (intfaultssplitacstabilizerdatabaseQvalue <= 0) {
                    faultsplitacstabilizercardview.setVisibility(View.GONE);
                } else {
                    faultsplitacstabilizercardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultssplitacindoorcoildatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Indoorcoil").getValue().toString();
                String faultssplitacindoorcoildatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("IndoorcoilTOTAL").getValue().toString();
                txtfaultsplitacindoorcoil.setText("" + faultssplitacindoorcoildatabaseQvalue);
                faultsplitacindoorcoilrt.setText("" + faultssplitacindoorcoilprice);
                faultsplitacindoorcoiltt.setText("" + faultssplitacindoorcoildatabaseQprice);
                int intfaultssplitacindoorcoildatabaseQvalue = Integer.parseInt(faultssplitacindoorcoildatabaseQvalue);
                if (intfaultssplitacindoorcoildatabaseQvalue <= 0) {
                    faultsplitacindoorcoilcardview.setVisibility(View.GONE);
                } else {
                    faultsplitacindoorcoilcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultssplitacoutdoorcondenserdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Outdoorcondenser").getValue().toString();
                String faultssplitacoutdoorcondenserdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("OutdoorcondenserTOTAL").getValue().toString();
                txtfaultsplitacoutdoorcondenser.setText("" + faultssplitacoutdoorcondenserdatabaseQvalue);
                faultsplitacoutdoorcondenserrt.setText("" + faultssplitacoutdoorcondenserprice);
                faultsplitacoutdoorcondensertt.setText("" + faultssplitacoutdoorcondenserdatabaseQprice);
                int intfaultssplitacoutdoorcondenserdatabaseQvalue = Integer.parseInt(faultssplitacoutdoorcondenserdatabaseQvalue);
                if (intfaultssplitacoutdoorcondenserdatabaseQvalue <= 0) {
                    faultsplitacoutdoorcondensercardview.setVisibility(View.GONE);
                } else {
                    faultsplitacoutdoorcondensercardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultssplitacremotedatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Remote").getValue().toString();
                String faultssplitacremotedatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("RemoteTOTAL").getValue().toString();
                txtfaultsplitacremote.setText("" + faultssplitacremotedatabaseQvalue);
                faultsplitacremotert.setText("" + faultssplitacremoteprice);
                faultsplitacremotett.setText("" + faultssplitacremotedatabaseQprice);
                int intfaultssplitacremotedatabaseQvalue = Integer.parseInt(faultssplitacremotedatabaseQvalue);
                if (intfaultssplitacremotedatabaseQvalue <= 0) {
                    faultsplitacremotecardview.setVisibility(View.GONE);
                } else {
                    faultsplitacremotecardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        // windowac

        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultswindowacwaterleakdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Waterleak").getValue().toString();
                String faultswindowacwaterleakdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("WaterleakTOTAL").getValue().toString();
                txtfaultwindowacwaterleak.setText("" + faultswindowacwaterleakdatabaseQvalue);
                faultwindowacwaterleakrt.setText("" + faultswindowacwaterleakprice);
                faultwindowacwaterleaktt.setText("" + faultswindowacwaterleakdatabaseQprice);
                int intfaultswindowacwaterleakdatabaseQvalue = Integer.parseInt(faultswindowacwaterleakdatabaseQvalue);
                if (intfaultswindowacwaterleakdatabaseQvalue <= 0) {
                    faultwindowacwaterleakcardview.setVisibility(View.GONE);
                } else {
                    faultwindowacwaterleakcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultswindowacgasleakdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Gasleak").getValue().toString();
                String faultswindowacgasleakdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("GasleakTOTAL").getValue().toString();
                txtfaultwindowacgasleak.setText("" + faultswindowacgasleakdatabaseQvalue);
                faultwindowacgasleakrt.setText("" + faultswindowacgasleakprice);
                faultwindowacgasleaktt.setText("" + faultswindowacgasleakdatabaseQprice);
                int intfaultswindowacgasleakdatabaseQvalue = Integer.parseInt(faultswindowacgasleakdatabaseQvalue);
                if (intfaultswindowacgasleakdatabaseQvalue <= 0) {
                    faultwindowacgasleakcardview.setVisibility(View.GONE);
                } else {
                    faultwindowacgasleakcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultswindowacpcboarddatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Pcboard").getValue().toString();
                String faultswindowacpcboarddatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("PcboardTOTAL").getValue().toString();
                txtfaultwindowacpcboard.setText("" + faultswindowacpcboarddatabaseQvalue);
                faultwindowacpcboardrt.setText("" + faultswindowacpcboardprice);
                faultwindowacpcboardtt.setText("" + faultswindowacpcboarddatabaseQprice);
                int intfaultswindowacpcboarddatabaseQvalue = Integer.parseInt(faultswindowacpcboarddatabaseQvalue);
                if (intfaultswindowacpcboarddatabaseQvalue <= 0) {
                    faultwindowacpcboardcardview.setVisibility(View.GONE);
                } else {
                    faultwindowacpcboardcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultswindowacstabilizerdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Stabilizer").getValue().toString();
                String faultswindowacstabilizerdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("StabilizerTOTAL").getValue().toString();
                txtfaultwindowacstabilizer.setText("" + faultswindowacstabilizerdatabaseQvalue);
                faultwindowacstabilizerrt.setText("" + faultswindowacstabilizerprice);
                faultwindowacstabilizertt.setText("" + faultswindowacstabilizerdatabaseQprice);
                int intfaultswindowacstabilizerdatabaseQvalue = Integer.parseInt(faultswindowacstabilizerdatabaseQvalue);
                if (intfaultswindowacstabilizerdatabaseQvalue <= 0) {
                    faultwindowacstabilizercardview.setVisibility(View.GONE);
                } else {
                    faultwindowacstabilizercardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultswindowacindoorcoildatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Indoorcoil").getValue().toString();
                String faultswindowacindoorcoildatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("IndoorcoilTOTAL").getValue().toString();
                txtfaultwindowacindoorcoil.setText("" + faultswindowacindoorcoildatabaseQvalue);
                faultwindowacindoorcoilrt.setText("" + faultswindowacindoorcoilprice);
                faultwindowacindoorcoiltt.setText("" + faultswindowacindoorcoildatabaseQprice);
                int intfaultswindowacindoorcoildatabaseQvalue = Integer.parseInt(faultswindowacindoorcoildatabaseQvalue);
                if (intfaultswindowacindoorcoildatabaseQvalue <= 0) {
                    faultwindowacindoorcoilcardview.setVisibility(View.GONE);
                } else {
                    faultwindowacindoorcoilcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultswindowacoutdoorcondenserdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Outdoorcondenser").getValue().toString();
                String faultswindowacoutdoorcondenserdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("OutdoorcondenserTOTAL").getValue().toString();
                txtfaultwindowacoutdoorcondenser.setText("" + faultswindowacoutdoorcondenserdatabaseQvalue);
                faultwindowacoutdoorcondenserrt.setText("" + faultswindowacoutdoorcondenserprice);
                faultwindowacoutdoorcondensertt.setText("" + faultswindowacoutdoorcondenserdatabaseQprice);
                int intfaultswindowacoutdoorcondenserdatabaseQvalue = Integer.parseInt(faultswindowacoutdoorcondenserdatabaseQvalue);
                if (intfaultswindowacoutdoorcondenserdatabaseQvalue <= 0) {
                    faultwindowacoutdoorcondensercardview.setVisibility(View.GONE);
                } else {
                    faultwindowacoutdoorcondensercardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultswindowacremotedatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Remote").getValue().toString();
                String faultswindowacremotedatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("RemoteTOTAL").getValue().toString();
                txtfaultwindowacremote.setText("" + faultswindowacremotedatabaseQvalue);
                faultwindowacremotert.setText("" + faultswindowacremoteprice);
                faultwindowacremotett.setText("" + faultswindowacremotedatabaseQprice);
                int intfaultswindowacremotedatabaseQvalue = Integer.parseInt(faultswindowacremotedatabaseQvalue);
                if (intfaultswindowacremotedatabaseQvalue <= 0) {
                    faultwindowacremotecardview.setVisibility(View.GONE);
                } else {
                    faultwindowacremotecardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        // cassetteac

        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultscassetteacwaterleakdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Waterleak").getValue().toString();
                String faultscassetteacwaterleakdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("WaterleakTOTAL").getValue().toString();
                txtfaultcassetteacwaterleak.setText("" + faultscassetteacwaterleakdatabaseQvalue);
                faultcassetteacwaterleakrt.setText("" + faultscassetteacwaterleakprice);
                faultcassetteacwaterleaktt.setText("" + faultscassetteacwaterleakdatabaseQprice);
                int intfaultscassetteacwaterleakdatabaseQvalue = Integer.parseInt(faultscassetteacwaterleakdatabaseQvalue);
                if (intfaultscassetteacwaterleakdatabaseQvalue <= 0) {
                    faultcassetteacwaterleakcardview.setVisibility(View.GONE);
                } else {
                    faultcassetteacwaterleakcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultscassetteacgasleakdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Gasleak").getValue().toString();
                String faultscassetteacgasleakdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("GasleakTOTAL").getValue().toString();
                txtfaultcassetteacgasleak.setText("" + faultscassetteacgasleakdatabaseQvalue);
                faultcassetteacgasleakrt.setText("" + faultscassetteacgasleakprice);
                faultcassetteacgasleaktt.setText("" + faultscassetteacgasleakdatabaseQprice);
                int intfaultscassetteacgasleakdatabaseQvalue = Integer.parseInt(faultscassetteacgasleakdatabaseQvalue);
                if (intfaultscassetteacgasleakdatabaseQvalue <= 0) {
                    faultcassetteacgasleakcardview.setVisibility(View.GONE);
                } else {
                    faultcassetteacgasleakcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultscassetteacpcboarddatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Pcboard").getValue().toString();
                String faultscassetteacpcboarddatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("PcboardTOTAL").getValue().toString();
                txtfaultcassetteacpcboard.setText("" + faultscassetteacpcboarddatabaseQvalue);
                faultcassetteacpcboardrt.setText("" + faultscassetteacpcboardprice);
                faultcassetteacpcboardtt.setText("" + faultscassetteacpcboarddatabaseQprice);
                int intfaultscassetteacpcboarddatabaseQvalue = Integer.parseInt(faultscassetteacpcboarddatabaseQvalue);
                if (intfaultscassetteacpcboarddatabaseQvalue <= 0) {
                    faultcassetteacpcboardcardview.setVisibility(View.GONE);
                } else {
                    faultcassetteacpcboardcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultscassetteacstabilizerdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Stabilizer").getValue().toString();
                String faultscassetteacstabilizerdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("StabilizerTOTAL").getValue().toString();
                txtfaultcassetteacstabilizer.setText("" + faultscassetteacstabilizerdatabaseQvalue);
                faultcassetteacstabilizerrt.setText("" + faultscassetteacstabilizerprice);
                faultcassetteacstabilizertt.setText("" + faultscassetteacstabilizerdatabaseQprice);
                int intfaultscassetteacstabilizerdatabaseQvalue = Integer.parseInt(faultscassetteacstabilizerdatabaseQvalue);
                if (intfaultscassetteacstabilizerdatabaseQvalue <= 0) {
                    faultcassetteacstabilizercardview.setVisibility(View.GONE);
                } else {
                    faultcassetteacstabilizercardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultscassetteacindoorcoildatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Indoorcoil").getValue().toString();
                String faultscassetteacindoorcoildatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("IndoorcoilTOTAL").getValue().toString();
                txtfaultcassetteacindoorcoil.setText("" + faultscassetteacindoorcoildatabaseQvalue);
                faultcassetteacindoorcoilrt.setText("" + faultscassetteacindoorcoilprice);
                faultcassetteacindoorcoiltt.setText("" + faultscassetteacindoorcoildatabaseQprice);
                int intfaultscassetteacindoorcoildatabaseQvalue = Integer.parseInt(faultscassetteacindoorcoildatabaseQvalue);
                if (intfaultscassetteacindoorcoildatabaseQvalue <= 0) {
                    faultcassetteacindoorcoilcardview.setVisibility(View.GONE);
                } else {
                    faultcassetteacindoorcoilcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultscassetteacoutdoorcondenserdatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Outdoorcondenser").getValue().toString();
                String faultscassetteacoutdoorcondenserdatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("OutdoorcondenserTOTAL").getValue().toString();
                txtfaultcassetteacoutdoorcondenser.setText("" + faultscassetteacoutdoorcondenserdatabaseQvalue);
                faultcassetteacoutdoorcondenserrt.setText("" + faultscassetteacoutdoorcondenserprice);
                faultcassetteacoutdoorcondensertt.setText("" + faultscassetteacoutdoorcondenserdatabaseQprice);
                int intfaultscassetteacoutdoorcondenserdatabaseQvalue = Integer.parseInt(faultscassetteacoutdoorcondenserdatabaseQvalue);
                if (intfaultscassetteacoutdoorcondenserdatabaseQvalue <= 0) {
                    faultcassetteacoutdoorcondensercardview.setVisibility(View.GONE);
                } else {
                    faultcassetteacoutdoorcondensercardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String faultscassetteacremotedatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Remote").getValue().toString();
                String faultscassetteacremotedatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("RemoteTOTAL").getValue().toString();
                txtfaultcassetteacremote.setText("" + faultscassetteacremotedatabaseQvalue);
                faultcassetteacremotert.setText("" + faultscassetteacremoteprice);
                faultcassetteacremotett.setText("" + faultscassetteacremotedatabaseQprice);
                int intfaultscassetteacremotedatabaseQvalue = Integer.parseInt(faultscassetteacremotedatabaseQvalue);
                if (intfaultscassetteacremotedatabaseQvalue <= 0) {
                    faultcassetteacremotecardview.setVisibility(View.GONE);
                } else {
                    faultcassetteacremotecardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });


        //installation and uninstallation

        //splitac

        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String splitacinstalldatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Install").getValue().toString();
                String splitacinstalldatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("InstallTOTAL").getValue().toString();
                txtsplitacinstall.setText("" + splitacinstalldatabaseQvalue);
                splitacinstallrt.setText("" + splitacinstallprice);
                splitacinstalltt.setText("" + splitacinstalldatabaseQprice);
                int intsplitacinstalldatabaseQvalue = Integer.parseInt(splitacinstalldatabaseQvalue);
                if (intsplitacinstalldatabaseQvalue <= 0) {
                    splitacinstallcardview.setVisibility(View.GONE);
                } else {
                    splitacinstallcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String splitacuninstalldatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Uninstall").getValue().toString();
                String splitacuninstalldatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("UninstallTOTAL").getValue().toString();
                txtsplitacuninstall.setText("" + splitacuninstalldatabaseQvalue);
                splitacuninstallrt.setText("" + splitacuninstallprice);
                splitacuninstalltt.setText("" + splitacuninstalldatabaseQprice);
                int intsplitacuninstalldatabaseQvalue = Integer.parseInt(splitacuninstalldatabaseQvalue);
                if (intsplitacuninstalldatabaseQvalue <= 0) {
                    splitacuninstallcardview.setVisibility(View.GONE);
                } else {
                    splitacuninstallcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String splitaccombodatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Combo").getValue().toString();
                String splitaccombodatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("ComboTOTAL").getValue().toString();
                txtsplitaccombo.setText("" + splitaccombodatabaseQvalue);
                splitaccombort.setText("" + splitaccomboprice);
                splitaccombott.setText("" + splitaccombodatabaseQprice);
                int intsplitaccombodatabaseQvalue = Integer.parseInt(splitaccombodatabaseQvalue);
                if (intsplitaccombodatabaseQvalue <= 0) {
                    splitaccombocardview.setVisibility(View.GONE);
                } else {
                    splitaccombocardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        //windowac

        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String windowacinstalldatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Install").getValue().toString();
                String windowacinstalldatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("InstallTOTAL").getValue().toString();
                txtwindowacinstall.setText("" + windowacinstalldatabaseQvalue);
                windowacinstallrt.setText("" + windowacinstallprice);
                windowacinstalltt.setText("" + windowacinstalldatabaseQprice);
                int intwindowacinstalldatabaseQvalue = Integer.parseInt(windowacinstalldatabaseQvalue);
                if (intwindowacinstalldatabaseQvalue <= 0) {
                    windowacinstallcardview.setVisibility(View.GONE);
                } else {
                    windowacinstallcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String windowacuninstalldatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Uninstall").getValue().toString();
                String windowacuninstalldatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("UninstallTOTAL").getValue().toString();
                txtwindowacuninstall.setText("" + windowacuninstalldatabaseQvalue);
                windowacuninstallrt.setText("" + windowacuninstallprice);
                windowacuninstalltt.setText("" + windowacuninstalldatabaseQprice);
                int intwindowacuninstalldatabaseQvalue = Integer.parseInt(windowacuninstalldatabaseQvalue);
                if (intwindowacuninstalldatabaseQvalue <= 0) {
                    windowacuninstallcardview.setVisibility(View.GONE);
                } else {
                    windowacuninstallcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String windowaccombodatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Combo").getValue().toString();
                String windowaccombodatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("ComboTOTAL").getValue().toString();
                txtwindowaccombo.setText("" + windowaccombodatabaseQvalue);
                windowaccombort.setText("" + windowaccomboprice);
                windowaccombott.setText("" + windowaccombodatabaseQprice);
                int intwindowaccombodatabaseQvalue = Integer.parseInt(windowaccombodatabaseQvalue);
                if (intwindowaccombodatabaseQvalue <= 0) {
                    windowaccombocardview.setVisibility(View.GONE);
                } else {
                    windowaccombocardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        //cassetteac

        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String cassetteacinstalldatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Install").getValue().toString();
                String cassetteacinstalldatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("InstallTOTAL").getValue().toString();
                txtcassetteacinstall.setText("" + cassetteacinstalldatabaseQvalue);
                cassetteacinstallrt.setText("" + cassetteacinstallprice);
                cassetteacinstalltt.setText("" + cassetteacinstalldatabaseQprice);
                int intcassetteacinstalldatabaseQvalue = Integer.parseInt(cassetteacinstalldatabaseQvalue);
                if (intcassetteacinstalldatabaseQvalue <= 0) {
                    cassetteacinstallcardview.setVisibility(View.GONE);
                } else {
                    cassetteacinstallcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String cassetteacuninstalldatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Uninstall").getValue().toString();
                String cassetteacuninstalldatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("UninstallTOTAL").getValue().toString();
                txtcassetteacuninstall.setText("" + cassetteacuninstalldatabaseQvalue);
                cassetteacuninstallrt.setText("" + cassetteacuninstallprice);
                cassetteacuninstalltt.setText("" + cassetteacuninstalldatabaseQprice);
                int intcassetteacuninstalldatabaseQvalue = Integer.parseInt(cassetteacuninstalldatabaseQvalue);
                if (intcassetteacuninstalldatabaseQvalue <= 0) {
                    cassetteacuninstallcardview.setVisibility(View.GONE);
                } else {
                    cassetteacuninstallcardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String cassetteaccombodatabaseQvalue = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Combo").getValue().toString();
                String cassetteaccombodatabaseQprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("ComboTOTAL").getValue().toString();
                txtcassetteaccombo.setText("" + cassetteaccombodatabaseQvalue);
                cassetteaccombort.setText("" + cassetteaccomboprice);
                cassetteaccombott.setText("" + cassetteaccombodatabaseQprice);
                int intcassetteaccombodatabaseQvalue = Integer.parseInt(cassetteaccombodatabaseQvalue);
                if (intcassetteaccombodatabaseQvalue <= 0) {
                    cassetteaccombocardview.setVisibility(View.GONE);
                } else {
                    cassetteaccombocardview.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

        cart.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                if (gssplitacprice != 0) {

                    frontloadingpage.setVisibility(View.GONE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });  //frontloadingpage


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        // general service


        gssubsplit = findViewById(R.id.gssubsplit);
        gsaddsplit = findViewById(R.id.gsaddsplit);
        gstxtsplit = findViewById(R.id.gstxtsplit);
        gssplitrt = findViewById(R.id.gssplitrt);
        gssplittt = findViewById(R.id.gssplittt);
        gssplitacprogressbar = findViewById(R.id.gssplitacprogressbar);
        gssplitaccardview = findViewById(R.id.gssplitaccardview);

        gssubwindow = findViewById(R.id.gssubwindow);
        gsaddwindow = findViewById(R.id.gsaddwindow);
        gstxtwindow = findViewById(R.id.gstxtwindow);
        gswindowrt = findViewById(R.id.gswindowrt);
        gswindowtt = findViewById(R.id.gswindowtt);
        gswindowacprogressbar = findViewById(R.id.gswindowacprogressbar);
        gswindowaccardview = findViewById(R.id.gswindowaccardview);

        gssubcassette = findViewById(R.id.gssubcassette);
        gsaddcassette = findViewById(R.id.gsaddcassette);
        gstxtcassette = findViewById(R.id.gstxtcassette);
        gscassettert = findViewById(R.id.gscassettert);
        gscassettett = findViewById(R.id.gscassettett);
        gscassetteacprogressbar = findViewById(R.id.gscassetteacprogressbar);
        gscassetteaccardview = findViewById(R.id.gscassetteaccardview);


        //water wash

        wwsubsplitss = findViewById(R.id.wwsubsplitss);
        wwaddsplitss = findViewById(R.id.wwaddsplitss);
        wwtxtsplitss = findViewById(R.id.wwtxtsplitss);
        wwsplitssrt = findViewById(R.id.wwsplitssrt);
        wwsplitsstt = findViewById(R.id.wwsplitsstt);
        wwsplitssacprogressbar = findViewById(R.id.wwsplitssacprogressbar);
        wwsplitssaccardview = findViewById(R.id.wwsplitssaccardview);

        wwsubwindowss = findViewById(R.id.wwsubwindowss);
        wwaddwindowss = findViewById(R.id.wwaddwindowss);
        wwtxtwindowss = findViewById(R.id.wwtxtwindowss);
        wwwindowssrt = findViewById(R.id.wwwindowssrt);
        wwwindowsstt = findViewById(R.id.wwwindowsstt);
        wwwindowssacprogressbar = findViewById(R.id.wwwindowssacprogressbar);
        wwwindowssaccardview = findViewById(R.id.wwwindowssaccardview);

        wwsubcassettess = findViewById(R.id.wwsubcassettess);
        wwaddcassettess = findViewById(R.id.wwaddcassettess);
        wwtxtcassettess = findViewById(R.id.wwtxtcassettess);
        wwcassettessrt = findViewById(R.id.wwcassettessrt);
        wwcassettesstt = findViewById(R.id.wwcassettesstt);
        wwcassettessacprogressbar = findViewById(R.id.wwcassettessacprogressbar);
        wwcassettessaccardview = findViewById(R.id.wwcassettessaccardview);

        wwsubsplit360 = findViewById(R.id.wwsubsplit360);
        wwaddsplit360 = findViewById(R.id.wwaddsplit360);
        wwtxtsplit360 = findViewById(R.id.wwtxtsplit360);
        wwsplit360rt = findViewById(R.id.wwsplit360rt);
        wwsplit360tt = findViewById(R.id.wwsplit360tt);
        wwsplit360acprogressbar = findViewById(R.id.wwsplit360acprogressbar);
        wwsplit360accardview = findViewById(R.id.wwsplit360accardview);

        wwsubcassette360 = findViewById(R.id.wwsubcassette360);
        wwaddcassette360 = findViewById(R.id.wwaddcassette360);
        wwtxtcassette360 = findViewById(R.id.wwtxtcassette360);
        wwcassette360rt = findViewById(R.id.wwcassette360rt);
        wwcassette360tt = findViewById(R.id.wwcassette360tt);
        wwcassette360acprogressbar = findViewById(R.id.wwcassette360acprogressbar);
        wwcassette360accardview = findViewById(R.id.wwcassette360accardview);


        // AMC


        // split
        //
        //
        // scheme1

        amcsplitscheme1withsparetotalsub = findViewById(R.id.amcsubsplit_scheme1_withspare_total);
        amcsplitscheme1withsparetotaladd = findViewById(R.id.amcaddsplit_scheme1_withspare_total);
        amcsplitscheme1withsparetotaltxt = findViewById(R.id.amctxtsplit_scheme1_withspare_total);
        amcsplitscheme1withsparetotalrt = findViewById(R.id.amcsplit_scheme1_withspare_totalrt);
        amcsplitscheme1withsparetotaltt = findViewById(R.id.amcsplit_scheme1_withspare_totaltt);
        amcsplitscheme1withsparetotalprogressbar = findViewById(R.id.amcsplit_scheme1_withspare_total_progressbar);
        amcsplitscheme1withsparetotalcardview = findViewById(R.id.amcsplit_scheme1_withspare_total_cardview);

        amcsplitscheme1withsparelimitedsub = findViewById(R.id.amcsubsplit_scheme1_withspare_limited);
        amcsplitscheme1withsparelimitedadd = findViewById(R.id.amcaddsplit_scheme1_withspare_limited);
        amcsplitscheme1withsparelimitedtxt = findViewById(R.id.amctxtsplit_scheme1_withspare_limited);
        amcsplitscheme1withsparelimitedrt = findViewById(R.id.amcsplit_scheme1_withspare_limitedrt);
        amcsplitscheme1withsparelimitedtt = findViewById(R.id.amcsplit_scheme1_withspare_limitedtt);
        amcsplitscheme1withsparelimitedprogressbar = findViewById(R.id.amcsplit_scheme1_withspare_limited_progressbar);
        amcsplitscheme1withsparelimitedcardview = findViewById(R.id.amcsplit_scheme1_withspare_limited_cardview);

        amcsplitscheme1withsparenosub = findViewById(R.id.amcsubsplit_scheme1_withspare_no);
        amcsplitscheme1withsparenoadd = findViewById(R.id.amcaddsplit_scheme1_withspare_no);
        amcsplitscheme1withsparenotxt = findViewById(R.id.amctxtsplit_scheme1_withspare_no);
        amcsplitscheme1withsparenort = findViewById(R.id.amcsplit_scheme1_withspare_nort);
        amcsplitscheme1withsparenott = findViewById(R.id.amcsplit_scheme1_withspare_nott);
        amcsplitscheme1withsparenoprogressbar = findViewById(R.id.amcsplit_scheme1_withspare_no_progressbar);
        amcsplitscheme1withsparenocardview = findViewById(R.id.amcsplit_scheme1_withspare_no_cardview);


        // scheme2

        amcsplitscheme2withsparetotalsub = findViewById(R.id.amcsubsplit_scheme2_withspare_total);
        amcsplitscheme2withsparetotaladd = findViewById(R.id.amcaddsplit_scheme2_withspare_total);
        amcsplitscheme2withsparetotaltxt = findViewById(R.id.amctxtsplit_scheme2_withspare_total);
        amcsplitscheme2withsparetotalrt = findViewById(R.id.amcsplit_scheme2_withspare_totalrt);
        amcsplitscheme2withsparetotaltt = findViewById(R.id.amcsplit_scheme2_withspare_totaltt);
        amcsplitscheme2withsparetotalprogressbar = findViewById(R.id.amcsplit_scheme2_withspare_total_progressbar);
        amcsplitscheme2withsparetotalcardview = findViewById(R.id.amcsplit_scheme2_withspare_total_cardview);

        amcsplitscheme2withsparelimitedsub = findViewById(R.id.amcsubsplit_scheme2_withspare_limited);
        amcsplitscheme2withsparelimitedadd = findViewById(R.id.amcaddsplit_scheme2_withspare_limited);
        amcsplitscheme2withsparelimitedtxt = findViewById(R.id.amctxtsplit_scheme2_withspare_limited);
        amcsplitscheme2withsparelimitedrt = findViewById(R.id.amcsplit_scheme2_withspare_limitedrt);
        amcsplitscheme2withsparelimitedtt = findViewById(R.id.amcsplit_scheme2_withspare_limitedtt);
        amcsplitscheme2withsparelimitedprogressbar = findViewById(R.id.amcsplit_scheme2_withspare_limited_progressbar);
        amcsplitscheme2withsparelimitedcardview = findViewById(R.id.amcsplit_scheme2_withspare_limited_cardview);

        amcsplitscheme2withsparenosub = findViewById(R.id.amcsubsplit_scheme2_withspare_no);
        amcsplitscheme2withsparenoadd = findViewById(R.id.amcaddsplit_scheme2_withspare_no);
        amcsplitscheme2withsparenotxt = findViewById(R.id.amctxtsplit_scheme2_withspare_no);
        amcsplitscheme2withsparenort = findViewById(R.id.amcsplit_scheme2_withspare_nort);
        amcsplitscheme2withsparenott = findViewById(R.id.amcsplit_scheme2_withspare_nott);
        amcsplitscheme2withsparenoprogressbar = findViewById(R.id.amcsplit_scheme2_withspare_no_progressbar);
        amcsplitscheme2withsparenocardview = findViewById(R.id.amcsplit_scheme2_withspare_no_cardview);

        // scheme3

        amcsplitscheme3withsparetotalsub = findViewById(R.id.amcsubsplit_scheme3_withspare_total);
        amcsplitscheme3withsparetotaladd = findViewById(R.id.amcaddsplit_scheme3_withspare_total);
        amcsplitscheme3withsparetotaltxt = findViewById(R.id.amctxtsplit_scheme3_withspare_total);
        amcsplitscheme3withsparetotalrt = findViewById(R.id.amcsplit_scheme3_withspare_totalrt);
        amcsplitscheme3withsparetotaltt = findViewById(R.id.amcsplit_scheme3_withspare_totaltt);
        amcsplitscheme3withsparetotalprogressbar = findViewById(R.id.amcsplit_scheme3_withspare_total_progressbar);
        amcsplitscheme3withsparetotalcardview = findViewById(R.id.amcsplit_scheme3_withspare_total_cardview);

        amcsplitscheme3withsparelimitedsub = findViewById(R.id.amcsubsplit_scheme3_withspare_limited);
        amcsplitscheme3withsparelimitedadd = findViewById(R.id.amcaddsplit_scheme3_withspare_limited);
        amcsplitscheme3withsparelimitedtxt = findViewById(R.id.amctxtsplit_scheme3_withspare_limited);
        amcsplitscheme3withsparelimitedrt = findViewById(R.id.amcsplit_scheme3_withspare_limitedrt);
        amcsplitscheme3withsparelimitedtt = findViewById(R.id.amcsplit_scheme3_withspare_limitedtt);
        amcsplitscheme3withsparelimitedprogressbar = findViewById(R.id.amcsplit_scheme3_withspare_limited_progressbar);
        amcsplitscheme3withsparelimitedcardview = findViewById(R.id.amcsplit_scheme3_withspare_limited_cardview);

        amcsplitscheme3withsparenosub = findViewById(R.id.amcsubsplit_scheme3_withspare_no);
        amcsplitscheme3withsparenoadd = findViewById(R.id.amcaddsplit_scheme3_withspare_no);
        amcsplitscheme3withsparenotxt = findViewById(R.id.amctxtsplit_scheme3_withspare_no);
        amcsplitscheme3withsparenort = findViewById(R.id.amcsplit_scheme3_withspare_nort);
        amcsplitscheme3withsparenott = findViewById(R.id.amcsplit_scheme3_withspare_nott);
        amcsplitscheme3withsparenoprogressbar = findViewById(R.id.amcsplit_scheme3_withspare_no_progressbar);
        amcsplitscheme3withsparenocardview = findViewById(R.id.amcsplit_scheme3_withspare_no_cardview);


        // window
        //
        //
        // scheme1

        amcwindowscheme1withsparetotalsub = findViewById(R.id.amcsubwindow_scheme1_withspare_total);
        amcwindowscheme1withsparetotaladd = findViewById(R.id.amcaddwindow_scheme1_withspare_total);
        amcwindowscheme1withsparetotaltxt = findViewById(R.id.amctxtwindow_scheme1_withspare_total);
        amcwindowscheme1withsparetotalrt = findViewById(R.id.amcwindow_scheme1_withspare_totalrt);
        amcwindowscheme1withsparetotaltt = findViewById(R.id.amcwindow_scheme1_withspare_totaltt);
        amcwindowscheme1withsparetotalprogressbar = findViewById(R.id.amcwindow_scheme1_withspare_total_progressbar);
        amcwindowscheme1withsparetotalcardview = findViewById(R.id.amcwindow_scheme1_withspare_total_cardview);

        amcwindowscheme1withsparelimitedsub = findViewById(R.id.amcsubwindow_scheme1_withspare_limited);
        amcwindowscheme1withsparelimitedadd = findViewById(R.id.amcaddwindow_scheme1_withspare_limited);
        amcwindowscheme1withsparelimitedtxt = findViewById(R.id.amctxtwindow_scheme1_withspare_limited);
        amcwindowscheme1withsparelimitedrt = findViewById(R.id.amcwindow_scheme1_withspare_limitedrt);
        amcwindowscheme1withsparelimitedtt = findViewById(R.id.amcwindow_scheme1_withspare_limitedtt);
        amcwindowscheme1withsparelimitedprogressbar = findViewById(R.id.amcwindow_scheme1_withspare_limited_progressbar);
        amcwindowscheme1withsparelimitedcardview = findViewById(R.id.amcwindow_scheme1_withspare_limited_cardview);

        amcwindowscheme1withsparenosub = findViewById(R.id.amcsubwindow_scheme1_withspare_no);
        amcwindowscheme1withsparenoadd = findViewById(R.id.amcaddwindow_scheme1_withspare_no);
        amcwindowscheme1withsparenotxt = findViewById(R.id.amctxtwindow_scheme1_withspare_no);
        amcwindowscheme1withsparenort = findViewById(R.id.amcwindow_scheme1_withspare_nort);
        amcwindowscheme1withsparenott = findViewById(R.id.amcwindow_scheme1_withspare_nott);
        amcwindowscheme1withsparenoprogressbar = findViewById(R.id.amcwindow_scheme1_withspare_no_progressbar);
        amcwindowscheme1withsparenocardview = findViewById(R.id.amcwindow_scheme1_withspare_no_cardview);


        // scheme2

        amcwindowscheme2withsparetotalsub = findViewById(R.id.amcsubwindow_scheme2_withspare_total);
        amcwindowscheme2withsparetotaladd = findViewById(R.id.amcaddwindow_scheme2_withspare_total);
        amcwindowscheme2withsparetotaltxt = findViewById(R.id.amctxtwindow_scheme2_withspare_total);
        amcwindowscheme2withsparetotalrt = findViewById(R.id.amcwindow_scheme2_withspare_totalrt);
        amcwindowscheme2withsparetotaltt = findViewById(R.id.amcwindow_scheme2_withspare_totaltt);
        amcwindowscheme2withsparetotalprogressbar = findViewById(R.id.amcwindow_scheme2_withspare_total_progressbar);
        amcwindowscheme2withsparetotalcardview = findViewById(R.id.amcwindow_scheme2_withspare_total_cardview);

        amcwindowscheme2withsparelimitedsub = findViewById(R.id.amcsubwindow_scheme2_withspare_limited);
        amcwindowscheme2withsparelimitedadd = findViewById(R.id.amcaddwindow_scheme2_withspare_limited);
        amcwindowscheme2withsparelimitedtxt = findViewById(R.id.amctxtwindow_scheme2_withspare_limited);
        amcwindowscheme2withsparelimitedrt = findViewById(R.id.amcwindow_scheme2_withspare_limitedrt);
        amcwindowscheme2withsparelimitedtt = findViewById(R.id.amcwindow_scheme2_withspare_limitedtt);
        amcwindowscheme2withsparelimitedprogressbar = findViewById(R.id.amcwindow_scheme2_withspare_limited_progressbar);
        amcwindowscheme2withsparelimitedcardview = findViewById(R.id.amcwindow_scheme2_withspare_limited_cardview);

        amcwindowscheme2withsparenosub = findViewById(R.id.amcsubwindow_scheme2_withspare_no);
        amcwindowscheme2withsparenoadd = findViewById(R.id.amcaddwindow_scheme2_withspare_no);
        amcwindowscheme2withsparenotxt = findViewById(R.id.amctxtwindow_scheme2_withspare_no);
        amcwindowscheme2withsparenort = findViewById(R.id.amcwindow_scheme2_withspare_nort);
        amcwindowscheme2withsparenott = findViewById(R.id.amcwindow_scheme2_withspare_nott);
        amcwindowscheme2withsparenoprogressbar = findViewById(R.id.amcwindow_scheme2_withspare_no_progressbar);
        amcwindowscheme2withsparenocardview = findViewById(R.id.amcwindow_scheme2_withspare_no_cardview);


        // cassette
        //
        //
        // scheme1

        amccassettescheme1withsparetotalsub = findViewById(R.id.amcsubcassette_scheme1_withspare_total);
        amccassettescheme1withsparetotaladd = findViewById(R.id.amcaddcassette_scheme1_withspare_total);
        amccassettescheme1withsparetotaltxt = findViewById(R.id.amctxtcassette_scheme1_withspare_total);
        amccassettescheme1withsparetotalrt = findViewById(R.id.amccassette_scheme1_withspare_totalrt);
        amccassettescheme1withsparetotaltt = findViewById(R.id.amccassette_scheme1_withspare_totaltt);
        amccassettescheme1withsparetotalprogressbar = findViewById(R.id.amccassette_scheme1_withspare_total_progressbar);
        amccassettescheme1withsparetotalcardview = findViewById(R.id.amccassette_scheme1_withspare_total_cardview);

        amccassettescheme1withsparelimitedsub = findViewById(R.id.amcsubcassette_scheme1_withspare_limited);
        amccassettescheme1withsparelimitedadd = findViewById(R.id.amcaddcassette_scheme1_withspare_limited);
        amccassettescheme1withsparelimitedtxt = findViewById(R.id.amctxtcassette_scheme1_withspare_limited);
        amccassettescheme1withsparelimitedrt = findViewById(R.id.amccassette_scheme1_withspare_limitedrt);
        amccassettescheme1withsparelimitedtt = findViewById(R.id.amccassette_scheme1_withspare_limitedtt);
        amccassettescheme1withsparelimitedprogressbar = findViewById(R.id.amccassette_scheme1_withspare_limited_progressbar);
        amccassettescheme1withsparelimitedcardview = findViewById(R.id.amccassette_scheme1_withspare_limited_cardview);

        amccassettescheme1withsparenosub = findViewById(R.id.amcsubcassette_scheme1_withspare_no);
        amccassettescheme1withsparenoadd = findViewById(R.id.amcaddcassette_scheme1_withspare_no);
        amccassettescheme1withsparenotxt = findViewById(R.id.amctxtcassette_scheme1_withspare_no);
        amccassettescheme1withsparenort = findViewById(R.id.amccassette_scheme1_withspare_nort);
        amccassettescheme1withsparenott = findViewById(R.id.amccassette_scheme1_withspare_nott);
        amccassettescheme1withsparenoprogressbar = findViewById(R.id.amccassette_scheme1_withspare_no_progressbar);
        amccassettescheme1withsparenocardview = findViewById(R.id.amccassette_scheme1_withspare_no_cardview);


        // spares

        // split ac

        subsparesplitaccapacitor = findViewById(R.id.subsparesplitaccapacitor);
        addsparesplitaccapacitor = findViewById(R.id.addsparesplitaccapacitor);
        txtsparesplitaccapacitor = findViewById(R.id.txtsparesplitaccapacitor);
        sparesplitaccapacitorrt = findViewById(R.id.sparesplitaccapacitorrt);
        sparesplitaccapacitortt = findViewById(R.id.sparesplitaccapacitortt);
        sparesplitaccapacitorprogressbar = findViewById(R.id.sparesplitaccapacitorprogressbar);
        sparesplitaccapacitorcardview = findViewById(R.id.sparesplitaccapacitorcardview);

        subsparesplitacblower = findViewById(R.id.subsparesplitacblower);
        addsparesplitacblower = findViewById(R.id.addsparesplitacblower);
        txtsparesplitacblower = findViewById(R.id.txtsparesplitacblower);
        sparesplitacblowerrt = findViewById(R.id.sparesplitacblowerrt);
        sparesplitacblowertt = findViewById(R.id.sparesplitacblowertt);
        sparesplitacblowerprogressbar = findViewById(R.id.sparesplitacblowerprogressbar);
        sparesplitacblowercardview = findViewById(R.id.sparesplitacblowercardview);

        subsparesplitacoutdoorfan = findViewById(R.id.subsparesplitacoutdoorfan);
        addsparesplitacoutdoorfan = findViewById(R.id.addsparesplitacoutdoorfan);
        txtsparesplitacoutdoorfan = findViewById(R.id.txtsparesplitacoutdoorfan);
        sparesplitacoutdoorfanrt = findViewById(R.id.sparesplitacoutdoorfanrt);
        sparesplitacoutdoorfantt = findViewById(R.id.sparesplitacoutdoorfantt);
        sparesplitacoutdoorfanprogressbar = findViewById(R.id.sparesplitacoutdoorfanprogressbar);
        sparesplitacoutdoorfancardview = findViewById(R.id.sparesplitacoutdoorfancardview);

        subsparesplitacindoormotor = findViewById(R.id.subsparesplitacindoormotor);
        addsparesplitacindoormotor = findViewById(R.id.addsparesplitacindoormotor);
        txtsparesplitacindoormotor = findViewById(R.id.txtsparesplitacindoormotor);
        sparesplitacindoormotorrt = findViewById(R.id.sparesplitacindoormotorrt);
        sparesplitacindoormotortt = findViewById(R.id.sparesplitacindoormotortt);
        sparesplitacindoormotorprogressbar = findViewById(R.id.sparesplitacindoormotorprogressbar);
        sparesplitacindoormotorcardview = findViewById(R.id.sparesplitacindoormotorcardview);

        subsparesplitacoutdoormotor = findViewById(R.id.subsparesplitacoutdoormotor);
        addsparesplitacoutdoormotor = findViewById(R.id.addsparesplitacoutdoormotor);
        txtsparesplitacoutdoormotor = findViewById(R.id.txtsparesplitacoutdoormotor);
        sparesplitacoutdoormotorrt = findViewById(R.id.sparesplitacoutdoormotorrt);
        sparesplitacoutdoormotortt = findViewById(R.id.sparesplitacoutdoormotortt);
        sparesplitacoutdoormotorprogressbar = findViewById(R.id.sparesplitacoutdoormotorprogressbar);
        sparesplitacoutdoormotorcardview = findViewById(R.id.sparesplitacoutdoormotorcardview);

        subsparesplitacswingmotor = findViewById(R.id.subsparesplitacswingmotor);
        addsparesplitacswingmotor = findViewById(R.id.addsparesplitacswingmotor);
        txtsparesplitacswingmotor = findViewById(R.id.txtsparesplitacswingmotor);
        sparesplitacswingmotorrt = findViewById(R.id.sparesplitacswingmotorrt);
        sparesplitacswingmotortt = findViewById(R.id.sparesplitacswingmotortt);
        sparesplitacswingmotorprogressbar = findViewById(R.id.sparesplitacswingmotorprogressbar);
        sparesplitacswingmotorcardview = findViewById(R.id.sparesplitacswingmotorcardview);

        subsparesplitacindoorcoil = findViewById(R.id.subsparesplitacindoorcoil);
        addsparesplitacindoorcoil = findViewById(R.id.addsparesplitacindoorcoil);
        txtsparesplitacindoorcoil = findViewById(R.id.txtsparesplitacindoorcoil);
        sparesplitacindoorcoilrt = findViewById(R.id.sparesplitacindoorcoilrt);
        sparesplitacindoorcoiltt = findViewById(R.id.sparesplitacindoorcoiltt);
        sparesplitacindoorcoilprogressbar = findViewById(R.id.sparesplitacindoorcoilprogressbar);
        sparesplitacindoorcoilcardview = findViewById(R.id.sparesplitacindoorcoilcardview);

        subsparesplitacoutdoorcondenser = findViewById(R.id.subsparesplitacoutdoorcondenser);
        addsparesplitacoutdoorcondenser = findViewById(R.id.addsparesplitacoutdoorcondenser);
        txtsparesplitacoutdoorcondenser = findViewById(R.id.txtsparesplitacoutdoorcondenser);
        sparesplitacoutdoorcondenserrt = findViewById(R.id.sparesplitacoutdoorcondenserrt);
        sparesplitacoutdoorcondensertt = findViewById(R.id.sparesplitacoutdoorcondensertt);
        sparesplitacoutdoorcondenserprogressbar = findViewById(R.id.sparesplitacoutdoorcondenserprogressbar);
        sparesplitacoutdoorcondensercardview = findViewById(R.id.sparesplitacoutdoorcondensercardview);

        subsparesplitacswingflap = findViewById(R.id.subsparesplitacswingflap);
        addsparesplitacswingflap = findViewById(R.id.addsparesplitacswingflap);
        txtsparesplitacswingflap = findViewById(R.id.txtsparesplitacswingflap);
        sparesplitacswingflaprt = findViewById(R.id.sparesplitacswingflaprt);
        sparesplitacswingflaptt = findViewById(R.id.sparesplitacswingflaptt);
        sparesplitacswingflapprogressbar = findViewById(R.id.sparesplitacswingflapprogressbar);
        sparesplitacswingflapcardview = findViewById(R.id.sparesplitacswingflapcardview);

        subsparesplitacremote = findViewById(R.id.subsparesplitacremote);
        addsparesplitacremote = findViewById(R.id.addsparesplitacremote);
        txtsparesplitacremote = findViewById(R.id.txtsparesplitacremote);
        sparesplitacremotert = findViewById(R.id.sparesplitacremotert);
        sparesplitacremotett = findViewById(R.id.sparesplitacremotett);
        sparesplitacremoteprogressbar = findViewById(R.id.sparesplitacremoteprogressbar);
        sparesplitacremotecardview = findViewById(R.id.sparesplitacremotecardview);


        // window ac

        subsparewindowaccapacitor = findViewById(R.id.subsparewindowaccapacitor);
        addsparewindowaccapacitor = findViewById(R.id.addsparewindowaccapacitor);
        txtsparewindowaccapacitor = findViewById(R.id.txtsparewindowaccapacitor);
        sparewindowaccapacitorrt = findViewById(R.id.sparewindowaccapacitorrt);
        sparewindowaccapacitortt = findViewById(R.id.sparewindowaccapacitortt);
        sparewindowaccapacitorprogressbar = findViewById(R.id.sparewindowaccapacitorprogressbar);
        sparewindowaccapacitorcardview = findViewById(R.id.sparewindowaccapacitorcardview);

        subsparewindowacblower = findViewById(R.id.subsparewindowacblower);
        addsparewindowacblower = findViewById(R.id.addsparewindowacblower);
        txtsparewindowacblower = findViewById(R.id.txtsparewindowacblower);
        sparewindowacblowerrt = findViewById(R.id.sparewindowacblowerrt);
        sparewindowacblowertt = findViewById(R.id.sparewindowacblowertt);
        sparewindowacblowerprogressbar = findViewById(R.id.sparewindowacblowerprogressbar);
        sparewindowacblowercardview = findViewById(R.id.sparewindowacblowercardview);

        subsparewindowacoutdoorfan = findViewById(R.id.subsparewindowacoutdoorfan);
        addsparewindowacoutdoorfan = findViewById(R.id.addsparewindowacoutdoorfan);
        txtsparewindowacoutdoorfan = findViewById(R.id.txtsparewindowacoutdoorfan);
        sparewindowacoutdoorfanrt = findViewById(R.id.sparewindowacoutdoorfanrt);
        sparewindowacoutdoorfantt = findViewById(R.id.sparewindowacoutdoorfantt);
        sparewindowacoutdoorfanprogressbar = findViewById(R.id.sparewindowacoutdoorfanprogressbar);
        sparewindowacoutdoorfancardview = findViewById(R.id.sparewindowacoutdoorfancardview);

        subsparewindowacindoormotor = findViewById(R.id.subsparewindowacindoormotor);
        addsparewindowacindoormotor = findViewById(R.id.addsparewindowacindoormotor);
        txtsparewindowacindoormotor = findViewById(R.id.txtsparewindowacindoormotor);
        sparewindowacindoormotorrt = findViewById(R.id.sparewindowacindoormotorrt);
        sparewindowacindoormotortt = findViewById(R.id.sparewindowacindoormotortt);
        sparewindowacindoormotorprogressbar = findViewById(R.id.sparewindowacindoormotorprogressbar);
        sparewindowacindoormotorcardview = findViewById(R.id.sparewindowacindoormotorcardview);

        subsparewindowacoutdoormotor = findViewById(R.id.subsparewindowacoutdoormotor);
        addsparewindowacoutdoormotor = findViewById(R.id.addsparewindowacoutdoormotor);
        txtsparewindowacoutdoormotor = findViewById(R.id.txtsparewindowacoutdoormotor);
        sparewindowacoutdoormotorrt = findViewById(R.id.sparewindowacoutdoormotorrt);
        sparewindowacoutdoormotortt = findViewById(R.id.sparewindowacoutdoormotortt);
        sparewindowacoutdoormotorprogressbar = findViewById(R.id.sparewindowacoutdoormotorprogressbar);
        sparewindowacoutdoormotorcardview = findViewById(R.id.sparewindowacoutdoormotorcardview);

        subsparewindowacswingmotor = findViewById(R.id.subsparewindowacswingmotor);
        addsparewindowacswingmotor = findViewById(R.id.addsparewindowacswingmotor);
        txtsparewindowacswingmotor = findViewById(R.id.txtsparewindowacswingmotor);
        sparewindowacswingmotorrt = findViewById(R.id.sparewindowacswingmotorrt);
        sparewindowacswingmotortt = findViewById(R.id.sparewindowacswingmotortt);
        sparewindowacswingmotorprogressbar = findViewById(R.id.sparewindowacswingmotorprogressbar);
        sparewindowacswingmotorcardview = findViewById(R.id.sparewindowacswingmotorcardview);

        subsparewindowacindoorcoil = findViewById(R.id.subsparewindowacindoorcoil);
        addsparewindowacindoorcoil = findViewById(R.id.addsparewindowacindoorcoil);
        txtsparewindowacindoorcoil = findViewById(R.id.txtsparewindowacindoorcoil);
        sparewindowacindoorcoilrt = findViewById(R.id.sparewindowacindoorcoilrt);
        sparewindowacindoorcoiltt = findViewById(R.id.sparewindowacindoorcoiltt);
        sparewindowacindoorcoilprogressbar = findViewById(R.id.sparewindowacindoorcoilprogressbar);
        sparewindowacindoorcoilcardview = findViewById(R.id.sparewindowacindoorcoilcardview);

        subsparewindowacoutdoorcondenser = findViewById(R.id.subsparewindowacoutdoorcondenser);
        addsparewindowacoutdoorcondenser = findViewById(R.id.addsparewindowacoutdoorcondenser);
        txtsparewindowacoutdoorcondenser = findViewById(R.id.txtsparewindowacoutdoorcondenser);
        sparewindowacoutdoorcondenserrt = findViewById(R.id.sparewindowacoutdoorcondenserrt);
        sparewindowacoutdoorcondensertt = findViewById(R.id.sparewindowacoutdoorcondensertt);
        sparewindowacoutdoorcondenserprogressbar = findViewById(R.id.sparewindowacoutdoorcondenserprogressbar);
        sparewindowacoutdoorcondensercardview = findViewById(R.id.sparewindowacoutdoorcondensercardview);

        subsparewindowacswingflap = findViewById(R.id.subsparewindowacswingflap);
        addsparewindowacswingflap = findViewById(R.id.addsparewindowacswingflap);
        txtsparewindowacswingflap = findViewById(R.id.txtsparewindowacswingflap);
        sparewindowacswingflaprt = findViewById(R.id.sparewindowacswingflaprt);
        sparewindowacswingflaptt = findViewById(R.id.sparewindowacswingflaptt);
        sparewindowacswingflapprogressbar = findViewById(R.id.sparewindowacswingflapprogressbar);
        sparewindowacswingflapcardview = findViewById(R.id.sparewindowacswingflapcardview);

        subsparewindowacremote = findViewById(R.id.subsparewindowacremote);
        addsparewindowacremote = findViewById(R.id.addsparewindowacremote);
        txtsparewindowacremote = findViewById(R.id.txtsparewindowacremote);
        sparewindowacremotert = findViewById(R.id.sparewindowacremotert);
        sparewindowacremotett = findViewById(R.id.sparewindowacremotett);
        sparewindowacremoteprogressbar = findViewById(R.id.sparewindowacremoteprogressbar);
        sparewindowacremotecardview = findViewById(R.id.sparewindowacremotecardview);

        // cassette ac

        subsparecassetteaccapacitor = findViewById(R.id.subsparecassetteaccapacitor);
        addsparecassetteaccapacitor = findViewById(R.id.addsparecassetteaccapacitor);
        txtsparecassetteaccapacitor = findViewById(R.id.txtsparecassetteaccapacitor);
        sparecassetteaccapacitorrt = findViewById(R.id.sparecassetteaccapacitorrt);
        sparecassetteaccapacitortt = findViewById(R.id.sparecassetteaccapacitortt);
        sparecassetteaccapacitorprogressbar = findViewById(R.id.sparecassetteaccapacitorprogressbar);
        sparecassetteaccapacitorcardview = findViewById(R.id.sparecassetteaccapacitorcardview);

        subsparecassetteacblower = findViewById(R.id.subsparecassetteacblower);
        addsparecassetteacblower = findViewById(R.id.addsparecassetteacblower);
        txtsparecassetteacblower = findViewById(R.id.txtsparecassetteacblower);
        sparecassetteacblowerrt = findViewById(R.id.sparecassetteacblowerrt);
        sparecassetteacblowertt = findViewById(R.id.sparecassetteacblowertt);
        sparecassetteacblowerprogressbar = findViewById(R.id.sparecassetteacblowerprogressbar);
        sparecassetteacblowercardview = findViewById(R.id.sparecassetteacblowercardview);

        subsparecassetteacoutdoorfan = findViewById(R.id.subsparecassetteacoutdoorfan);
        addsparecassetteacoutdoorfan = findViewById(R.id.addsparecassetteacoutdoorfan);
        txtsparecassetteacoutdoorfan = findViewById(R.id.txtsparecassetteacoutdoorfan);
        sparecassetteacoutdoorfanrt = findViewById(R.id.sparecassetteacoutdoorfanrt);
        sparecassetteacoutdoorfantt = findViewById(R.id.sparecassetteacoutdoorfantt);
        sparecassetteacoutdoorfanprogressbar = findViewById(R.id.sparecassetteacoutdoorfanprogressbar);
        sparecassetteacoutdoorfancardview = findViewById(R.id.sparecassetteacoutdoorfancardview);

        subsparecassetteacindoormotor = findViewById(R.id.subsparecassetteacindoormotor);
        addsparecassetteacindoormotor = findViewById(R.id.addsparecassetteacindoormotor);
        txtsparecassetteacindoormotor = findViewById(R.id.txtsparecassetteacindoormotor);
        sparecassetteacindoormotorrt = findViewById(R.id.sparecassetteacindoormotorrt);
        sparecassetteacindoormotortt = findViewById(R.id.sparecassetteacindoormotortt);
        sparecassetteacindoormotorprogressbar = findViewById(R.id.sparecassetteacindoormotorprogressbar);
        sparecassetteacindoormotorcardview = findViewById(R.id.sparecassetteacindoormotorcardview);

        subsparecassetteacoutdoormotor = findViewById(R.id.subsparecassetteacoutdoormotor);
        addsparecassetteacoutdoormotor = findViewById(R.id.addsparecassetteacoutdoormotor);
        txtsparecassetteacoutdoormotor = findViewById(R.id.txtsparecassetteacoutdoormotor);
        sparecassetteacoutdoormotorrt = findViewById(R.id.sparecassetteacoutdoormotorrt);
        sparecassetteacoutdoormotortt = findViewById(R.id.sparecassetteacoutdoormotortt);
        sparecassetteacoutdoormotorprogressbar = findViewById(R.id.sparecassetteacoutdoormotorprogressbar);
        sparecassetteacoutdoormotorcardview = findViewById(R.id.sparecassetteacoutdoormotorcardview);

        subsparecassetteacswingmotor = findViewById(R.id.subsparecassetteacswingmotor);
        addsparecassetteacswingmotor = findViewById(R.id.addsparecassetteacswingmotor);
        txtsparecassetteacswingmotor = findViewById(R.id.txtsparecassetteacswingmotor);
        sparecassetteacswingmotorrt = findViewById(R.id.sparecassetteacswingmotorrt);
        sparecassetteacswingmotortt = findViewById(R.id.sparecassetteacswingmotortt);
        sparecassetteacswingmotorprogressbar = findViewById(R.id.sparecassetteacswingmotorprogressbar);
        sparecassetteacswingmotorcardview = findViewById(R.id.sparecassetteacswingmotorcardview);

        subsparecassetteacindoorcoil = findViewById(R.id.subsparecassetteacindoorcoil);
        addsparecassetteacindoorcoil = findViewById(R.id.addsparecassetteacindoorcoil);
        txtsparecassetteacindoorcoil = findViewById(R.id.txtsparecassetteacindoorcoil);
        sparecassetteacindoorcoilrt = findViewById(R.id.sparecassetteacindoorcoilrt);
        sparecassetteacindoorcoiltt = findViewById(R.id.sparecassetteacindoorcoiltt);
        sparecassetteacindoorcoilprogressbar = findViewById(R.id.sparecassetteacindoorcoilprogressbar);
        sparecassetteacindoorcoilcardview = findViewById(R.id.sparecassetteacindoorcoilcardview);

        subsparecassetteacoutdoorcondenser = findViewById(R.id.subsparecassetteacoutdoorcondenser);
        addsparecassetteacoutdoorcondenser = findViewById(R.id.addsparecassetteacoutdoorcondenser);
        txtsparecassetteacoutdoorcondenser = findViewById(R.id.txtsparecassetteacoutdoorcondenser);
        sparecassetteacoutdoorcondenserrt = findViewById(R.id.sparecassetteacoutdoorcondenserrt);
        sparecassetteacoutdoorcondensertt = findViewById(R.id.sparecassetteacoutdoorcondensertt);
        sparecassetteacoutdoorcondenserprogressbar = findViewById(R.id.sparecassetteacoutdoorcondenserprogressbar);
        sparecassetteacoutdoorcondensercardview = findViewById(R.id.sparecassetteacoutdoorcondensercardview);

        subsparecassetteacswingflap = findViewById(R.id.subsparecassetteacswingflap);
        addsparecassetteacswingflap = findViewById(R.id.addsparecassetteacswingflap);
        txtsparecassetteacswingflap = findViewById(R.id.txtsparecassetteacswingflap);
        sparecassetteacswingflaprt = findViewById(R.id.sparecassetteacswingflaprt);
        sparecassetteacswingflaptt = findViewById(R.id.sparecassetteacswingflaptt);
        sparecassetteacswingflapprogressbar = findViewById(R.id.sparecassetteacswingflapprogressbar);
        sparecassetteacswingflapcardview = findViewById(R.id.sparecassetteacswingflapcardview);

        subsparecassetteacremote = findViewById(R.id.subsparecassetteacremote);
        addsparecassetteacremote = findViewById(R.id.addsparecassetteacremote);
        txtsparecassetteacremote = findViewById(R.id.txtsparecassetteacremote);
        sparecassetteacremotert = findViewById(R.id.sparecassetteacremotert);
        sparecassetteacremotett = findViewById(R.id.sparecassetteacremotett);
        sparecassetteacremoteprogressbar = findViewById(R.id.sparecassetteacremoteprogressbar);
        sparecassetteacremotecardview = findViewById(R.id.sparecassetteacremotecardview);

        // faults

        // splitac

        subfaultsplitacwaterleak = findViewById(R.id.subfaultsplitacwaterleak);
        addfaultsplitacwaterleak = findViewById(R.id.addfaultsplitacwaterleak);
        txtfaultsplitacwaterleak = findViewById(R.id.txtfaultsplitacwaterleak);
        faultsplitacwaterleakrt = findViewById(R.id.faultsplitacwaterleakrt);
        faultsplitacwaterleaktt = findViewById(R.id.faultsplitacwaterleaktt);
        faultsplitacwaterleakprogressbar = findViewById(R.id.faultsplitacwaterleakprogressbar);
        faultsplitacwaterleakcardview = findViewById(R.id.faultsplitacwaterleakcardview);

        subfaultsplitacgasleak = findViewById(R.id.subfaultsplitacgasleak);
        addfaultsplitacgasleak = findViewById(R.id.addfaultsplitacgasleak);
        txtfaultsplitacgasleak = findViewById(R.id.txtfaultsplitacgasleak);
        faultsplitacgasleakrt = findViewById(R.id.faultsplitacgasleakrt);
        faultsplitacgasleaktt = findViewById(R.id.faultsplitacgasleaktt);
        faultsplitacgasleakprogressbar = findViewById(R.id.faultsplitacgasleakprogressbar);
        faultsplitacgasleakcardview = findViewById(R.id.faultsplitacgasleakcardview);

        subfaultsplitacpcboard = findViewById(R.id.subfaultsplitacpcboard);
        addfaultsplitacpcboard = findViewById(R.id.addfaultsplitacpcboard);
        txtfaultsplitacpcboard = findViewById(R.id.txtfaultsplitacpcboard);
        faultsplitacpcboardrt = findViewById(R.id.faultsplitacpcboardrt);
        faultsplitacpcboardtt = findViewById(R.id.faultsplitacpcboardtt);
        faultsplitacpcboardprogressbar = findViewById(R.id.faultsplitacpcboardprogressbar);
        faultsplitacpcboardcardview = findViewById(R.id.faultsplitacpcboardcardview);

        subfaultsplitacstabilizer = findViewById(R.id.subfaultsplitacstabilizer);
        addfaultsplitacstabilizer = findViewById(R.id.addfaultsplitacstabilizer);
        txtfaultsplitacstabilizer = findViewById(R.id.txtfaultsplitacstabilizer);
        faultsplitacstabilizerrt = findViewById(R.id.faultsplitacstabilizerrt);
        faultsplitacstabilizertt = findViewById(R.id.faultsplitacstabilizertt);
        faultsplitacstabilizerprogressbar = findViewById(R.id.faultsplitacstabilizerprogressbar);
        faultsplitacstabilizercardview = findViewById(R.id.faultsplitacstabilizercardview);

        subfaultsplitacindoorcoil = findViewById(R.id.subfaultsplitacindoorcoil);
        addfaultsplitacindoorcoil = findViewById(R.id.addfaultsplitacindoorcoil);
        txtfaultsplitacindoorcoil = findViewById(R.id.txtfaultsplitacindoorcoil);
        faultsplitacindoorcoilrt = findViewById(R.id.faultsplitacindoorcoilrt);
        faultsplitacindoorcoiltt = findViewById(R.id.faultsplitacindoorcoiltt);
        faultsplitacindoorcoilprogressbar = findViewById(R.id.faultsplitacindoorcoilprogressbar);
        faultsplitacindoorcoilcardview = findViewById(R.id.faultsplitacindoorcoilcardview);

        subfaultsplitacoutdoorcondenser = findViewById(R.id.subfaultsplitacoutdoorcondenser);
        addfaultsplitacoutdoorcondenser = findViewById(R.id.addfaultsplitacoutdoorcondenser);
        txtfaultsplitacoutdoorcondenser = findViewById(R.id.txtfaultsplitacoutdoorcondenser);
        faultsplitacoutdoorcondenserrt = findViewById(R.id.faultsplitacoutdoorcondenserrt);
        faultsplitacoutdoorcondensertt = findViewById(R.id.faultsplitacoutdoorcondensertt);
        faultsplitacoutdoorcondenserprogressbar = findViewById(R.id.faultsplitacoutdoorcondenserprogressbar);
        faultsplitacoutdoorcondensercardview = findViewById(R.id.faultsplitacoutdoorcondensercardview);

        subfaultsplitacremote = findViewById(R.id.subfaultsplitacremote);
        addfaultsplitacremote = findViewById(R.id.addfaultsplitacremote);
        txtfaultsplitacremote = findViewById(R.id.txtfaultsplitacremote);
        faultsplitacremotert = findViewById(R.id.faultsplitacremotert);
        faultsplitacremotett = findViewById(R.id.faultsplitacremotett);
        faultsplitacremoteprogressbar = findViewById(R.id.faultsplitacremoteprogressbar);
        faultsplitacremotecardview = findViewById(R.id.faultsplitacremotecardview);

        // windowac

        subfaultwindowacwaterleak = findViewById(R.id.subfaultwindowacwaterleak);
        addfaultwindowacwaterleak = findViewById(R.id.addfaultwindowacwaterleak);
        txtfaultwindowacwaterleak = findViewById(R.id.txtfaultwindowacwaterleak);
        faultwindowacwaterleakrt = findViewById(R.id.faultwindowacwaterleakrt);
        faultwindowacwaterleaktt = findViewById(R.id.faultwindowacwaterleaktt);
        faultwindowacwaterleakprogressbar = findViewById(R.id.faultwindowacwaterleakprogressbar);
        faultwindowacwaterleakcardview = findViewById(R.id.faultwindowacwaterleakcardview);

        subfaultwindowacgasleak = findViewById(R.id.subfaultwindowacgasleak);
        addfaultwindowacgasleak = findViewById(R.id.addfaultwindowacgasleak);
        txtfaultwindowacgasleak = findViewById(R.id.txtfaultwindowacgasleak);
        faultwindowacgasleakrt = findViewById(R.id.faultwindowacgasleakrt);
        faultwindowacgasleaktt = findViewById(R.id.faultwindowacgasleaktt);
        faultwindowacgasleakprogressbar = findViewById(R.id.faultwindowacgasleakprogressbar);
        faultwindowacgasleakcardview = findViewById(R.id.faultwindowacgasleakcardview);

        subfaultwindowacpcboard = findViewById(R.id.subfaultwindowacpcboard);
        addfaultwindowacpcboard = findViewById(R.id.addfaultwindowacpcboard);
        txtfaultwindowacpcboard = findViewById(R.id.txtfaultwindowacpcboard);
        faultwindowacpcboardrt = findViewById(R.id.faultwindowacpcboardrt);
        faultwindowacpcboardtt = findViewById(R.id.faultwindowacpcboardtt);
        faultwindowacpcboardprogressbar = findViewById(R.id.faultwindowacpcboardprogressbar);
        faultwindowacpcboardcardview = findViewById(R.id.faultwindowacpcboardcardview);

        subfaultwindowacstabilizer = findViewById(R.id.subfaultwindowacstabilizer);
        addfaultwindowacstabilizer = findViewById(R.id.addfaultwindowacstabilizer);
        txtfaultwindowacstabilizer = findViewById(R.id.txtfaultwindowacstabilizer);
        faultwindowacstabilizerrt = findViewById(R.id.faultwindowacstabilizerrt);
        faultwindowacstabilizertt = findViewById(R.id.faultwindowacstabilizertt);
        faultwindowacstabilizerprogressbar = findViewById(R.id.faultwindowacstabilizerprogressbar);
        faultwindowacstabilizercardview = findViewById(R.id.faultwindowacstabilizercardview);

        subfaultwindowacindoorcoil = findViewById(R.id.subfaultwindowacindoorcoil);
        addfaultwindowacindoorcoil = findViewById(R.id.addfaultwindowacindoorcoil);
        txtfaultwindowacindoorcoil = findViewById(R.id.txtfaultwindowacindoorcoil);
        faultwindowacindoorcoilrt = findViewById(R.id.faultwindowacindoorcoilrt);
        faultwindowacindoorcoiltt = findViewById(R.id.faultwindowacindoorcoiltt);
        faultwindowacindoorcoilprogressbar = findViewById(R.id.faultwindowacindoorcoilprogressbar);
        faultwindowacindoorcoilcardview = findViewById(R.id.faultwindowacindoorcoilcardview);

        subfaultwindowacoutdoorcondenser = findViewById(R.id.subfaultwindowacoutdoorcondenser);
        addfaultwindowacoutdoorcondenser = findViewById(R.id.addfaultwindowacoutdoorcondenser);
        txtfaultwindowacoutdoorcondenser = findViewById(R.id.txtfaultwindowacoutdoorcondenser);
        faultwindowacoutdoorcondenserrt = findViewById(R.id.faultwindowacoutdoorcondenserrt);
        faultwindowacoutdoorcondensertt = findViewById(R.id.faultwindowacoutdoorcondensertt);
        faultwindowacoutdoorcondenserprogressbar = findViewById(R.id.faultwindowacoutdoorcondenserprogressbar);
        faultwindowacoutdoorcondensercardview = findViewById(R.id.faultwindowacoutdoorcondensercardview);

        subfaultwindowacremote = findViewById(R.id.subfaultwindowacremote);
        addfaultwindowacremote = findViewById(R.id.addfaultwindowacremote);
        txtfaultwindowacremote = findViewById(R.id.txtfaultwindowacremote);
        faultwindowacremotert = findViewById(R.id.faultwindowacremotert);
        faultwindowacremotett = findViewById(R.id.faultwindowacremotett);
        faultwindowacremoteprogressbar = findViewById(R.id.faultwindowacremoteprogressbar);
        faultwindowacremotecardview = findViewById(R.id.faultwindowacremotecardview);

        // cassetteac

        subfaultcassetteacwaterleak = findViewById(R.id.subfaultcassetteacwaterleak);
        addfaultcassetteacwaterleak = findViewById(R.id.addfaultcassetteacwaterleak);
        txtfaultcassetteacwaterleak = findViewById(R.id.txtfaultcassetteacwaterleak);
        faultcassetteacwaterleakrt = findViewById(R.id.faultcassetteacwaterleakrt);
        faultcassetteacwaterleaktt = findViewById(R.id.faultcassetteacwaterleaktt);
        faultcassetteacwaterleakprogressbar = findViewById(R.id.faultcassetteacwaterleakprogressbar);
        faultcassetteacwaterleakcardview = findViewById(R.id.faultcassetteacwaterleakcardview);

        subfaultcassetteacgasleak = findViewById(R.id.subfaultcassetteacgasleak);
        addfaultcassetteacgasleak = findViewById(R.id.addfaultcassetteacgasleak);
        txtfaultcassetteacgasleak = findViewById(R.id.txtfaultcassetteacgasleak);
        faultcassetteacgasleakrt = findViewById(R.id.faultcassetteacgasleakrt);
        faultcassetteacgasleaktt = findViewById(R.id.faultcassetteacgasleaktt);
        faultcassetteacgasleakprogressbar = findViewById(R.id.faultcassetteacgasleakprogressbar);
        faultcassetteacgasleakcardview = findViewById(R.id.faultcassetteacgasleakcardview);

        subfaultcassetteacpcboard = findViewById(R.id.subfaultcassetteacpcboard);
        addfaultcassetteacpcboard = findViewById(R.id.addfaultcassetteacpcboard);
        txtfaultcassetteacpcboard = findViewById(R.id.txtfaultcassetteacpcboard);
        faultcassetteacpcboardrt = findViewById(R.id.faultcassetteacpcboardrt);
        faultcassetteacpcboardtt = findViewById(R.id.faultcassetteacpcboardtt);
        faultcassetteacpcboardprogressbar = findViewById(R.id.faultcassetteacpcboardprogressbar);
        faultcassetteacpcboardcardview = findViewById(R.id.faultcassetteacpcboardcardview);

        subfaultcassetteacstabilizer = findViewById(R.id.subfaultcassetteacstabilizer);
        addfaultcassetteacstabilizer = findViewById(R.id.addfaultcassetteacstabilizer);
        txtfaultcassetteacstabilizer = findViewById(R.id.txtfaultcassetteacstabilizer);
        faultcassetteacstabilizerrt = findViewById(R.id.faultcassetteacstabilizerrt);
        faultcassetteacstabilizertt = findViewById(R.id.faultcassetteacstabilizertt);
        faultcassetteacstabilizerprogressbar = findViewById(R.id.faultcassetteacstabilizerprogressbar);
        faultcassetteacstabilizercardview = findViewById(R.id.faultcassetteacstabilizercardview);

        subfaultcassetteacindoorcoil = findViewById(R.id.subfaultcassetteacindoorcoil);
        addfaultcassetteacindoorcoil = findViewById(R.id.addfaultcassetteacindoorcoil);
        txtfaultcassetteacindoorcoil = findViewById(R.id.txtfaultcassetteacindoorcoil);
        faultcassetteacindoorcoilrt = findViewById(R.id.faultcassetteacindoorcoilrt);
        faultcassetteacindoorcoiltt = findViewById(R.id.faultcassetteacindoorcoiltt);
        faultcassetteacindoorcoilprogressbar = findViewById(R.id.faultcassetteacindoorcoilprogressbar);
        faultcassetteacindoorcoilcardview = findViewById(R.id.faultcassetteacindoorcoilcardview);

        subfaultcassetteacoutdoorcondenser = findViewById(R.id.subfaultcassetteacoutdoorcondenser);
        addfaultcassetteacoutdoorcondenser = findViewById(R.id.addfaultcassetteacoutdoorcondenser);
        txtfaultcassetteacoutdoorcondenser = findViewById(R.id.txtfaultcassetteacoutdoorcondenser);
        faultcassetteacoutdoorcondenserrt = findViewById(R.id.faultcassetteacoutdoorcondenserrt);
        faultcassetteacoutdoorcondensertt = findViewById(R.id.faultcassetteacoutdoorcondensertt);
        faultcassetteacoutdoorcondenserprogressbar = findViewById(R.id.faultcassetteacoutdoorcondenserprogressbar);
        faultcassetteacoutdoorcondensercardview = findViewById(R.id.faultcassetteacoutdoorcondensercardview);

        subfaultcassetteacremote = findViewById(R.id.subfaultcassetteacremote);
        addfaultcassetteacremote = findViewById(R.id.addfaultcassetteacremote);
        txtfaultcassetteacremote = findViewById(R.id.txtfaultcassetteacremote);
        faultcassetteacremotert = findViewById(R.id.faultcassetteacremotert);
        faultcassetteacremotett = findViewById(R.id.faultcassetteacremotett);
        faultcassetteacremoteprogressbar = findViewById(R.id.faultcassetteacremoteprogressbar);
        faultcassetteacremotecardview = findViewById(R.id.faultcassetteacremotecardview);

        // installation and uninstallation

        //splitac
        subsplitacinstall = findViewById(R.id.subsplitacinstall);
        addsplitacinstall = findViewById(R.id.addsplitacinstall);
        txtsplitacinstall = findViewById(R.id.txtsplitacinstall);
        splitacinstallrt = findViewById(R.id.splitacinstallrt);
        splitacinstalltt = findViewById(R.id.splitacinstalltt);
        splitacinstallprogressbar = findViewById(R.id.splitacinstallprogressbar);
        splitacinstallcardview = findViewById(R.id.splitacinstallcardview);

        subsplitacuninstall = findViewById(R.id.subsplitacuninstall);
        addsplitacuninstall = findViewById(R.id.addsplitacuninstall);
        txtsplitacuninstall = findViewById(R.id.txtsplitacuninstall);
        splitacuninstallrt = findViewById(R.id.splitacuninstallrt);
        splitacuninstalltt = findViewById(R.id.splitacuninstalltt);
        splitacuninstallprogressbar = findViewById(R.id.splitacuninstallprogressbar);
        splitacuninstallcardview = findViewById(R.id.splitacuninstallcardview);

        subsplitaccombo = findViewById(R.id.subsplitaccombo);
        addsplitaccombo = findViewById(R.id.addsplitaccombo);
        txtsplitaccombo = findViewById(R.id.txtsplitaccombo);
        splitaccombort = findViewById(R.id.splitaccombort);
        splitaccombott = findViewById(R.id.splitaccombott);
        splitaccomboprogressbar = findViewById(R.id.splitaccomboprogressbar);
        splitaccombocardview = findViewById(R.id.splitaccombocardview);


        //windowac
        subwindowacinstall = findViewById(R.id.subwindowacinstall);
        addwindowacinstall = findViewById(R.id.addwindowacinstall);
        txtwindowacinstall = findViewById(R.id.txtwindowacinstall);
        windowacinstallrt = findViewById(R.id.windowacinstallrt);
        windowacinstalltt = findViewById(R.id.windowacinstalltt);
        windowacinstallprogressbar = findViewById(R.id.windowacinstallprogressbar);
        windowacinstallcardview = findViewById(R.id.windowacinstallcardview);

        subwindowacuninstall = findViewById(R.id.subwindowacuninstall);
        addwindowacuninstall = findViewById(R.id.addwindowacuninstall);
        txtwindowacuninstall = findViewById(R.id.txtwindowacuninstall);
        windowacuninstallrt = findViewById(R.id.windowacuninstallrt);
        windowacuninstalltt = findViewById(R.id.windowacuninstalltt);
        windowacuninstallprogressbar = findViewById(R.id.windowacuninstallprogressbar);
        windowacuninstallcardview = findViewById(R.id.windowacuninstallcardview);

        subwindowaccombo = findViewById(R.id.subwindowaccombo);
        addwindowaccombo = findViewById(R.id.addwindowaccombo);
        txtwindowaccombo = findViewById(R.id.txtwindowaccombo);
        windowaccombort = findViewById(R.id.windowaccombort);
        windowaccombott = findViewById(R.id.windowaccombott);
        windowaccomboprogressbar = findViewById(R.id.windowaccomboprogressbar);
        windowaccombocardview = findViewById(R.id.windowaccombocardview);

        //cassetteac
        subcassetteacinstall = findViewById(R.id.subcassetteacinstall);
        addcassetteacinstall = findViewById(R.id.addcassetteacinstall);
        txtcassetteacinstall = findViewById(R.id.txtcassetteacinstall);
        cassetteacinstallrt = findViewById(R.id.cassetteacinstallrt);
        cassetteacinstalltt = findViewById(R.id.cassetteacinstalltt);
        cassetteacinstallprogressbar = findViewById(R.id.cassetteacinstallprogressbar);
        cassetteacinstallcardview = findViewById(R.id.cassetteacinstallcardview);

        subcassetteacuninstall = findViewById(R.id.subcassetteacuninstall);
        addcassetteacuninstall = findViewById(R.id.addcassetteacuninstall);
        txtcassetteacuninstall = findViewById(R.id.txtcassetteacuninstall);
        cassetteacuninstallrt = findViewById(R.id.cassetteacuninstallrt);
        cassetteacuninstalltt = findViewById(R.id.cassetteacuninstalltt);
        cassetteacuninstallprogressbar = findViewById(R.id.cassetteacuninstallprogressbar);
        cassetteacuninstallcardview = findViewById(R.id.cassetteacuninstallcardview);

        subcassetteaccombo = findViewById(R.id.subcassetteaccombo);
        addcassetteaccombo = findViewById(R.id.addcassetteaccombo);
        txtcassetteaccombo = findViewById(R.id.txtcassetteaccombo);
        cassetteaccombort = findViewById(R.id.cassetteaccombort);
        cassetteaccombott = findViewById(R.id.cassetteaccombott);
        cassetteaccomboprogressbar = findViewById(R.id.cassetteaccomboprogressbar);
        cassetteaccombocardview = findViewById(R.id.cassetteaccombocardview);


        frontloadingpage = findViewById(R.id.frontloadingpage);
        placelocation = findViewById(R.id.placelocation);

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        placelocation.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(summary.this, Booking.class);
                intent.putExtra("payment",payment);
                startActivity(intent);
                finish();
            }
        });


        // general service

        gsaddsplit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                gssplitacprogressbar.setVisibility(View.VISIBLE);
                gssplitquantity("add");
                totalquantity("add");
                gssplitprice("add", gssplitacprice-disgssplitacprice);
                totalprice1("add", gssplitacprice-disgssplitacprice,disgssplitacprice,"SplitAC");
                totalsaved1("add",disgssplitacprice,"SplitAC");
                btn("false");
            }
        });
        gssubsplit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                gssplitacprogressbar.setVisibility(View.VISIBLE);
                gssplitquantity("sub");
                totalquantity("sub");
                gssplitprice("sub", gssplitacprice-disgssplitacprice);
                totalprice1("sub", gssplitacprice-disgssplitacprice,disgssplitacprice,"SplitAC");
                totalsaved1("sub",disgssplitacprice,"SplitAC");
                btn("false");
            }
        });

        gsaddwindow.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                gswindowacprogressbar.setVisibility(View.VISIBLE);
                gswindowquantity("add");
                totalquantity("add");
                gswindowprice("add", gswindowacprice-disgswindowacprice);
                totalprice1("add", gswindowacprice-disgswindowacprice,disgswindowacprice,"WindowAC");
                totalsaved1("add",disgswindowacprice,"WindowAC");
                btn("false");
            }
        });
        gssubwindow.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                gswindowacprogressbar.setVisibility(View.VISIBLE);
                gswindowquantity("sub");
                totalquantity("sub");
                gswindowprice("sub", gswindowacprice-disgswindowacprice);
                totalprice1("sub", gswindowacprice-disgswindowacprice,disgswindowacprice,"WindowAC");
                totalsaved1("sub",disgswindowacprice,"WindowAC");
                btn("false");
            }
        });

        gsaddcassette.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                gscassetteacprogressbar.setVisibility(View.VISIBLE);
                gscassettequantity("add");
                totalquantity("add");
                gscassetteprice("add", gscassetteacprice-disgscassetteacprice);
                totalprice1("add", gscassetteacprice-disgscassetteacprice,disgscassetteacprice,"CassetteAC");
                totalsaved1("add",disgscassetteacprice,"CassetteAC");
                btn("false");
            }
        });
        gssubcassette.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                gscassetteacprogressbar.setVisibility(View.VISIBLE);
                gscassettequantity("sub");
                totalquantity("sub");
                gscassetteprice("sub", gscassetteacprice-disgscassetteacprice);
                totalprice1("sub", gscassetteacprice-disgscassetteacprice,disgscassetteacprice,"CassetteAC");
                totalsaved1("sub",disgscassetteacprice,"CassetteAC");
                btn("false");
            }
        });


        // water wash

        wwaddsplitss.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                wwsplitssacprogressbar.setVisibility(View.VISIBLE);
                wwsplitssquantity("add");
                totalquantity("add");
                wwsplitssprice("add", wwsplitssacprice-diswwsplitssacprice);
                totalprice2("add", wwsplitssacprice-diswwsplitssacprice,diswwsplitssacprice,"SplitSSAC");
                totalsaved2("add",diswwsplitssacprice,"SplitSSAC");
                btn("false");
            }
        });
        wwsubsplitss.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                wwsplitssacprogressbar.setVisibility(View.VISIBLE);
                wwsplitssquantity("sub");
                totalquantity("sub");
                wwsplitssprice("sub", wwsplitssacprice-diswwsplitssacprice);
                totalprice2("sub", wwsplitssacprice-diswwsplitssacprice,diswwsplitssacprice,"SplitSSAC");
                totalsaved2("sub",diswwsplitssacprice,"SplitSSAC");
                btn("false");
            }
        });

        wwaddwindowss.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                wwwindowssacprogressbar.setVisibility(View.VISIBLE);
                wwwindowssquantity("add");
                totalquantity("add");
                wwwindowssprice("add", wwwindowssacprice-diswwwindowssacprice);
                totalprice2("add", wwwindowssacprice-diswwwindowssacprice,diswwwindowssacprice,"WindowSSAC");
                totalsaved2("add",diswwwindowssacprice,"WindowSSAC");
                btn("false");
            }
        });
        wwsubwindowss.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                wwwindowssacprogressbar.setVisibility(View.VISIBLE);
                wwwindowssquantity("sub");
                totalquantity("sub");
                wwwindowssprice("sub", wwwindowssacprice-diswwwindowssacprice);
                totalprice2("sub", wwwindowssacprice-diswwwindowssacprice,diswwwindowssacprice,"WindowSSAC");
                totalsaved2("sub",diswwwindowssacprice,"WindowSSAC");
                btn("false");
            }
        });

        wwaddcassettess.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                wwcassettessacprogressbar.setVisibility(View.VISIBLE);
                wwcassettessquantity("add");
                totalquantity("add");
                wwcassettessprice("add", wwcassettessacprice-diswwcassettessacprice);
                totalprice2("add", wwcassettessacprice-diswwcassettessacprice,diswwcassettessacprice,"CassetteSSAC");
                totalsaved2("add",diswwcassettessacprice,"CassetteSSAC");
                btn("false");
            }
        });
        wwsubcassettess.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                wwcassettessacprogressbar.setVisibility(View.VISIBLE);
                wwcassettessquantity("sub");
                totalquantity("sub");
                wwcassettessprice("sub", wwcassettessacprice-diswwcassettessacprice);
                totalprice2("sub", wwcassettessacprice-diswwcassettessacprice,diswwcassettessacprice,"CassetteSSAC");
                totalsaved2("sub",diswwcassettessacprice,"CassetteSSAC");
                btn("false");
            }
        });

        wwaddsplit360.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                wwsplit360acprogressbar.setVisibility(View.VISIBLE);
                wwsplit360quantity("add");
                totalquantity("add");
                wwsplit360price("add", wwsplit360acprice-diswwsplit360acprice);
                totalprice2("add", wwsplit360acprice-diswwsplit360acprice,diswwsplit360acprice,"Split360AC");
                totalsaved2("add",diswwsplit360acprice,"Split360AC");
                btn("false");
            }
        });
        wwsubsplit360.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                wwsplit360quantity("sub");
                totalquantity("sub");
                wwsplit360price("sub", wwsplit360acprice-diswwsplit360acprice);
                totalprice2("sub", wwsplit360acprice-diswwsplit360acprice,diswwsplit360acprice,"Split360AC");
                totalsaved2("sub",diswwsplit360acprice,"Split360AC");
                btn("false");
            }
        });

        wwaddcassette360.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                wwcassette360acprogressbar.setVisibility(View.VISIBLE);
                wwcassette360quantity("add");
                totalquantity("add");
                wwcassette360price("add", wwcassette360acprice-diswwcassette360acprice);
                totalprice2("add", wwcassette360acprice-diswwcassette360acprice,diswwcassette360acprice,"Cassette360AC");
                totalsaved2("add",diswwcassette360acprice,"Cassette360AC");
                btn("false");
            }
        });
        wwsubcassette360.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                wwcassette360acprogressbar.setVisibility(View.VISIBLE);
                wwcassette360quantity("sub");
                totalquantity("sub");
                wwcassette360price("sub", wwcassette360acprice-diswwcassette360acprice);
                totalprice2("sub", wwcassette360acprice-diswwcassette360acprice,diswwcassette360acprice,"Cassette360AC");
                totalsaved2("sub",diswwcassette360acprice,"Cassette360AC");
                btn("false");
            }
        });


        // AMC

        //splitac
//
//        // SCHEME 1
//
        amcsplitscheme1withsparetotaladd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme1withsparetotalprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme1withsparetotalsparequantity("add");
                totalquantity("add");
                amcsplitscheme1withsparetotalspareprice("add", amcsplitscheme1withsparetotalprice-disamcsplitscheme1withsparetotalprice);
                totalprice3ss1("add", amcsplitscheme1withsparetotalprice-disamcsplitscheme1withsparetotalprice,disamcsplitscheme1withsparetotalprice,"Totalspare");
                totalsaved3ss1("add",disamcsplitscheme1withsparetotalprice,"Totalspare");
                btn("false");
            }
        });
        amcsplitscheme1withsparetotalsub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme1withsparetotalprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme1withsparetotalsparequantity("sub");
                totalquantity("sub");
                amcsplitscheme1withsparetotalspareprice("sub", amcsplitscheme1withsparetotalprice-disamcsplitscheme1withsparetotalprice);
                totalprice3ss1("sub", amcsplitscheme1withsparetotalprice-disamcsplitscheme1withsparetotalprice,disamcsplitscheme1withsparetotalprice,"Totalspare");
                totalsaved3ss1("sub",disamcsplitscheme1withsparetotalprice,"Totalspare");
                btn("false");
            }
        });

        amcsplitscheme1withsparelimitedadd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme1withsparelimitedprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme1withsparelimitedsparequantity("add");
                totalquantity("add");
                amcsplitscheme1withsparelimitedspareprice("add", amcsplitscheme1withsparelimitedprice-disamcsplitscheme1withsparelimitedprice);
                totalprice3ss1("add", amcsplitscheme1withsparelimitedprice-disamcsplitscheme1withsparelimitedprice,disamcsplitscheme1withsparelimitedprice,"Limitedspare");
                totalsaved3ss1("add",disamcsplitscheme1withsparelimitedprice,"Limitedspare");
                btn("false");
            }
        });
        amcsplitscheme1withsparelimitedsub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme1withsparelimitedprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme1withsparelimitedsparequantity("sub");
                totalquantity("sub");
                amcsplitscheme1withsparelimitedspareprice("sub", amcsplitscheme1withsparelimitedprice-disamcsplitscheme1withsparelimitedprice);
                totalprice3ss1("sub", amcsplitscheme1withsparelimitedprice-disamcsplitscheme1withsparelimitedprice,disamcsplitscheme1withsparelimitedprice,"Limitedspare");
                totalsaved3ss1("sub",disamcsplitscheme1withsparelimitedprice,"Limitedspare");
                btn("false");
            }
        });

        amcsplitscheme1withsparenoadd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme1withsparenoprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme1withsparenosparequantity("add");
                totalquantity("add");
                amcsplitscheme1withsparenospareprice("add", amcsplitscheme1withsparenoprice-disamcsplitscheme1withsparenoprice);
                totalprice3ss11("add", amcsplitscheme1withsparenoprice-disamcsplitscheme1withsparenoprice,disamcsplitscheme1withsparenoprice,"Nospare");
                totalsaved3ss11("add",disamcsplitscheme1withsparenoprice,"Nospare");
                btn("false");
            }
        });
        amcsplitscheme1withsparenosub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme1withsparenoprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme1withsparenosparequantity("sub");
                totalquantity("sub");
                amcsplitscheme1withsparenospareprice("sub", amcsplitscheme1withsparenoprice-disamcsplitscheme1withsparenoprice);
                totalprice3ss11("sub", amcsplitscheme1withsparenoprice-disamcsplitscheme1withsparenoprice,disamcsplitscheme1withsparenoprice,"Nospare");
                totalsaved3ss11("sub",disamcsplitscheme1withsparenoprice,"Nospare");
                btn("false");
            }
        });

        // SCHEME 2

        amcsplitscheme2withsparetotaladd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme2withsparetotalprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme2withsparetotalsparequantity("add");
                totalquantity("add");
                amcsplitscheme2withsparetotalspareprice("add", amcsplitscheme2withsparetotalprice-disamcsplitscheme2withsparetotalprice);
                totalprice3ss2("add", amcsplitscheme2withsparetotalprice-disamcsplitscheme2withsparetotalprice,disamcsplitscheme2withsparetotalprice,"Totalspare");
                totalsaved3ss2("add",disamcsplitscheme2withsparetotalprice,"Totalspare");
                btn("false");
            }
        });
        amcsplitscheme2withsparetotalsub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme2withsparetotalprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme2withsparetotalsparequantity("sub");
                totalquantity("sub");
                amcsplitscheme2withsparetotalspareprice("sub", amcsplitscheme2withsparetotalprice-disamcsplitscheme2withsparetotalprice);
                totalprice3ss2("sub", amcsplitscheme2withsparetotalprice-disamcsplitscheme2withsparetotalprice,disamcsplitscheme2withsparetotalprice,"Totalspare");
                totalsaved3ss2("sub",disamcsplitscheme2withsparetotalprice,"Totalspare");
                btn("false");
            }
        });

        amcsplitscheme2withsparelimitedadd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme2withsparelimitedprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme2withsparelimitedsparequantity("add");
                totalquantity("add");
                amcsplitscheme2withsparelimitedspareprice("add", amcsplitscheme2withsparelimitedprice-disamcsplitscheme2withsparelimitedprice);
                totalprice3ss2("add", amcsplitscheme2withsparelimitedprice-disamcsplitscheme2withsparelimitedprice,disamcsplitscheme2withsparelimitedprice,"Limitedspare");
                totalsaved3ss2("add",disamcsplitscheme2withsparelimitedprice,"Limitedspare");
                btn("false");
            }
        });
        amcsplitscheme2withsparelimitedsub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme2withsparelimitedprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme2withsparelimitedsparequantity("sub");
                totalquantity("sub");
                amcsplitscheme2withsparelimitedspareprice("sub", amcsplitscheme2withsparelimitedprice-disamcsplitscheme2withsparelimitedprice);
                totalprice3ss2("sub", amcsplitscheme2withsparelimitedprice-disamcsplitscheme2withsparelimitedprice,disamcsplitscheme2withsparelimitedprice,"Limitedspare");
                totalsaved3ss2("sub",disamcsplitscheme2withsparelimitedprice,"Limitedspare");
                btn("false");
            }
        });

        amcsplitscheme2withsparenoadd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme2withsparenoprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme2withsparenosparequantity("add");
                totalquantity("add");
                amcsplitscheme2withsparenospareprice("add", amcsplitscheme2withsparenoprice-disamcsplitscheme2withsparenoprice);
                totalprice3ss21("add", amcsplitscheme2withsparenoprice-disamcsplitscheme2withsparenoprice,disamcsplitscheme2withsparenoprice,"Nospare");
                totalsaved3ss21("add",disamcsplitscheme2withsparenoprice,"Nospare");
                btn("false");
            }
        });
        amcsplitscheme2withsparenosub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme2withsparenoprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme2withsparenosparequantity("sub");
                totalquantity("sub");
                amcsplitscheme2withsparenospareprice("sub", amcsplitscheme2withsparenoprice-disamcsplitscheme2withsparenoprice);
                totalprice3ss21("sub", amcsplitscheme2withsparenoprice-disamcsplitscheme2withsparenoprice,disamcsplitscheme2withsparenoprice,"Nospare");
                totalsaved3ss21("sub",disamcsplitscheme2withsparenoprice,"Nospare");
                btn("false");
            }
        });

        // SCHEME 3

        amcsplitscheme3withsparetotaladd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme3withsparetotalprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme3withsparetotalsparequantity("add");
                totalquantity("add");
                amcsplitscheme3withsparetotalspareprice("add", amcsplitscheme3withsparetotalprice-disamcsplitscheme3withsparetotalprice);
                totalprice3ss3("add", amcsplitscheme3withsparetotalprice-disamcsplitscheme3withsparetotalprice,disamcsplitscheme3withsparetotalprice,"Totalspare");
                totalsaved3ss3("add",disamcsplitscheme3withsparetotalprice,"Totalspare");
                btn("false");
            }
        });
        amcsplitscheme3withsparetotalsub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme3withsparetotalprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme3withsparetotalsparequantity("sub");
                totalquantity("sub");
                amcsplitscheme3withsparetotalspareprice("sub", amcsplitscheme3withsparetotalprice-disamcsplitscheme3withsparetotalprice);
                totalprice3ss3("sub", amcsplitscheme3withsparetotalprice-disamcsplitscheme3withsparetotalprice,disamcsplitscheme3withsparetotalprice,"Totalspare");
                totalsaved3ss3("sub",disamcsplitscheme3withsparetotalprice,"Totalspare");
                btn("false");
            }
        });

        amcsplitscheme3withsparelimitedadd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme3withsparelimitedprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme3withsparelimitedsparequantity("add");
                totalquantity("add");
                amcsplitscheme3withsparelimitedspareprice("add", amcsplitscheme3withsparelimitedprice-disamcsplitscheme3withsparelimitedprice);
                totalprice3ss3("add", amcsplitscheme3withsparelimitedprice-disamcsplitscheme3withsparelimitedprice,disamcsplitscheme3withsparelimitedprice,"Limitedspare");
                totalsaved3ss3("add",disamcsplitscheme3withsparelimitedprice,"Limitedspare");
                btn("false");
            }
        });
        amcsplitscheme3withsparelimitedsub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme3withsparelimitedprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme3withsparelimitedsparequantity("sub");
                totalquantity("sub");
                amcsplitscheme3withsparelimitedspareprice("sub", amcsplitscheme3withsparelimitedprice-disamcsplitscheme3withsparelimitedprice);
                totalprice3ss3("sub", amcsplitscheme3withsparelimitedprice-disamcsplitscheme3withsparelimitedprice,disamcsplitscheme3withsparelimitedprice,"Limitedspare");
                totalsaved3ss3("sub",disamcsplitscheme3withsparelimitedprice,"Limitedspare");
                btn("false");
            }
        });

        amcsplitscheme3withsparenoadd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme3withsparenoprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme3withsparenosparequantity("add");
                totalquantity("add");
                amcsplitscheme3withsparenospareprice("add", amcsplitscheme3withsparenoprice-disamcsplitscheme3withsparenoprice);
                totalprice3ss31("add", amcsplitscheme3withsparenoprice-disamcsplitscheme3withsparenoprice,disamcsplitscheme3withsparenoprice,"Nospare");
                totalsaved3ss31("add",disamcsplitscheme3withsparenoprice,"Nospare");
                btn("false");
            }
        });
        amcsplitscheme3withsparenosub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcsplitscheme3withsparenoprogressbar.setVisibility(View.VISIBLE);
                amcsplitscheme3withsparenosparequantity("sub");
                totalquantity("sub");
                amcsplitscheme3withsparenospareprice("sub", amcsplitscheme3withsparenoprice-disamcsplitscheme3withsparenoprice);
                totalprice3ss31("sub", amcsplitscheme3withsparenoprice-disamcsplitscheme3withsparenoprice,disamcsplitscheme3withsparenoprice,"Nospare");
                totalsaved3ss31("sub",disamcsplitscheme3withsparenoprice,"Nospare");
                btn("false");
            }
        });

        //windowac
//
//        // SCHEME 1
//
        amcwindowscheme1withsparetotaladd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcwindowscheme1withsparetotalprogressbar.setVisibility(View.VISIBLE);
                amcwindowscheme1withsparetotalsparequantity("add");
                totalquantity("add");
                amcwindowscheme1withsparetotalspareprice("add", amcwindowscheme1withsparetotalprice-disamcwindowscheme1withsparetotalprice);
                totalprice3ws1("add", amcwindowscheme1withsparetotalprice-disamcwindowscheme1withsparetotalprice,disamcwindowscheme1withsparetotalprice,"Totalspare");
                totalsaved3ws1("add",disamcwindowscheme1withsparetotalprice,"Totalspare");
                btn("false");
            }
        });
        amcwindowscheme1withsparetotalsub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcwindowscheme1withsparetotalprogressbar.setVisibility(View.VISIBLE);
                amcwindowscheme1withsparetotalsparequantity("sub");
                totalquantity("sub");
                amcwindowscheme1withsparetotalspareprice("sub", amcwindowscheme1withsparetotalprice-disamcwindowscheme1withsparetotalprice);
                totalprice3ws1("sub", amcwindowscheme1withsparetotalprice-disamcwindowscheme1withsparetotalprice,disamcwindowscheme1withsparetotalprice,"Totalspare");
                totalsaved3ws1("sub",disamcwindowscheme1withsparetotalprice,"Totalspare");
                btn("false");
            }
        });

        amcwindowscheme1withsparelimitedadd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcwindowscheme1withsparelimitedprogressbar.setVisibility(View.VISIBLE);
                amcwindowscheme1withsparelimitedsparequantity("add");
                totalquantity("add");
                amcwindowscheme1withsparelimitedspareprice("add", amcwindowscheme1withsparelimitedprice-disamcwindowscheme1withsparelimitedprice);
                totalprice3ws1("add", amcwindowscheme1withsparelimitedprice-disamcwindowscheme1withsparelimitedprice,disamcwindowscheme1withsparelimitedprice,"Limitedspare");
                totalsaved3ws1("add",disamcwindowscheme1withsparelimitedprice,"Limitedspare");
                btn("false");
            }
        });
        amcwindowscheme1withsparelimitedsub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcwindowscheme1withsparelimitedprogressbar.setVisibility(View.VISIBLE);
                amcwindowscheme1withsparelimitedsparequantity("sub");
                totalquantity("sub");
                amcwindowscheme1withsparelimitedspareprice("sub", amcwindowscheme1withsparelimitedprice-disamcwindowscheme1withsparelimitedprice);
                totalprice3ws1("sub", amcwindowscheme1withsparelimitedprice-disamcwindowscheme1withsparelimitedprice,disamcwindowscheme1withsparelimitedprice,"Limitedspare");
                totalsaved3ws1("sub",disamcwindowscheme1withsparelimitedprice,"Limitedspare");
                btn("false");
            }
        });

        amcwindowscheme1withsparenoadd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcwindowscheme1withsparenoprogressbar.setVisibility(View.VISIBLE);
                amcwindowscheme1withsparenosparequantity("add");
                totalquantity("add");
                amcwindowscheme1withsparenospareprice("add", amcwindowscheme1withsparenoprice-disamcwindowscheme1withsparenoprice);
                totalprice3ws11("add", amcwindowscheme1withsparenoprice-disamcwindowscheme1withsparenoprice,disamcwindowscheme1withsparenoprice,"Nospare");
                totalsaved3ws11("add",disamcwindowscheme1withsparenoprice,"Nospare");
                btn("false");
            }
        });
        amcwindowscheme1withsparenosub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcwindowscheme1withsparenoprogressbar.setVisibility(View.VISIBLE);
                amcwindowscheme1withsparenosparequantity("sub");
                totalquantity("sub");
                amcwindowscheme1withsparenospareprice("sub", amcwindowscheme1withsparenoprice-disamcwindowscheme1withsparenoprice);
                totalprice3ws11("sub", amcwindowscheme1withsparenoprice-disamcwindowscheme1withsparenoprice,disamcwindowscheme1withsparenoprice,"Nospare");
                totalsaved3ws11("sub",disamcwindowscheme1withsparenoprice,"Nospare");
                btn("false");
            }
        });

        // SCHEME 2

        amcwindowscheme2withsparetotaladd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcwindowscheme2withsparetotalprogressbar.setVisibility(View.VISIBLE);
                amcwindowscheme2withsparetotalsparequantity("add");
                totalquantity("add");
                amcwindowscheme2withsparetotalspareprice("add", amcwindowscheme2withsparetotalprice-disamcwindowscheme2withsparetotalprice);
                totalprice3ws2("add", amcwindowscheme2withsparetotalprice-disamcwindowscheme2withsparetotalprice,disamcwindowscheme2withsparetotalprice,"Totalspare");
                totalsaved3ws2("add",disamcwindowscheme2withsparetotalprice,"Totalspare");
                btn("false");
            }
        });
        amcwindowscheme2withsparetotalsub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcwindowscheme2withsparetotalprogressbar.setVisibility(View.VISIBLE);
                amcwindowscheme2withsparetotalsparequantity("sub");
                totalquantity("sub");
                amcwindowscheme2withsparetotalspareprice("sub", amcwindowscheme2withsparetotalprice-disamcwindowscheme2withsparetotalprice);
                totalprice3ws2("sub", amcwindowscheme2withsparetotalprice-disamcwindowscheme2withsparetotalprice,disamcwindowscheme2withsparetotalprice,"Totalspare");
                totalsaved3ws2("sub",disamcwindowscheme2withsparetotalprice,"Totalspare");
                btn("false");
            }
        });

        amcwindowscheme2withsparelimitedadd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcwindowscheme2withsparelimitedprogressbar.setVisibility(View.VISIBLE);
                amcwindowscheme2withsparelimitedsparequantity("add");
                totalquantity("add");
                amcwindowscheme2withsparelimitedspareprice("add", amcwindowscheme2withsparelimitedprice-disamcwindowscheme2withsparelimitedprice);
                totalprice3ws2("add", amcwindowscheme2withsparelimitedprice-disamcwindowscheme2withsparelimitedprice,disamcwindowscheme2withsparelimitedprice,"Limitedspare");
                totalsaved3ws2("add",disamcwindowscheme2withsparelimitedprice,"Limitedspare");
                btn("false");
            }
        });
        amcwindowscheme2withsparelimitedsub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcwindowscheme2withsparelimitedprogressbar.setVisibility(View.VISIBLE);
                amcwindowscheme2withsparelimitedsparequantity("sub");
                totalquantity("sub");
                amcwindowscheme2withsparelimitedspareprice("sub", amcwindowscheme2withsparelimitedprice-disamcwindowscheme2withsparelimitedprice);
                totalprice3ws2("sub", amcwindowscheme2withsparelimitedprice-disamcwindowscheme2withsparelimitedprice,disamcwindowscheme2withsparelimitedprice,"Limitedspare");
                totalsaved3ws2("sub",disamcwindowscheme2withsparelimitedprice,"Limitedspare");
                btn("false");
            }
        });

        amcwindowscheme2withsparenoadd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcwindowscheme2withsparenoprogressbar.setVisibility(View.VISIBLE);
                amcwindowscheme2withsparenosparequantity("add");
                totalquantity("add");
                amcwindowscheme2withsparenospareprice("add", amcwindowscheme2withsparenoprice-disamcwindowscheme2withsparenoprice);
                totalprice3ws21("add", amcwindowscheme2withsparenoprice-disamcwindowscheme2withsparenoprice,disamcwindowscheme2withsparenoprice,"Nospare");
                totalsaved3ws21("add",disamcwindowscheme2withsparenoprice,"Nospare");
                btn("false");
            }
        });
        amcwindowscheme2withsparenosub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amcwindowscheme2withsparenoprogressbar.setVisibility(View.VISIBLE);
                amcwindowscheme2withsparenosparequantity("sub");
                totalquantity("sub");
                amcwindowscheme2withsparenospareprice("sub", amcwindowscheme2withsparenoprice-disamcwindowscheme2withsparenoprice);
                totalprice3ws21("sub", amcwindowscheme2withsparenoprice-disamcwindowscheme2withsparenoprice,disamcwindowscheme2withsparenoprice,"Nospare");
                totalsaved3ws21("sub",disamcwindowscheme2withsparenoprice,"Nospare");
                btn("false");
            }
        });

        //cassetteac
//
//        // SCHEME 1
//
        amccassettescheme1withsparetotaladd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amccassettescheme1withsparetotalprogressbar.setVisibility(View.VISIBLE);
                amccassettescheme1withsparetotalsparequantity("add");
                totalquantity("add");
                amccassettescheme1withsparetotalspareprice("add", amccassettescheme1withsparetotalprice-disamccassettescheme1withsparetotalprice);
                totalprice3cs1("add", amccassettescheme1withsparetotalprice-disamccassettescheme1withsparetotalprice,disamccassettescheme1withsparetotalprice,"Totalspare");
                totalsaved3cs1("add",disamccassettescheme1withsparetotalprice,"Totalspare");
                btn("false");
            }
        });
        amccassettescheme1withsparetotalsub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amccassettescheme1withsparetotalprogressbar.setVisibility(View.VISIBLE);
                amccassettescheme1withsparetotalsparequantity("sub");
                totalquantity("sub");
                amccassettescheme1withsparetotalspareprice("sub", amccassettescheme1withsparetotalprice-disamccassettescheme1withsparetotalprice);
                totalprice3cs1("sub", amccassettescheme1withsparetotalprice-disamccassettescheme1withsparetotalprice,disamccassettescheme1withsparetotalprice,"Totalspare");
                totalsaved3cs1("sub",disamccassettescheme1withsparetotalprice,"Totalspare");
                btn("false");
            }
        });

        amccassettescheme1withsparelimitedadd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amccassettescheme1withsparelimitedprogressbar.setVisibility(View.VISIBLE);
                amccassettescheme1withsparelimitedsparequantity("add");
                totalquantity("add");
                amccassettescheme1withsparelimitedspareprice("add", amccassettescheme1withsparelimitedprice-disamccassettescheme1withsparelimitedprice);
                totalprice3cs1("add", amccassettescheme1withsparelimitedprice-disamccassettescheme1withsparelimitedprice,disamccassettescheme1withsparelimitedprice,"Limitedspare");
                totalsaved3cs1("add",disamccassettescheme1withsparelimitedprice,"Limitedspare");
                btn("false");
            }
        });
        amccassettescheme1withsparelimitedsub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amccassettescheme1withsparelimitedprogressbar.setVisibility(View.VISIBLE);
                amccassettescheme1withsparelimitedsparequantity("sub");
                totalquantity("sub");
                amccassettescheme1withsparelimitedspareprice("sub", amccassettescheme1withsparelimitedprice-disamccassettescheme1withsparelimitedprice);
                totalprice3cs1("sub", amccassettescheme1withsparelimitedprice-disamccassettescheme1withsparelimitedprice,disamccassettescheme1withsparelimitedprice,"Limitedspare");
                totalsaved3cs1("sub",disamccassettescheme1withsparelimitedprice,"Limitedspare");
                btn("false");
            }
        });

        amccassettescheme1withsparenoadd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amccassettescheme1withsparenoprogressbar.setVisibility(View.VISIBLE);
                amccassettescheme1withsparenosparequantity("add");
                totalquantity("add");
                amccassettescheme1withsparenospareprice("add", amccassettescheme1withsparenoprice-disamccassettescheme1withsparenoprice);
                totalprice3cs11("add", amccassettescheme1withsparenoprice-disamccassettescheme1withsparenoprice,disamccassettescheme1withsparenoprice,"Nospare");
                totalsaved3cs11("add",disamccassettescheme1withsparenoprice,"Nospare");
                btn("false");
            }
        });
        amccassettescheme1withsparenosub.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                amccassettescheme1withsparenoprogressbar.setVisibility(View.VISIBLE);
                amccassettescheme1withsparenosparequantity("sub");
                totalquantity("sub");
                amccassettescheme1withsparenospareprice("sub", amccassettescheme1withsparenoprice-disamccassettescheme1withsparenoprice);
                totalprice3cs11("sub", amccassettescheme1withsparenoprice-disamccassettescheme1withsparenoprice,disamccassettescheme1withsparenoprice,"Nospare");
                totalsaved3cs11("sub",disamccassettescheme1withsparenoprice,"Nospare");
                btn("false");
            }
        });


//        //spares
//
        //splitac
        addsparesplitaccapacitor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitaccapacitorprogressbar.setVisibility(View.VISIBLE);
                sparessplitaccapacitorquantity("add");
                totalquantity("add");
                sparessplitaccapacitorprice("add", sparessplitaccapacitorprice-dissparessplitaccapacitorprice);
                totalprice4("add", sparessplitaccapacitorprice-dissparessplitaccapacitorprice,dissparessplitaccapacitorprice,"Capacitor");
                totalsaved4("add",dissparessplitaccapacitorprice,"Capacitor");
                btn("false");
            }
        });
        subsparesplitaccapacitor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitaccapacitorprogressbar.setVisibility(View.VISIBLE);
                sparessplitaccapacitorquantity("sub");
                totalquantity("sub");
                sparessplitaccapacitorprice("sub", sparessplitaccapacitorprice-dissparessplitaccapacitorprice);
                totalprice4("sub", sparessplitaccapacitorprice-dissparessplitaccapacitorprice,dissparessplitaccapacitorprice,"Capacitor");
                totalsaved4("sub",dissparessplitaccapacitorprice,"Capacitor");
                btn("false");
            }
        });

        addsparesplitacblower.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacblowerprogressbar.setVisibility(View.VISIBLE);
                sparessplitacblowerquantity("add");
                totalquantity("add");
                sparessplitacblowerprice("add", sparessplitacblowerprice-dissparessplitacblowerprice);
                totalprice4("add", sparessplitacblowerprice-dissparessplitacblowerprice,dissparessplitacblowerprice,"Blower");
                totalsaved4("add",dissparessplitacblowerprice,"Blower");
                btn("false");
            }
        });
        subsparesplitacblower.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacblowerprogressbar.setVisibility(View.VISIBLE);
                sparessplitacblowerquantity("sub");
                totalquantity("sub");
                sparessplitacblowerprice("sub", sparessplitacblowerprice-dissparessplitacblowerprice);
                totalprice4("sub", sparessplitacblowerprice-dissparessplitacblowerprice,dissparessplitacblowerprice,"Blower");
                totalsaved4("sub",dissparessplitacblowerprice,"Blower");
                btn("false");
            }
        });

        addsparesplitacoutdoorfan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacoutdoorfanprogressbar.setVisibility(View.VISIBLE);
                sparessplitacoutdoorfanquantity("add");
                totalquantity("add");
                sparessplitacoutdoorfanprice("add", sparessplitacoutdoorfanprice-dissparessplitacoutdoorfanprice);
                totalprice4("add", sparessplitacoutdoorfanprice-dissparessplitacoutdoorfanprice,dissparessplitacoutdoorfanprice,"Outdoorfan");
                totalsaved4("add",dissparessplitacoutdoorfanprice,"Outdoorfan");
                btn("false");
            }
        });
        subsparesplitacoutdoorfan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacoutdoorfanprogressbar.setVisibility(View.VISIBLE);
                sparessplitacoutdoorfanquantity("sub");
                totalquantity("sub");
                sparessplitacoutdoorfanprice("sub", sparessplitacoutdoorfanprice-dissparessplitacoutdoorfanprice);
                totalprice4("sub", sparessplitacoutdoorfanprice-dissparessplitacoutdoorfanprice,dissparessplitacoutdoorfanprice,"Outdoorfan");
                totalsaved4("sub",dissparessplitacoutdoorfanprice,"Outdoorfan");
                btn("false");
            }
        });

        addsparesplitacindoormotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacindoormotorprogressbar.setVisibility(View.VISIBLE);
                sparessplitacindoormotorquantity("add");
                totalquantity("add");
                sparessplitacindoormotorprice("add", sparessplitacindoormotorprice-dissparessplitacindoormotorprice);
                totalprice4("add", sparessplitacindoormotorprice-dissparessplitacindoormotorprice,dissparessplitacindoormotorprice,"Indoormotor");
                totalsaved4("add",dissparessplitacindoormotorprice,"Indoormotor");
                btn("false");
            }
        });
        subsparesplitacindoormotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacindoormotorprogressbar.setVisibility(View.VISIBLE);
                sparessplitacindoormotorquantity("sub");
                totalquantity("sub");
                sparessplitacindoormotorprice("sub", sparessplitacindoormotorprice-dissparessplitacindoormotorprice);
                totalprice4("sub", sparessplitacindoormotorprice-dissparessplitacindoormotorprice,dissparessplitacindoormotorprice,"Indoormotor");
                totalsaved4("sub",dissparessplitacindoormotorprice,"Indoormotor");
                btn("false");
            }
        });

        addsparesplitacoutdoormotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacoutdoormotorprogressbar.setVisibility(View.VISIBLE);
                sparessplitacoutdoormotorquantity("add");
                totalquantity("add");
                sparessplitacoutdoormotorprice("add", sparessplitacoutdoormotorprice-dissparessplitacoutdoormotorprice);
                totalprice4("add", sparessplitacoutdoormotorprice-dissparessplitacoutdoormotorprice,dissparessplitacoutdoormotorprice,"Outdoormotor");
                totalsaved4("add",dissparessplitacoutdoormotorprice,"Outdoormotor");
                btn("false");
            }
        });
        subsparesplitacoutdoormotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacoutdoormotorprogressbar.setVisibility(View.VISIBLE);
                sparessplitacoutdoormotorquantity("sub");
                totalquantity("sub");
                sparessplitacoutdoormotorprice("sub", sparessplitacoutdoormotorprice-dissparessplitacoutdoormotorprice);
                totalprice4("sub", sparessplitacoutdoormotorprice-dissparessplitacoutdoormotorprice,dissparessplitacoutdoormotorprice,"Outdoormotor");
                totalsaved4("sub",dissparessplitacoutdoormotorprice,"Outdoormotor");
                btn("false");
            }
        });

        addsparesplitacswingmotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacswingmotorprogressbar.setVisibility(View.VISIBLE);
                sparessplitacswingmotorquantity("add");
                totalquantity("add");
                sparessplitacswingmotorprice("add", sparessplitacswingmotorprice-dissparessplitacswingmotorprice);
                totalprice4("add", sparessplitacswingmotorprice-dissparessplitacswingmotorprice,dissparessplitacswingmotorprice,"Swingmotor");
                totalsaved4("add",dissparessplitacswingmotorprice,"Swingmotor");
                btn("false");
            }
        });
        subsparesplitacswingmotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacswingmotorprogressbar.setVisibility(View.VISIBLE);
                sparessplitacswingmotorquantity("sub");
                totalquantity("sub");
                sparessplitacswingmotorprice("sub", sparessplitacswingmotorprice-dissparessplitacswingmotorprice);
                totalprice4("sub", sparessplitacswingmotorprice-dissparessplitacswingmotorprice,dissparessplitacswingmotorprice,"Swingmotor");
                totalsaved4("sub",dissparessplitacswingmotorprice,"Swingmotor");
                btn("false");
            }
        });

        addsparesplitacindoorcoil.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacindoorcoilprogressbar.setVisibility(View.VISIBLE);
                sparessplitacindoorcoilquantity("add");
                totalquantity("add");
                sparessplitacindoorcoilprice("add", sparessplitacindoorcoilprice-dissparessplitacindoorcoilprice);
                totalprice4("add", sparessplitacindoorcoilprice-dissparessplitacindoorcoilprice,dissparessplitacindoorcoilprice,"Indoorcoil");
                totalsaved4("add",dissparessplitacindoorcoilprice,"Indoorcoil");
                btn("false");
            }
        });
        subsparesplitacindoorcoil.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacindoorcoilprogressbar.setVisibility(View.VISIBLE);
                sparessplitacindoorcoilquantity("sub");
                totalquantity("sub");
                sparessplitacindoorcoilprice("sub", sparessplitacindoorcoilprice-dissparessplitacindoorcoilprice);
                totalprice4("sub", sparessplitacindoorcoilprice-dissparessplitacindoorcoilprice,dissparessplitacindoorcoilprice,"Indoorcoil");
                totalsaved4("sub",dissparessplitacindoorcoilprice,"Indoorcoil");
                btn("false");
            }
        });

        addsparesplitacoutdoorcondenser.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacoutdoorcondenserprogressbar.setVisibility(View.VISIBLE);
                sparessplitacoutdoorcondenserquantity("add");
                totalquantity("add");
                sparessplitacoutdoorcondenserprice("add", sparessplitacoutdoorcondenserprice-dissparessplitacoutdoorcondenserprice);
                totalprice4("add", sparessplitacoutdoorcondenserprice-dissparessplitacoutdoorcondenserprice,dissparessplitacoutdoorcondenserprice,"Outdoorcondenser");
                totalsaved4("add",dissparessplitacoutdoorcondenserprice,"Outdoorcondenser");
                btn("false");
            }
        });
        subsparesplitacoutdoorcondenser.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacoutdoorcondenserprogressbar.setVisibility(View.VISIBLE);
                sparessplitacoutdoorcondenserquantity("sub");
                totalquantity("sub");
                sparessplitacoutdoorcondenserprice("sub", sparessplitacoutdoorcondenserprice-dissparessplitacoutdoorcondenserprice);
                totalprice4("sub", sparessplitacoutdoorcondenserprice-dissparessplitacoutdoorcondenserprice,dissparessplitacoutdoorcondenserprice,"Outdoorcondenser");
                totalsaved4("sub",dissparessplitacoutdoorcondenserprice,"Outdoorcondenser");
                btn("false");
            }
        });

        addsparesplitacswingflap.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacswingflapprogressbar.setVisibility(View.VISIBLE);
                sparessplitacswingflapquantity("add");
                totalquantity("add");
                sparessplitacswingflapprice("add", sparessplitacswingflapprice-dissparessplitacswingflapprice);
                totalprice4("add", sparessplitacswingflapprice-dissparessplitacswingflapprice,dissparessplitacswingflapprice,"Swingflap");
                totalsaved4("add",dissparessplitacswingflapprice,"Swingflap");
                btn("false");
            }
        });
        subsparesplitacswingflap.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacswingflapprogressbar.setVisibility(View.VISIBLE);
                sparessplitacswingflapquantity("sub");
                totalquantity("sub");
                sparessplitacswingflapprice("sub", sparessplitacswingflapprice-dissparessplitacswingflapprice);
                totalprice4("sub", sparessplitacswingflapprice-dissparessplitacswingflapprice,dissparessplitacswingflapprice,"Swingflap");
                totalsaved4("sub",dissparessplitacswingflapprice,"Swingflap");
                btn("false");
            }
        });

        addsparesplitacremote.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacremoteprogressbar.setVisibility(View.VISIBLE);
                sparessplitacremotequantity("add");
                totalquantity("add");
                sparessplitacremoteprice("add", sparessplitacremoteprice-dissparessplitacremoteprice);
                totalprice4("add", sparessplitacremoteprice-dissparessplitacremoteprice,dissparessplitacremoteprice,"Remote");
                totalsaved4("add",dissparessplitacremoteprice,"Remote");
                btn("false");
            }
        });
        subsparesplitacremote.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparesplitacremoteprogressbar.setVisibility(View.VISIBLE);
                sparessplitacremotequantity("sub");
                totalquantity("sub");
                sparessplitacremoteprice("sub", sparessplitacremoteprice-dissparessplitacremoteprice);
                totalprice4("sub", sparessplitacremoteprice-dissparessplitacremoteprice,dissparessplitacremoteprice,"Remote");
                totalsaved4("sub",dissparessplitacremoteprice,"Remote");
                btn("false");
            }
        });

        //windowac
        addsparewindowaccapacitor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowaccapacitorprogressbar.setVisibility(View.VISIBLE);
                spareswindowaccapacitorquantity("add");
                totalquantity("add");
                spareswindowaccapacitorprice("add", spareswindowaccapacitorprice-disspareswindowaccapacitorprice);
                totalprice41("add", spareswindowaccapacitorprice-disspareswindowaccapacitorprice,disspareswindowaccapacitorprice,"Capacitor");
                totalsaved41("add",disspareswindowaccapacitorprice,"Capacitor");
                btn("false");
            }
        });
        subsparewindowaccapacitor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowaccapacitorprogressbar.setVisibility(View.VISIBLE);
                spareswindowaccapacitorquantity("sub");
                totalquantity("sub");
                spareswindowaccapacitorprice("sub", spareswindowaccapacitorprice-disspareswindowaccapacitorprice);
                totalprice41("sub", spareswindowaccapacitorprice-disspareswindowaccapacitorprice,disspareswindowaccapacitorprice,"Capacitor");
                totalsaved41("sub",disspareswindowaccapacitorprice,"Capacitor");
                btn("false");
            }
        });

        addsparewindowacblower.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacblowerprogressbar.setVisibility(View.VISIBLE);
                spareswindowacblowerquantity("add");
                totalquantity("add");
                spareswindowacblowerprice("add", spareswindowacblowerprice-disspareswindowacblowerprice);
                totalprice41("add", spareswindowacblowerprice-disspareswindowacblowerprice,disspareswindowacblowerprice,"Blower");
                totalsaved41("add",disspareswindowacblowerprice,"Blower");
                btn("false");
            }
        });
        subsparewindowacblower.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacblowerprogressbar.setVisibility(View.VISIBLE);
                spareswindowacblowerquantity("sub");
                totalquantity("sub");
                spareswindowacblowerprice("sub", spareswindowacblowerprice-disspareswindowacblowerprice);
                totalprice41("sub", spareswindowacblowerprice-disspareswindowacblowerprice,disspareswindowacblowerprice,"Blower");
                totalsaved41("sub",disspareswindowacblowerprice,"Blower");
                btn("false");
            }
        });

        addsparewindowacoutdoorfan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacoutdoorfanprogressbar.setVisibility(View.VISIBLE);
                spareswindowacoutdoorfanquantity("add");
                totalquantity("add");
                spareswindowacoutdoorfanprice("add", spareswindowacoutdoorfanprice-disspareswindowacoutdoorfanprice);
                totalprice41("add", spareswindowacoutdoorfanprice-disspareswindowacoutdoorfanprice,disspareswindowacoutdoorfanprice,"Outdoorfan");
                totalsaved41("add",disspareswindowacoutdoorfanprice,"Outdoorfan");
                btn("false");
            }
        });
        subsparewindowacoutdoorfan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacoutdoorfanprogressbar.setVisibility(View.VISIBLE);
                spareswindowacoutdoorfanquantity("sub");
                totalquantity("sub");
                spareswindowacoutdoorfanprice("sub", spareswindowacoutdoorfanprice-disspareswindowacoutdoorfanprice);
                totalprice41("sub", spareswindowacoutdoorfanprice-disspareswindowacoutdoorfanprice,disspareswindowacoutdoorfanprice,"Outdoorfan");
                totalsaved41("sub",disspareswindowacoutdoorfanprice,"Outdoorfan");
                btn("false");
            }
        });

        addsparewindowacindoormotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacindoormotorprogressbar.setVisibility(View.VISIBLE);
                spareswindowacindoormotorquantity("add");
                totalquantity("add");
                spareswindowacindoormotorprice("add", spareswindowacindoormotorprice-disspareswindowacindoormotorprice);
                totalprice41("add", spareswindowacindoormotorprice-disspareswindowacindoormotorprice,disspareswindowacindoormotorprice,"Indoormotor");
                totalsaved41("add",disspareswindowacindoormotorprice,"Indoormotor");
                btn("false");
            }
        });
        subsparewindowacindoormotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacindoormotorprogressbar.setVisibility(View.VISIBLE);
                spareswindowacindoormotorquantity("sub");
                totalquantity("sub");
                spareswindowacindoormotorprice("sub", spareswindowacindoormotorprice-disspareswindowacindoormotorprice);
                totalprice41("sub", spareswindowacindoormotorprice-disspareswindowacindoormotorprice,disspareswindowacindoormotorprice,"Indoormotor");
                totalsaved41("sub",disspareswindowacindoormotorprice,"Indoormotor");
                btn("false");
            }
        });

        addsparewindowacoutdoormotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacoutdoormotorprogressbar.setVisibility(View.VISIBLE);
                spareswindowacoutdoormotorquantity("add");
                totalquantity("add");
                spareswindowacoutdoormotorprice("add", spareswindowacoutdoormotorprice-disspareswindowacoutdoormotorprice);
                totalprice41("add", spareswindowacoutdoormotorprice-disspareswindowacoutdoormotorprice,disspareswindowacoutdoormotorprice,"Outdoormotor");
                totalsaved41("add",disspareswindowacoutdoormotorprice,"Outdoormotor");
                btn("false");
            }
        });
        subsparewindowacoutdoormotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacoutdoormotorprogressbar.setVisibility(View.VISIBLE);
                spareswindowacoutdoormotorquantity("sub");
                totalquantity("sub");
                spareswindowacoutdoormotorprice("sub", spareswindowacoutdoormotorprice-disspareswindowacoutdoormotorprice);
                totalprice41("sub", spareswindowacoutdoormotorprice-disspareswindowacoutdoormotorprice,disspareswindowacoutdoormotorprice,"Outdoormotor");
                totalsaved41("sub",disspareswindowacoutdoormotorprice,"Outdoormotor");
                btn("false");
            }
        });

        addsparewindowacswingmotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacswingmotorprogressbar.setVisibility(View.VISIBLE);
                spareswindowacswingmotorquantity("add");
                totalquantity("add");
                spareswindowacswingmotorprice("add", spareswindowacswingmotorprice-disspareswindowacswingmotorprice);
                totalprice41("add", spareswindowacswingmotorprice-disspareswindowacswingmotorprice,disspareswindowacswingmotorprice,"Swingmotor");
                totalsaved41("add",disspareswindowacswingmotorprice,"Swingmotor");
                btn("false");
            }
        });
        subsparewindowacswingmotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacswingmotorprogressbar.setVisibility(View.VISIBLE);
                spareswindowacswingmotorquantity("sub");
                totalquantity("sub");
                spareswindowacswingmotorprice("sub", spareswindowacswingmotorprice-disspareswindowacswingmotorprice);
                totalprice41("sub", spareswindowacswingmotorprice-disspareswindowacswingmotorprice,disspareswindowacswingmotorprice,"Swingmotor");
                totalsaved41("sub",disspareswindowacswingmotorprice,"Swingmotor");
                btn("false");
            }
        });

        addsparewindowacindoorcoil.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacindoorcoilprogressbar.setVisibility(View.VISIBLE);
                spareswindowacindoorcoilquantity("add");
                totalquantity("add");
                spareswindowacindoorcoilprice("add", spareswindowacindoorcoilprice-disspareswindowacindoorcoilprice);
                totalprice41("add", spareswindowacindoorcoilprice-disspareswindowacindoorcoilprice,disspareswindowacindoorcoilprice,"Indoorcoil");
                totalsaved41("add",disspareswindowacindoorcoilprice,"Indoorcoil");
                btn("false");
            }
        });
        subsparewindowacindoorcoil.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacindoorcoilprogressbar.setVisibility(View.VISIBLE);
                spareswindowacindoorcoilquantity("sub");
                totalquantity("sub");
                spareswindowacindoorcoilprice("sub", spareswindowacindoorcoilprice-disspareswindowacindoorcoilprice);
                totalprice41("sub", spareswindowacindoorcoilprice-disspareswindowacindoorcoilprice,disspareswindowacindoorcoilprice,"Indoorcoil");
                totalsaved41("sub",disspareswindowacindoorcoilprice,"Indoorcoil");
                btn("false");
            }
        });

        addsparewindowacoutdoorcondenser.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacoutdoorcondenserprogressbar.setVisibility(View.VISIBLE);
                spareswindowacoutdoorcondenserquantity("add");
                totalquantity("add");
                spareswindowacoutdoorcondenserprice("add", spareswindowacoutdoorcondenserprice-disspareswindowacoutdoorcondenserprice);
                totalprice41("add", spareswindowacoutdoorcondenserprice-disspareswindowacoutdoorcondenserprice,disspareswindowacoutdoorcondenserprice,"Outdoorcondenser");
                totalsaved41("add",disspareswindowacoutdoorcondenserprice,"Outdoorcondenser");
                btn("false");
            }
        });
        subsparewindowacoutdoorcondenser.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacoutdoorcondenserprogressbar.setVisibility(View.VISIBLE);
                spareswindowacoutdoorcondenserquantity("sub");
                totalquantity("sub");
                spareswindowacoutdoorcondenserprice("sub", spareswindowacoutdoorcondenserprice-disspareswindowacoutdoorcondenserprice);
                totalprice41("sub", spareswindowacoutdoorcondenserprice-disspareswindowacoutdoorcondenserprice,disspareswindowacoutdoorcondenserprice,"Outdoorcondenser");
                totalsaved41("sub",disspareswindowacoutdoorcondenserprice,"Outdoorcondenser");
                btn("false");
            }
        });

        addsparewindowacswingflap.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacswingflapprogressbar.setVisibility(View.VISIBLE);
                spareswindowacswingflapquantity("add");
                totalquantity("add");
                spareswindowacswingflapprice("add", spareswindowacswingflapprice-disspareswindowacswingflapprice);
                totalprice41("add", spareswindowacswingflapprice-disspareswindowacswingflapprice,disspareswindowacswingflapprice,"Swingflap");
                totalsaved41("add",disspareswindowacswingflapprice,"Swingflap");
                btn("false");
            }
        });
        subsparewindowacswingflap.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacswingflapprogressbar.setVisibility(View.VISIBLE);
                spareswindowacswingflapquantity("sub");
                totalquantity("sub");
                spareswindowacswingflapprice("sub", spareswindowacswingflapprice-disspareswindowacswingflapprice);
                totalprice41("sub", spareswindowacswingflapprice-disspareswindowacswingflapprice,disspareswindowacswingflapprice,"Swingflap");
                totalsaved41("sub",disspareswindowacswingflapprice,"Swingflap");
                btn("false");
            }
        });

        addsparewindowacremote.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacremoteprogressbar.setVisibility(View.VISIBLE);
                spareswindowacremotequantity("add");
                totalquantity("add");
                spareswindowacremoteprice("add", spareswindowacremoteprice-disspareswindowacremoteprice);
                totalprice41("add", spareswindowacremoteprice-disspareswindowacremoteprice,disspareswindowacremoteprice,"Remote");
                totalsaved41("add",disspareswindowacremoteprice,"Remote");
                btn("false");
            }
        });
        subsparewindowacremote.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparewindowacremoteprogressbar.setVisibility(View.VISIBLE);
                spareswindowacremotequantity("sub");
                totalquantity("sub");
                spareswindowacremoteprice("sub", spareswindowacremoteprice-disspareswindowacremoteprice);
                totalprice41("sub", spareswindowacremoteprice-disspareswindowacremoteprice,disspareswindowacremoteprice,"Remote");
                totalsaved41("sub",disspareswindowacremoteprice,"Remote");
                btn("false");
            }
        });

        //cassetteac
        addsparecassetteaccapacitor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteaccapacitorprogressbar.setVisibility(View.VISIBLE);
                sparescassetteaccapacitorquantity("add");
                totalquantity("add");
                sparescassetteaccapacitorprice("add", sparescassetteaccapacitorprice-dissparescassetteaccapacitorprice);
                totalprice42("add", sparescassetteaccapacitorprice-dissparescassetteaccapacitorprice,dissparescassetteaccapacitorprice,"Capacitor");
                totalsaved42("add",dissparescassetteaccapacitorprice,"Capacitor");
                btn("false");
            }
        });
        subsparecassetteaccapacitor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteaccapacitorprogressbar.setVisibility(View.VISIBLE);
                sparescassetteaccapacitorquantity("sub");
                totalquantity("sub");
                sparescassetteaccapacitorprice("sub", sparescassetteaccapacitorprice-dissparescassetteaccapacitorprice);
                totalprice42("sub", sparescassetteaccapacitorprice-dissparescassetteaccapacitorprice,dissparescassetteaccapacitorprice,"Capacitor");
                totalsaved42("sub",dissparescassetteaccapacitorprice,"Capacitor");
                btn("false");
            }
        });

        addsparecassetteacblower.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacblowerprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacblowerquantity("add");
                totalquantity("add");
                sparescassetteacblowerprice("add", sparescassetteacblowerprice-dissparescassetteacblowerprice);
                totalprice42("add", sparescassetteacblowerprice-dissparescassetteacblowerprice,dissparescassetteacblowerprice,"Blower");
                totalsaved42("add",dissparescassetteacblowerprice,"Blower");
                btn("false");
            }
        });
        subsparecassetteacblower.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacblowerprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacblowerquantity("sub");
                totalquantity("sub");
                sparescassetteacblowerprice("sub", sparescassetteacblowerprice-dissparescassetteacblowerprice);
                totalprice42("sub", sparescassetteacblowerprice-dissparescassetteacblowerprice,dissparescassetteacblowerprice,"Blower");
                totalsaved42("sub",dissparescassetteacblowerprice,"Blower");
                btn("false");
            }
        });

        addsparecassetteacoutdoorfan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacoutdoorfanprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacoutdoorfanquantity("add");
                totalquantity("add");
                sparescassetteacoutdoorfanprice("add", sparescassetteacoutdoorfanprice-dissparescassetteacoutdoorfanprice);
                totalprice42("add", sparescassetteacoutdoorfanprice-dissparescassetteacoutdoorfanprice,dissparescassetteacoutdoorfanprice,"Outdoorfan");
                totalsaved42("add",dissparescassetteacoutdoorfanprice,"Outdoorfan");
                btn("false");
            }
        });
        subsparecassetteacoutdoorfan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacoutdoorfanprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacoutdoorfanquantity("sub");
                totalquantity("sub");
                sparescassetteacoutdoorfanprice("sub", sparescassetteacoutdoorfanprice-dissparescassetteacoutdoorfanprice);
                totalprice42("sub", sparescassetteacoutdoorfanprice-dissparescassetteacoutdoorfanprice,dissparescassetteacoutdoorfanprice,"Outdoorfan");
                totalsaved42("sub",dissparescassetteacoutdoorfanprice,"Outdoorfan");
                btn("false");
            }
        });

        addsparecassetteacindoormotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacindoormotorprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacindoormotorquantity("add");
                totalquantity("add");
                sparescassetteacindoormotorprice("add", sparescassetteacindoormotorprice-dissparescassetteacindoormotorprice);
                totalprice42("add", sparescassetteacindoormotorprice-dissparescassetteacindoormotorprice,dissparescassetteacindoormotorprice,"Indoormotor");
                totalsaved42("add",dissparescassetteacindoormotorprice,"Indoormotor");
                btn("false");
            }
        });
        subsparecassetteacindoormotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacindoormotorprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacindoormotorquantity("sub");
                totalquantity("sub");
                sparescassetteacindoormotorprice("sub", sparescassetteacindoormotorprice-dissparescassetteacindoormotorprice);
                totalprice42("sub", sparescassetteacindoormotorprice-dissparescassetteacindoormotorprice,dissparescassetteacindoormotorprice,"Indoormotor");
                totalsaved42("sub",dissparescassetteacindoormotorprice,"Indoormotor");
                btn("false");
            }
        });

        addsparecassetteacoutdoormotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacoutdoormotorprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacoutdoormotorquantity("add");
                totalquantity("add");
                sparescassetteacoutdoormotorprice("add", sparescassetteacoutdoormotorprice-dissparescassetteacoutdoormotorprice);
                totalprice42("add", sparescassetteacoutdoormotorprice-dissparescassetteacoutdoormotorprice,dissparescassetteacoutdoormotorprice,"Outdoormotor");
                totalsaved42("add",dissparescassetteacoutdoormotorprice,"Outdoormotor");
                btn("false");
            }
        });
        subsparecassetteacoutdoormotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacoutdoormotorprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacoutdoormotorquantity("sub");
                totalquantity("sub");
                sparescassetteacoutdoormotorprice("sub", sparescassetteacoutdoormotorprice-dissparescassetteacoutdoormotorprice);
                totalprice42("sub", sparescassetteacoutdoormotorprice-dissparescassetteacoutdoormotorprice,dissparescassetteacoutdoormotorprice,"Outdoormotor");
                totalsaved42("sub",dissparescassetteacoutdoormotorprice,"Outdoormotor");
                btn("false");
            }
        });

        addsparecassetteacswingmotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacswingmotorprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacswingmotorquantity("add");
                totalquantity("add");
                sparescassetteacswingmotorprice("add", sparescassetteacswingmotorprice-dissparescassetteacswingmotorprice);
                totalprice42("add", sparescassetteacswingmotorprice-dissparescassetteacswingmotorprice,dissparescassetteacswingmotorprice,"Swingmotor");
                totalsaved42("add",dissparescassetteacswingmotorprice,"Swingmotor");
                btn("false");
            }
        });
        subsparecassetteacswingmotor.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacswingmotorprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacswingmotorquantity("sub");
                totalquantity("sub");
                sparescassetteacswingmotorprice("sub", sparescassetteacswingmotorprice-dissparescassetteacswingmotorprice);
                totalprice42("sub", sparescassetteacswingmotorprice-dissparescassetteacswingmotorprice,dissparescassetteacswingmotorprice,"Swingmotor");
                totalsaved42("sub",dissparescassetteacswingmotorprice,"Swingmotor");
                btn("false");
            }
        });

        addsparecassetteacindoorcoil.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacindoorcoilprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacindoorcoilquantity("add");
                totalquantity("add");
                sparescassetteacindoorcoilprice("add", sparescassetteacindoorcoilprice-dissparescassetteacindoorcoilprice);
                totalprice42("add", sparescassetteacindoorcoilprice-dissparescassetteacindoorcoilprice,dissparescassetteacindoorcoilprice,"Indoorcoil");
                totalsaved42("add",dissparescassetteacindoorcoilprice,"Indoorcoil");
                btn("false");
            }
        });
        subsparecassetteacindoorcoil.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacindoorcoilprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacindoorcoilquantity("sub");
                totalquantity("sub");
                sparescassetteacindoorcoilprice("sub", sparescassetteacindoorcoilprice-dissparescassetteacindoorcoilprice);
                totalprice42("sub", sparescassetteacindoorcoilprice-dissparescassetteacindoorcoilprice,dissparescassetteacindoorcoilprice,"Indoorcoil");
                totalsaved42("sub",dissparescassetteacindoorcoilprice,"Indoorcoil");
                btn("false");
            }
        });

        addsparecassetteacoutdoorcondenser.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacoutdoorcondenserprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacoutdoorcondenserquantity("add");
                totalquantity("add");
                sparescassetteacoutdoorcondenserprice("add", sparescassetteacoutdoorcondenserprice-dissparescassetteacoutdoorcondenserprice);
                totalprice42("add", sparescassetteacoutdoorcondenserprice-dissparescassetteacoutdoorcondenserprice,dissparescassetteacoutdoorcondenserprice,"Outdoorcondenser");
                totalsaved42("add",dissparescassetteacoutdoorcondenserprice,"Outdoorcondenser");
                btn("false");
            }
        });
        subsparecassetteacoutdoorcondenser.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacoutdoorcondenserprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacoutdoorcondenserquantity("sub");
                totalquantity("sub");
                sparescassetteacoutdoorcondenserprice("sub", sparescassetteacoutdoorcondenserprice-dissparescassetteacoutdoorcondenserprice);
                totalprice42("sub", sparescassetteacoutdoorcondenserprice-dissparescassetteacoutdoorcondenserprice,dissparescassetteacoutdoorcondenserprice,"Outdoorcondenser");
                totalsaved42("sub",dissparescassetteacoutdoorcondenserprice,"Outdoorcondenser");
                btn("false");
            }
        });

        addsparecassetteacswingflap.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacswingflapprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacswingflapquantity("add");
                totalquantity("add");
                sparescassetteacswingflapprice("add", sparescassetteacswingflapprice-dissparescassetteacswingflapprice);
                totalprice42("add", sparescassetteacswingflapprice-dissparescassetteacswingflapprice,dissparescassetteacswingflapprice,"Swingflap");
                totalsaved42("add",dissparescassetteacswingflapprice,"Swingflap");
                btn("false");
            }
        });
        subsparecassetteacswingflap.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacswingflapprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacswingflapquantity("sub");
                totalquantity("sub");
                sparescassetteacswingflapprice("sub", sparescassetteacswingflapprice-dissparescassetteacswingflapprice);
                totalprice42("sub", sparescassetteacswingflapprice-dissparescassetteacswingflapprice,dissparescassetteacswingflapprice,"Swingflap");
                totalsaved42("sub",dissparescassetteacswingflapprice,"Swingflap");
                btn("false");
            }
        });

        addsparecassetteacremote.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacremoteprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacremotequantity("add");
                totalquantity("add");
                sparescassetteacremoteprice("add", sparescassetteacremoteprice-dissparescassetteacremoteprice);
                totalprice42("add", sparescassetteacremoteprice-dissparescassetteacremoteprice,dissparescassetteacremoteprice,"Remote");
                totalsaved42("add",dissparescassetteacremoteprice,"Remote");
                btn("false");
            }
        });
        subsparecassetteacremote.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                sparecassetteacremoteprogressbar.setVisibility(View.VISIBLE);
                sparescassetteacremotequantity("sub");
                totalquantity("sub");
                sparescassetteacremoteprice("sub", sparescassetteacremoteprice-dissparescassetteacremoteprice);
                totalprice42("sub", sparescassetteacremoteprice-dissparescassetteacremoteprice,dissparescassetteacremoteprice,"Remote");
                totalsaved42("sub",dissparescassetteacremoteprice,"Remote");
                btn("false");
            }
        });

//        //faults

        //splitac

        addfaultsplitacwaterleak.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacwaterleakprogressbar.setVisibility(View.VISIBLE);
                faultssplitacwaterleakquantity("add");
                totalquantity("add");
                faultssplitacwaterleakprice("add", faultssplitacwaterleakprice-disfaultssplitacwaterleakprice);
                totalprice5("add", faultssplitacwaterleakprice-disfaultssplitacwaterleakprice,disfaultssplitacwaterleakprice,"Waterleak");
                totalsaved5("add",disfaultssplitacwaterleakprice,"Waterleak");
                btn("false");
            }
        });
        subfaultsplitacwaterleak.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacwaterleakprogressbar.setVisibility(View.VISIBLE);
                faultssplitacwaterleakquantity("sub");
                totalquantity("sub");
                faultssplitacwaterleakprice("sub", faultssplitacwaterleakprice-disfaultssplitacwaterleakprice);
                totalprice5("sub", faultssplitacwaterleakprice-disfaultssplitacwaterleakprice,disfaultssplitacwaterleakprice,"Waterleak");
                totalsaved5("sub",disfaultssplitacwaterleakprice,"Waterleak");
                btn("false");
            }
        });

        addfaultsplitacgasleak.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacgasleakprogressbar.setVisibility(View.VISIBLE);
                faultssplitacgasleakquantity("add");
                totalquantity("add");
                faultssplitacgasleakprice("add", faultssplitacgasleakprice-disfaultssplitacgasleakprice);
                totalprice5("add", faultssplitacgasleakprice-disfaultssplitacgasleakprice,disfaultssplitacgasleakprice,"Gasleak");
                totalsaved5("add",disfaultssplitacgasleakprice,"Gasleak");
                btn("false");
            }
        });
        subfaultsplitacgasleak.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacgasleakprogressbar.setVisibility(View.VISIBLE);
                faultssplitacgasleakquantity("sub");
                totalquantity("sub");
                faultssplitacgasleakprice("sub", faultssplitacgasleakprice-disfaultssplitacgasleakprice);
                totalprice5("sub", faultssplitacgasleakprice-disfaultssplitacgasleakprice,disfaultssplitacgasleakprice,"Gasleak");
                totalsaved5("sub",disfaultssplitacgasleakprice,"Gasleak");
                btn("false");
            }
        });

        addfaultsplitacpcboard.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacpcboardprogressbar.setVisibility(View.VISIBLE);
                faultssplitacpcboardquantity("add");
                totalquantity("add");
                faultssplitacpcboardprice("add", faultssplitacpcboardprice-disfaultssplitacpcboardprice);
                totalprice5("add", faultssplitacpcboardprice-disfaultssplitacpcboardprice,disfaultssplitacpcboardprice,"Pcboard");
                totalsaved5("add",disfaultssplitacpcboardprice,"Pcboard");
                btn("false");
            }
        });
        subfaultsplitacpcboard.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacpcboardprogressbar.setVisibility(View.VISIBLE);
                faultssplitacpcboardquantity("sub");
                totalquantity("sub");
                faultssplitacpcboardprice("sub", faultssplitacpcboardprice-disfaultssplitacpcboardprice);
                totalprice5("sub", faultssplitacpcboardprice-disfaultssplitacpcboardprice,disfaultssplitacpcboardprice,"Pcboard");
                totalsaved5("sub",disfaultssplitacpcboardprice,"Pcboard");
                btn("false");
            }
        });

        addfaultsplitacstabilizer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacstabilizerprogressbar.setVisibility(View.VISIBLE);
                faultssplitacstabilizerquantity("add");
                totalquantity("add");
                faultssplitacstabilizerprice("add", faultssplitacstabilizerprice-disfaultssplitacstabilizerprice);
                totalprice5("add", faultssplitacstabilizerprice-disfaultssplitacstabilizerprice,disfaultssplitacstabilizerprice,"Stabilizer");
                totalsaved5("add",disfaultssplitacstabilizerprice,"Stabilizer");
                btn("false");
            }
        });
        subfaultsplitacstabilizer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacstabilizerprogressbar.setVisibility(View.VISIBLE);
                faultssplitacstabilizerquantity("sub");
                totalquantity("sub");
                faultssplitacstabilizerprice("sub", faultssplitacstabilizerprice-disfaultssplitacstabilizerprice);
                totalprice5("sub", faultssplitacstabilizerprice-disfaultssplitacstabilizerprice,disfaultssplitacstabilizerprice,"Stabilizer");
                totalsaved5("sub",disfaultssplitacstabilizerprice,"Stabilizer");
                btn("false");
            }
        });

        addfaultsplitacindoorcoil.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacindoorcoilprogressbar.setVisibility(View.VISIBLE);
                faultssplitacindoorcoilquantity("add");
                totalquantity("add");
                faultssplitacindoorcoilprice("add", faultssplitacindoorcoilprice-disfaultssplitacindoorcoilprice);
                totalprice5("add", faultssplitacindoorcoilprice-disfaultssplitacindoorcoilprice,disfaultssplitacindoorcoilprice,"Indoorcoil");
                totalsaved5("add",disfaultssplitacindoorcoilprice,"Indoorcoil");
                btn("false");
            }
        });
        subfaultsplitacindoorcoil.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacindoorcoilprogressbar.setVisibility(View.VISIBLE);
                faultssplitacindoorcoilquantity("sub");
                totalquantity("sub");
                faultssplitacindoorcoilprice("sub", faultssplitacindoorcoilprice-disfaultssplitacindoorcoilprice);
                totalprice5("sub", faultssplitacindoorcoilprice-disfaultssplitacindoorcoilprice,disfaultssplitacindoorcoilprice,"Indoorcoil");
                totalsaved5("sub",disfaultssplitacindoorcoilprice,"Indoorcoil");
                btn("false");
            }
        });

        addfaultsplitacoutdoorcondenser.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacoutdoorcondenserprogressbar.setVisibility(View.VISIBLE);
                faultssplitacoutdoorcondenserquantity("add");
                totalquantity("add");
                faultssplitacoutdoorcondenserprice("add", faultssplitacoutdoorcondenserprice-disfaultssplitacoutdoorcondenserprice);
                totalprice5("add", faultssplitacoutdoorcondenserprice-disfaultssplitacoutdoorcondenserprice,disfaultssplitacoutdoorcondenserprice,"Outdoorcondenser");
                totalsaved5("add",disfaultssplitacoutdoorcondenserprice,"Outdoorcondenser");
                btn("false");
            }
        });
        subfaultsplitacoutdoorcondenser.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacoutdoorcondenserprogressbar.setVisibility(View.VISIBLE);
                faultssplitacoutdoorcondenserquantity("sub");
                totalquantity("sub");
                faultssplitacoutdoorcondenserprice("sub", faultssplitacoutdoorcondenserprice-disfaultssplitacoutdoorcondenserprice);
                totalprice5("sub", faultssplitacoutdoorcondenserprice-disfaultssplitacoutdoorcondenserprice,disfaultssplitacoutdoorcondenserprice,"Outdoorcondenser");
                totalsaved5("sub",disfaultssplitacoutdoorcondenserprice,"Outdoorcondenser");
                btn("false");
            }
        });

        addfaultsplitacremote.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacremoteprogressbar.setVisibility(View.VISIBLE);
                faultssplitacremotequantity("add");
                totalquantity("add");
                faultssplitacremoteprice("add", faultssplitacremoteprice-disfaultssplitacremoteprice);
                totalprice5("add", faultssplitacremoteprice-disfaultssplitacremoteprice,disfaultssplitacremoteprice,"Remote");
                totalsaved5("add",disfaultssplitacremoteprice,"Remote");
                btn("false");
            }
        });
        subfaultsplitacremote.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultsplitacremoteprogressbar.setVisibility(View.VISIBLE);
                faultssplitacremotequantity("sub");
                totalquantity("sub");
                faultssplitacremoteprice("sub", faultssplitacremoteprice-disfaultssplitacremoteprice);
                totalprice5("sub", faultssplitacremoteprice-disfaultssplitacremoteprice,disfaultssplitacremoteprice,"Remote");
                totalsaved5("sub",disfaultssplitacremoteprice,"Remote");
                btn("false");
            }
        });

        //windowac
        addfaultwindowacwaterleak.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacwaterleakprogressbar.setVisibility(View.VISIBLE);
                faultswindowacwaterleakquantity("add");
                totalquantity("add");
                faultswindowacwaterleakprice("add", faultswindowacwaterleakprice-disfaultswindowacwaterleakprice);
                totalprice51("add", faultswindowacwaterleakprice-disfaultswindowacwaterleakprice,disfaultswindowacwaterleakprice,"Waterleak");
                totalsaved51("add",disfaultswindowacwaterleakprice,"Waterleak");
                btn("false");
            }
        });
        subfaultwindowacwaterleak.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacwaterleakprogressbar.setVisibility(View.VISIBLE);
                faultswindowacwaterleakquantity("sub");
                totalquantity("sub");
                faultswindowacwaterleakprice("sub", faultswindowacwaterleakprice-disfaultswindowacwaterleakprice);
                totalprice51("sub", faultswindowacwaterleakprice-disfaultswindowacwaterleakprice,disfaultswindowacwaterleakprice,"Waterleak");
                totalsaved51("sub",disfaultswindowacwaterleakprice,"Waterleak");
                btn("false");
            }
        });

        addfaultwindowacgasleak.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacgasleakprogressbar.setVisibility(View.VISIBLE);
                faultswindowacgasleakquantity("add");
                totalquantity("add");
                faultswindowacgasleakprice("add", faultswindowacgasleakprice-disfaultswindowacgasleakprice);
                totalprice51("add", faultswindowacgasleakprice-disfaultswindowacgasleakprice,disfaultswindowacgasleakprice,"Gasleak");
                totalsaved51("add",disfaultswindowacgasleakprice,"Gasleak");
                btn("false");
            }
        });
        subfaultwindowacgasleak.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacgasleakprogressbar.setVisibility(View.VISIBLE);
                faultswindowacgasleakquantity("sub");
                totalquantity("sub");
                faultswindowacgasleakprice("sub", faultswindowacgasleakprice-disfaultswindowacgasleakprice);
                totalprice51("sub", faultswindowacgasleakprice-disfaultswindowacgasleakprice,disfaultswindowacgasleakprice,"Gasleak");
                totalsaved51("sub",disfaultswindowacgasleakprice,"Gasleak");
                btn("false");
            }
        });

        addfaultwindowacpcboard.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacpcboardprogressbar.setVisibility(View.VISIBLE);
                faultswindowacpcboardquantity("add");
                totalquantity("add");
                faultswindowacpcboardprice("add", faultswindowacpcboardprice-disfaultswindowacpcboardprice);
                totalprice51("add", faultswindowacpcboardprice-disfaultswindowacpcboardprice,disfaultswindowacpcboardprice,"Pcboard");
                totalsaved51("add",disfaultswindowacpcboardprice,"Pcboard");
                btn("false");
            }
        });
        subfaultwindowacpcboard.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacpcboardprogressbar.setVisibility(View.VISIBLE);
                faultswindowacpcboardquantity("sub");
                totalquantity("sub");
                faultswindowacpcboardprice("sub", faultswindowacpcboardprice-disfaultswindowacpcboardprice);
                totalprice51("sub", faultswindowacpcboardprice-disfaultswindowacpcboardprice,disfaultswindowacpcboardprice,"Pcboard");
                totalsaved51("sub",disfaultswindowacpcboardprice,"Pcboard");
                btn("false");
            }
        });

        addfaultwindowacstabilizer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacstabilizerprogressbar.setVisibility(View.VISIBLE);
                faultswindowacstabilizerquantity("add");
                totalquantity("add");
                faultswindowacstabilizerprice("add", faultswindowacstabilizerprice-disfaultswindowacstabilizerprice);
                totalprice51("add", faultswindowacstabilizerprice-disfaultswindowacstabilizerprice,disfaultswindowacstabilizerprice,"Stabilizer");
                totalsaved51("add",disfaultswindowacstabilizerprice,"Stabilizer");
                btn("false");
            }
        });
        subfaultwindowacstabilizer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacstabilizerprogressbar.setVisibility(View.VISIBLE);
                faultswindowacstabilizerquantity("sub");
                totalquantity("sub");
                faultswindowacstabilizerprice("sub", faultswindowacstabilizerprice-disfaultswindowacstabilizerprice);
                totalprice51("sub", faultswindowacstabilizerprice-disfaultswindowacstabilizerprice,disfaultswindowacstabilizerprice,"Stabilizer");
                totalsaved51("sub",disfaultswindowacstabilizerprice,"Stabilizer");
                btn("false");
            }
        });

        addfaultwindowacindoorcoil.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacindoorcoilprogressbar.setVisibility(View.VISIBLE);
                faultswindowacindoorcoilquantity("add");
                totalquantity("add");
                faultswindowacindoorcoilprice("add", faultswindowacindoorcoilprice-disfaultswindowacindoorcoilprice);
                totalprice51("add", faultswindowacindoorcoilprice-disfaultswindowacindoorcoilprice,disfaultswindowacindoorcoilprice,"Indoorcoil");
                totalsaved51("add",disfaultswindowacindoorcoilprice,"Indoorcoil");
                btn("false");
            }
        });
        subfaultwindowacindoorcoil.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacindoorcoilprogressbar.setVisibility(View.VISIBLE);
                faultswindowacindoorcoilquantity("sub");
                totalquantity("sub");
                faultswindowacindoorcoilprice("sub", faultswindowacindoorcoilprice-disfaultswindowacindoorcoilprice);
                totalprice51("sub", faultswindowacindoorcoilprice-disfaultswindowacindoorcoilprice,disfaultswindowacindoorcoilprice,"Indoorcoil");
                totalsaved51("sub",disfaultswindowacindoorcoilprice,"Indoorcoil");
                btn("false");
            }
        });

        addfaultwindowacoutdoorcondenser.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacoutdoorcondenserprogressbar.setVisibility(View.VISIBLE);
                faultswindowacoutdoorcondenserquantity("add");
                totalquantity("add");
                faultswindowacoutdoorcondenserprice("add", faultswindowacoutdoorcondenserprice-disfaultswindowacoutdoorcondenserprice);
                totalprice51("add", faultswindowacoutdoorcondenserprice-disfaultswindowacoutdoorcondenserprice,disfaultswindowacoutdoorcondenserprice,"Outdoorcondenser");
                totalsaved51("add",disfaultswindowacoutdoorcondenserprice,"Outdoorcondenser");
                btn("false");
            }
        });
        subfaultwindowacoutdoorcondenser.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacoutdoorcondenserprogressbar.setVisibility(View.VISIBLE);
                faultswindowacoutdoorcondenserquantity("sub");
                totalquantity("sub");
                faultswindowacoutdoorcondenserprice("sub", faultswindowacoutdoorcondenserprice-disfaultswindowacoutdoorcondenserprice);
                totalprice51("sub", faultswindowacoutdoorcondenserprice-disfaultswindowacoutdoorcondenserprice,disfaultswindowacoutdoorcondenserprice,"Outdoorcondenser");
                totalsaved51("sub",disfaultswindowacoutdoorcondenserprice,"Outdoorcondenser");
                btn("false");
            }
        });

        addfaultwindowacremote.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacremoteprogressbar.setVisibility(View.VISIBLE);
                faultswindowacremotequantity("add");
                totalquantity("add");
                faultswindowacremoteprice("add", faultswindowacremoteprice-disfaultswindowacremoteprice);
                totalprice51("add", faultswindowacremoteprice-disfaultswindowacremoteprice,disfaultswindowacremoteprice,"Remote");
                totalsaved51("add",disfaultswindowacremoteprice,"Remote");
                btn("false");
            }
        });
        subfaultwindowacremote.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultwindowacremoteprogressbar.setVisibility(View.VISIBLE);
                faultswindowacremotequantity("sub");
                totalquantity("sub");
                faultswindowacremoteprice("sub", faultswindowacremoteprice-disfaultswindowacremoteprice);
                totalprice51("sub", faultswindowacremoteprice-disfaultswindowacremoteprice,disfaultswindowacremoteprice,"Remote");
                totalsaved51("sub",disfaultswindowacremoteprice,"Remote");
                btn("false");
            }
        });


        //cassetteac
        addfaultcassetteacwaterleak.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacwaterleakprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacwaterleakquantity("add");
                totalquantity("add");
                faultscassetteacwaterleakprice("add", faultscassetteacwaterleakprice-disfaultscassetteacwaterleakprice);
                totalprice52("add", faultscassetteacwaterleakprice-disfaultscassetteacwaterleakprice,disfaultscassetteacwaterleakprice,"Waterleak");
                totalsaved52("add",disfaultscassetteacwaterleakprice,"Waterleak");
                btn("false");
            }
        });
        subfaultcassetteacwaterleak.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacwaterleakprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacwaterleakquantity("sub");
                totalquantity("sub");
                faultscassetteacwaterleakprice("sub", faultscassetteacwaterleakprice-disfaultscassetteacwaterleakprice);
                totalprice52("sub", faultscassetteacwaterleakprice-disfaultscassetteacwaterleakprice,disfaultscassetteacwaterleakprice,"Waterleak");
                totalsaved52("sub",disfaultscassetteacwaterleakprice,"Waterleak");
                btn("false");
            }
        });

        addfaultcassetteacgasleak.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacgasleakprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacgasleakquantity("add");
                totalquantity("add");
                faultscassetteacgasleakprice("add", faultscassetteacgasleakprice-disfaultscassetteacgasleakprice);
                totalprice52("add", faultscassetteacgasleakprice-disfaultscassetteacgasleakprice,disfaultscassetteacgasleakprice,"Gasleak");
                totalsaved52("add",disfaultscassetteacgasleakprice,"Gasleak");
                btn("false");
            }
        });
        subfaultcassetteacgasleak.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacgasleakprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacgasleakquantity("sub");
                totalquantity("sub");
                faultscassetteacgasleakprice("sub", faultscassetteacgasleakprice-disfaultscassetteacgasleakprice);
                totalprice52("sub", faultscassetteacgasleakprice-disfaultscassetteacgasleakprice,disfaultscassetteacgasleakprice,"Gasleak");
                totalsaved52("sub",disfaultscassetteacgasleakprice,"Gasleak");
                btn("false");
            }
        });

        addfaultcassetteacpcboard.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacpcboardprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacpcboardquantity("add");
                totalquantity("add");
                faultscassetteacpcboardprice("add", faultscassetteacpcboardprice-disfaultscassetteacpcboardprice);
                totalprice52("add", faultscassetteacpcboardprice-disfaultscassetteacpcboardprice,disfaultscassetteacpcboardprice,"Pcboard");
                totalsaved52("add",disfaultscassetteacpcboardprice,"Pcboard");
                btn("false");
            }
        });
        subfaultcassetteacpcboard.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacpcboardprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacpcboardquantity("sub");
                totalquantity("sub");
                faultscassetteacpcboardprice("sub", faultscassetteacpcboardprice-disfaultscassetteacpcboardprice);
                totalprice52("sub", faultscassetteacpcboardprice-disfaultscassetteacpcboardprice,disfaultscassetteacpcboardprice,"Pcboard");
                totalsaved52("sub",disfaultscassetteacpcboardprice,"Pcboard");
                btn("false");
            }
        });

        addfaultcassetteacstabilizer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacstabilizerprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacstabilizerquantity("add");
                totalquantity("add");
                faultscassetteacstabilizerprice("add", faultscassetteacstabilizerprice-disfaultscassetteacstabilizerprice);
                totalprice52("add", faultscassetteacstabilizerprice-disfaultscassetteacstabilizerprice,disfaultscassetteacstabilizerprice,"Stabilizer");
                totalsaved52("add",disfaultscassetteacstabilizerprice,"Stabilizer");
                btn("false");
            }
        });
        subfaultcassetteacstabilizer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacstabilizerprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacstabilizerquantity("sub");
                totalquantity("sub");
                faultscassetteacstabilizerprice("sub", faultscassetteacstabilizerprice-disfaultscassetteacstabilizerprice);
                totalprice52("sub", faultscassetteacstabilizerprice-disfaultscassetteacstabilizerprice,disfaultscassetteacstabilizerprice,"Stabilizer");
                totalsaved52("sub",disfaultscassetteacstabilizerprice,"Stabilizer");
                btn("false");
            }
        });

        addfaultcassetteacindoorcoil.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacindoorcoilprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacindoorcoilquantity("add");
                totalquantity("add");
                faultscassetteacindoorcoilprice("add", faultscassetteacindoorcoilprice-disfaultscassetteacindoorcoilprice);
                totalprice52("add", faultscassetteacindoorcoilprice-disfaultscassetteacindoorcoilprice,disfaultscassetteacindoorcoilprice,"Indoorcoil");
                totalsaved52("add",disfaultscassetteacindoorcoilprice,"Indoorcoil");
                btn("false");
            }
        });
        subfaultcassetteacindoorcoil.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacindoorcoilprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacindoorcoilquantity("sub");
                totalquantity("sub");
                faultscassetteacindoorcoilprice("sub", faultscassetteacindoorcoilprice-disfaultscassetteacindoorcoilprice);
                totalprice52("sub", faultscassetteacindoorcoilprice-disfaultscassetteacindoorcoilprice,disfaultscassetteacindoorcoilprice,"Indoorcoil");
                totalsaved52("sub",disfaultscassetteacindoorcoilprice,"Indoorcoil");
                btn("false");
            }
        });

        addfaultcassetteacoutdoorcondenser.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacoutdoorcondenserprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacoutdoorcondenserquantity("add");
                totalquantity("add");
                faultscassetteacoutdoorcondenserprice("add", faultscassetteacoutdoorcondenserprice-disfaultscassetteacoutdoorcondenserprice);
                totalprice52("add", faultscassetteacoutdoorcondenserprice-disfaultscassetteacoutdoorcondenserprice,disfaultscassetteacoutdoorcondenserprice,"Outdoorcondenser");
                totalsaved52("add",disfaultscassetteacoutdoorcondenserprice,"Outdoorcondenser");
                btn("false");
            }
        });
        subfaultcassetteacoutdoorcondenser.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacoutdoorcondenserprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacoutdoorcondenserquantity("sub");
                totalquantity("sub");
                faultscassetteacoutdoorcondenserprice("sub", faultscassetteacoutdoorcondenserprice-disfaultscassetteacoutdoorcondenserprice);
                totalprice52("sub", faultscassetteacoutdoorcondenserprice-disfaultscassetteacoutdoorcondenserprice,disfaultscassetteacoutdoorcondenserprice,"Outdoorcondenser");
                totalsaved52("sub",disfaultscassetteacoutdoorcondenserprice,"Outdoorcondenser");
                btn("false");
            }
        });

        addfaultcassetteacremote.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacremoteprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacremotequantity("add");
                totalquantity("add");
                faultscassetteacremoteprice("add", faultscassetteacremoteprice-disfaultscassetteacremoteprice);
                totalprice52("add", faultscassetteacremoteprice-disfaultscassetteacremoteprice,disfaultscassetteacremoteprice,"Remote");
                totalsaved52("add",disfaultscassetteacremoteprice,"Remote");
                btn("false");
            }
        });
        subfaultcassetteacremote.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                faultcassetteacremoteprogressbar.setVisibility(View.VISIBLE);
                faultscassetteacremotequantity("sub");
                totalquantity("sub");
                faultscassetteacremoteprice("sub", faultscassetteacremoteprice-disfaultscassetteacremoteprice);
                totalprice52("sub", faultscassetteacremoteprice-disfaultscassetteacremoteprice,disfaultscassetteacremoteprice,"Remote");
                totalsaved52("sub",disfaultscassetteacremoteprice,"Remote");
                btn("false");
            }
        });

        // installation and uninstallation

        //splitac
        addsplitacinstall.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                splitacinstallprogressbar.setVisibility(View.VISIBLE);
                splitacinstallquantity("add");
                totalquantity("add");
                splitacinstallprice("add", splitacinstallprice-dissplitacinstallprice);
                totalprice6("add", splitacinstallprice-dissplitacinstallprice,dissplitacinstallprice,"Install");
                totalsaved6("add",dissplitacinstallprice,"Install");
                btn("false");
            }
        });
        subsplitacinstall.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                splitacinstallprogressbar.setVisibility(View.VISIBLE);
                splitacinstallquantity("sub");
                totalquantity("sub");
                splitacinstallprice("sub", splitacinstallprice-dissplitacinstallprice);
                totalprice6("sub", splitacinstallprice-dissplitacinstallprice,dissplitacinstallprice,"Install");
                totalsaved6("sub",dissplitacinstallprice,"Install");
                btn("false");
            }
        });

        addsplitacuninstall.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                splitacuninstallprogressbar.setVisibility(View.VISIBLE);
                splitacuninstallquantity("add");
                totalquantity("add");
                splitacuninstallprice("add", splitacuninstallprice-dissplitacuninstallprice);
                totalprice6("add", splitacuninstallprice-dissplitacuninstallprice,dissplitacuninstallprice,"Uninstall");
                totalsaved6("add",dissplitacuninstallprice,"Uninstall");
                btn("false");
            }
        });
        subsplitacuninstall.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                splitacuninstallprogressbar.setVisibility(View.VISIBLE);
                splitacuninstallquantity("sub");
                totalquantity("sub");
                splitacuninstallprice("sub", splitacuninstallprice-dissplitacuninstallprice);
                totalprice6("sub", splitacuninstallprice-dissplitacuninstallprice,dissplitacuninstallprice,"Uninstall");
                totalsaved6("sub",dissplitacuninstallprice,"Uninstall");
                btn("false");
            }
        });

        addsplitaccombo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                splitaccomboprogressbar.setVisibility(View.VISIBLE);
                splitaccomboquantity("add");
                totalquantity("add");
                splitaccomboprice("add", splitaccomboprice-dissplitaccomboprice);
                totalprice6("add", splitaccomboprice-dissplitaccomboprice,dissplitaccomboprice,"Combo");
                totalsaved6("add",dissplitaccomboprice,"Combo");
                btn("false");
            }
        });
        subsplitaccombo.setOnClickListener(new View.OnClickListener()  {
            @Override
            public void onClick(View view) {
                splitaccomboprogressbar.setVisibility(View.VISIBLE);
                splitaccomboquantity("sub");
                totalquantity("sub");
                splitaccomboprice("sub", splitaccomboprice-dissplitaccomboprice);
                totalprice6("sub", splitaccomboprice-dissplitaccomboprice,dissplitaccomboprice,"Combo");
                totalsaved6("sub",dissplitaccomboprice,"Combo");
                btn("false");
            }
        });


        //windowac
        addwindowacinstall.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                windowacinstallprogressbar.setVisibility(View.VISIBLE);
                windowacinstallquantity("add");
                totalquantity("add");
                windowacinstallprice("add", windowacinstallprice-diswindowacinstallprice);
                totalprice61("add", windowacinstallprice-diswindowacinstallprice,diswindowacinstallprice,"Install");
                totalsaved61("add",diswindowacinstallprice,"Install");
                btn("false");
            }
        });
        subwindowacinstall.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                windowacinstallprogressbar.setVisibility(View.VISIBLE);
                windowacinstallquantity("sub");
                totalquantity("sub");
                windowacinstallprice("sub", windowacinstallprice-diswindowacinstallprice);
                totalprice61("sub", windowacinstallprice-diswindowacinstallprice,diswindowacinstallprice,"Install");
                totalsaved61("sub",diswindowacinstallprice,"Install");
                btn("false");
            }
        });

        addwindowacuninstall.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                windowacuninstallprogressbar.setVisibility(View.VISIBLE);
                windowacuninstallquantity("add");
                totalquantity("add");
                windowacuninstallprice("add", windowacuninstallprice-diswindowacuninstallprice);
                totalprice61("add", windowacuninstallprice-diswindowacuninstallprice,diswindowacuninstallprice,"Uninstall");
                totalsaved61("add",diswindowacuninstallprice,"Uninstall");
                btn("false");
            }
        });
        subwindowacuninstall.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                windowacuninstallprogressbar.setVisibility(View.VISIBLE);
                windowacuninstallquantity("sub");
                totalquantity("sub");
                windowacuninstallprice("sub", windowacuninstallprice-diswindowacuninstallprice);
                totalprice61("sub", windowacuninstallprice-diswindowacuninstallprice,diswindowacuninstallprice,"Uninstall");
                totalsaved61("sub",diswindowacuninstallprice,"Uninstall");
                btn("false");
            }
        });

        addwindowaccombo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                windowaccomboprogressbar.setVisibility(View.VISIBLE);
                windowaccomboquantity("add");
                totalquantity("add");
                windowaccomboprice("add", windowaccomboprice-diswindowaccomboprice);
                totalprice61("add", windowaccomboprice-diswindowaccomboprice,diswindowaccomboprice,"Combo");
                totalsaved61("add",diswindowaccomboprice,"Combo");
                btn("false");
            }
        });
        subwindowaccombo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                windowaccomboprogressbar.setVisibility(View.VISIBLE);
                windowaccomboquantity("sub");
                totalquantity("sub");
                windowaccomboprice("sub", windowaccomboprice-diswindowaccomboprice);
                totalprice61("sub", windowaccomboprice-diswindowaccomboprice,diswindowaccomboprice,"Combo");
                totalsaved61("sub",diswindowaccomboprice,"Combo");
                btn("false");
            }
        });


        //cassetteac
        addcassetteacinstall.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                cassetteacinstallprogressbar.setVisibility(View.VISIBLE);
                cassetteacinstallquantity("add");
                totalquantity("add");
                cassetteacinstallprice("add", cassetteacinstallprice-discassetteacinstallprice);
                totalprice62("add", cassetteacinstallprice-discassetteacinstallprice,discassetteacinstallprice,"Install");
                totalsaved62("add",discassetteacinstallprice,"Install");
                btn("false");
            }
        });
        subcassetteacinstall.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                cassetteacinstallprogressbar.setVisibility(View.VISIBLE);
                cassetteacinstallquantity("sub");
                totalquantity("sub");
                cassetteacinstallprice("sub", cassetteacinstallprice-discassetteacinstallprice);
                totalprice62("sub", cassetteacinstallprice-discassetteacinstallprice,discassetteacinstallprice,"Install");
                totalsaved62("sub",discassetteacinstallprice,"Install");
                btn("false");
            }
        });

        addcassetteacuninstall.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                cassetteacuninstallprogressbar.setVisibility(View.VISIBLE);
                cassetteacuninstallquantity("add");
                totalquantity("add");
                cassetteacuninstallprice("add", cassetteacuninstallprice-discassetteacuninstallprice);
                totalprice62("add", cassetteacuninstallprice-discassetteacuninstallprice,discassetteacuninstallprice,"Uninstall");
                totalsaved62("add",discassetteacuninstallprice,"Uninstall");
                btn("false");
            }
        });
        subcassetteacuninstall.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                cassetteacuninstallprogressbar.setVisibility(View.VISIBLE);
                cassetteacuninstallquantity("sub");
                totalquantity("sub");
                cassetteacuninstallprice("sub", cassetteacuninstallprice-discassetteacuninstallprice);
                totalprice62("sub", cassetteacuninstallprice-discassetteacuninstallprice,discassetteacuninstallprice,"Uninstall");
                totalsaved62("sub",discassetteacuninstallprice,"Uninstall");
                btn("false");
            }
        });

        addcassetteaccombo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                cassetteaccomboprogressbar.setVisibility(View.VISIBLE);
                cassetteaccomboquantity("add");
                totalquantity("add");
                cassetteaccomboprice("add", cassetteaccomboprice-discassetteaccomboprice);
                totalprice62("add", cassetteaccomboprice-discassetteaccomboprice,discassetteaccomboprice,"Combo");
                totalsaved62("add",discassetteaccomboprice,"Combo");
                btn("false");
            }
        });
        subcassetteaccombo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                cassetteaccomboprogressbar.setVisibility(View.VISIBLE);
                cassetteaccomboquantity("sub");
                totalquantity("sub");
                cassetteaccomboprice("sub", cassetteaccomboprice-discassetteaccomboprice);
                totalprice62("sub", cassetteaccomboprice-discassetteaccomboprice,discassetteaccomboprice,"Combo");
                totalsaved62("sub",discassetteaccomboprice,"Combo");
                btn("false");
            }
        });

    }

    // TOTAL QUANTITY

    private void totalquantity(String action) {

        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartquantity = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALQUANTITY").getValue().toString();
                    int cartquantity = Integer.parseInt(stringcartquantity);
                    cartquantity = cartquantity + 1;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALQUANTITY", Integer.toString(cartquantity));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartquantity = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALQUANTITY").getValue().toString();
                    int cartquantity = Integer.parseInt(stringcartquantity);
                    cartquantity = cartquantity - 1;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALQUANTITY", Integer.toString(cartquantity));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // TOTAL PRICE
    private void totalprice1(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    int totaldiscount1 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child(Categoryname).getValue().toString());

                    if(totaldiscount1==1 )
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }



//                    //waterwash
////
//                    int totaldiscount4 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child(Categoryname).getValue().toString());
////
////
//                    if(totaldiscount4==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }


//                     //amc
                    //split
                    //scheme1
//                    int totaldiscount9 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString());
//                    if(totaldiscount9==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    int totaldiscount10 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString());
//                    if(totaldiscount10==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    int totaldiscount11 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString());
//                    if(totaldiscount11==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                   // scheme2
//                    int totaldiscount12 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Totalspare").getValue().toString());
//                    int totaldiscount13= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Limitedspare").getValue().toString());
//                    int totaldiscount14= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").child("Nospare").getValue().toString());
//                    //scheme3
//                    int totaldiscount15 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Totalspare").getValue().toString());
//                    int totaldiscount0= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Limitedspare").getValue().toString());
//                    int totaldiscount16 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").child("Nospare").getValue().toString());
//
//
//                    //windowac
//                    //scheme1
//                    int totaldiscount18 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString());
//                    int totaldiscount19= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString());
//                    int totaldiscount17 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString());
//                    //scheme2
//                    int totaldiscount20= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").child("Nospare").getValue().toString());
//                    int totaldiscount21 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Totalspare").getValue().toString());
//                    int totaldiscount22 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Limitedspare").getValue().toString());
//
//                    //cassette
//                    int totaldiscount23 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString());
//                    int totaldiscount24 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString());
//                    int totaldiscount25 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString());
//
//
////
//
//                    if(totaldiscount12==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount13==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount14==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//
//                    if(totaldiscount15==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount16==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount17==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount18==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount19==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount20==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount21==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount22==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount23==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount24==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount25==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount0==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//
//
//
//
//
//
//
//
//                    int splitdiscount26 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Capacitor").getValue().toString());
//                    int splitdiscount27 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Blower").getValue().toString());
//                    int splitdiscount28 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoorfan").getValue().toString());
//                    int splitdiscount29 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Indoormotor").getValue().toString());
//                    int splitdiscount30 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoormotor").getValue().toString());
//                    int splitdiscount31 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Swingmotor").getValue().toString());
//                    int splitdiscount32 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Indoorcoil").getValue().toString());
//                    int splitdiscount33 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoorcondenser").getValue().toString());
//                    int splitdiscount34 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Swingflap").getValue().toString());
//                    int splitdiscount35 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Remote").getValue().toString());
//
//
//                    int splitdiscount36 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Capacitor").getValue().toString());
//                    int splitdiscount37 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Blower").getValue().toString());;
//                    int splitdiscount38 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoorfan").getValue().toString());
//                    int splitdiscount39 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Indoormotor").getValue().toString());
//                    int splitdiscount40 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoormotor").getValue().toString());
//                    int splitdiscount41 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Swingmotor").getValue().toString());
//                    int splitdiscount42 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Indoorcoil").getValue().toString());
//                    int splitdiscount43 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoorcondenser").getValue().toString());
//                    int splitdiscount44 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Swingflap").getValue().toString());
//                    int splitdiscount45 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Remote").getValue().toString());
//
//                    int splitdiscount46 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Capacitor").getValue().toString());
//                    int splitdiscount47 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Blower").getValue().toString());
//                    int splitdiscount48 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoorfan").getValue().toString());
//                    int splitdiscount49 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Indoormotor").getValue().toString());
//                    int splitdiscount50 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoormotor").getValue().toString());
//                    int splitdiscount51 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Swingmotor").getValue().toString());
//                    int splitdiscount52 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Indoorcoil").getValue().toString());;
//                    int splitdiscount53 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoorcondenser").getValue().toString());
//                    int splitdiscount54 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Swingflap").getValue().toString());
//                    int splitdiscount55 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Remote").getValue().toString());
//
////
//                    if(splitdiscount26==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount27==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount28==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount29==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount30==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount31==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount32==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount33==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount34==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount35==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount36==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount37==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount38==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount39==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount40==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount41==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount42==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount43==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount44==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount45==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount46==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount47==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount48==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount49==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount50==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount51==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount52==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount53==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount54==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount55==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//
//
//
//
//                    int splitdiscount57 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Waterleak").getValue().toString());
//                    int splitdiscount58 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Pcboard").getValue().toString());
//                    int splitdiscount59 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Stabilizer").getValue().toString());
//                    int splitdiscount60 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Indoorcoil").getValue().toString());
//                    int splitdiscount61 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Outdoorcondenser").getValue().toString());
//                    int splitdiscount62 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Remote").getValue().toString());
//
//
//
//
//                    int splitdiscount63 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Waterleak").getValue().toString());
//                    int splitdiscount76 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Gasleak").getValue().toString());;
//                    int splitdiscount64 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Pcboard").getValue().toString());
//                    int splitdiscount65 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Stabilizer").getValue().toString());
//                    int splitdiscount66 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Indoorcoil").getValue().toString());
//                    int splitdiscount67 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Outdoorcondenser").getValue().toString());
//                    int splitdiscount68 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Remote").getValue().toString());
//
//
//                    int splitdiscount69 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Waterleak").getValue().toString());
//                    int splitdiscount70 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Gasleak").getValue().toString());
//                    int splitdiscount71 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Pcboard").getValue().toString());
//                    int splitdiscount72 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Stabilizer").getValue().toString());
//                    int splitdiscount73 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Indoorcoil").getValue().toString());
//                    int splitdiscount74 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Outdoorcondenser").getValue().toString());
//                    int splitdiscount75 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Remote").getValue().toString());;
//
//                    if(splitdiscount57==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//
//
//                    if(splitdiscount58==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount59==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount60==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount61==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount62==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount63==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount64==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount65==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount66==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount67==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount68==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount69==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount70==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount71==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount72==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount73==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount74==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount75==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount76==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
////Install
////Combo
////Uninstall
//
//                    int splitdiscount77 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Install").getValue().toString());
//                    int splitdiscount78 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Uninstall").getValue().toString());
//                    int splitdiscount79 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Combo").getValue().toString());
//                    int splitdiscount80 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Install").getValue().toString());
//                    int splitdiscount81 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Uninstall").getValue().toString());
//                    int splitdiscount82 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Combo").getValue().toString());
//                    int splitdiscount83= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Install").getValue().toString());
//                    int splitdiscount84 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Uninstall").getValue().toString());
//                    int splitdiscount85 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Combo").getValue().toString());
//                    if(splitdiscount77==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount78==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount79==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount80==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount81==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount82==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount83==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount84==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount85==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }

                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
    private void totalprice2(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);




//                    //waterwash
////
                    int totaldiscount4 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child(Categoryname).getValue().toString());
//
//
                    if(totaldiscount4==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }


//                     //amc
                    //split
                    //scheme1
//                    int totaldiscount9 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString());
//                    if(totaldiscount9==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    int totaldiscount10 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString());
//                    if(totaldiscount10==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    int totaldiscount11 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString());
//                    if(totaldiscount11==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                   // scheme2
//                    int totaldiscount12 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Totalspare").getValue().toString());
//                    int totaldiscount13= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Limitedspare").getValue().toString());
//                    int totaldiscount14= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").child("Nospare").getValue().toString());
//                    //scheme3
//                    int totaldiscount15 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Totalspare").getValue().toString());
//                    int totaldiscount0= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Limitedspare").getValue().toString());
//                    int totaldiscount16 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").child("Nospare").getValue().toString());
//
//
//                    //windowac
//                    //scheme1
//                    int totaldiscount18 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString());
//                    int totaldiscount19= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString());
//                    int totaldiscount17 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString());
//                    //scheme2
//                    int totaldiscount20= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").child("Nospare").getValue().toString());
//                    int totaldiscount21 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Totalspare").getValue().toString());
//                    int totaldiscount22 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Limitedspare").getValue().toString());
//
//                    //cassette
//                    int totaldiscount23 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString());
//                    int totaldiscount24 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString());
//                    int totaldiscount25 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString());
//
//
////
//
//                    if(totaldiscount12==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount13==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount14==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//
//                    if(totaldiscount15==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount16==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount17==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount18==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount19==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount20==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount21==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount22==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount23==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount24==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount25==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(totaldiscount0==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//
//
//
//
//
//
//
//
//                    int splitdiscount26 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Capacitor").getValue().toString());
//                    int splitdiscount27 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Blower").getValue().toString());
//                    int splitdiscount28 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoorfan").getValue().toString());
//                    int splitdiscount29 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Indoormotor").getValue().toString());
//                    int splitdiscount30 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoormotor").getValue().toString());
//                    int splitdiscount31 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Swingmotor").getValue().toString());
//                    int splitdiscount32 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Indoorcoil").getValue().toString());
//                    int splitdiscount33 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoorcondenser").getValue().toString());
//                    int splitdiscount34 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Swingflap").getValue().toString());
//                    int splitdiscount35 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Remote").getValue().toString());
//
//
//                    int splitdiscount36 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Capacitor").getValue().toString());
//                    int splitdiscount37 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Blower").getValue().toString());;
//                    int splitdiscount38 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoorfan").getValue().toString());
//                    int splitdiscount39 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Indoormotor").getValue().toString());
//                    int splitdiscount40 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoormotor").getValue().toString());
//                    int splitdiscount41 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Swingmotor").getValue().toString());
//                    int splitdiscount42 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Indoorcoil").getValue().toString());
//                    int splitdiscount43 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoorcondenser").getValue().toString());
//                    int splitdiscount44 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Swingflap").getValue().toString());
//                    int splitdiscount45 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Remote").getValue().toString());
//
//                    int splitdiscount46 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Capacitor").getValue().toString());
//                    int splitdiscount47 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Blower").getValue().toString());
//                    int splitdiscount48 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoorfan").getValue().toString());
//                    int splitdiscount49 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Indoormotor").getValue().toString());
//                    int splitdiscount50 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoormotor").getValue().toString());
//                    int splitdiscount51 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Swingmotor").getValue().toString());
//                    int splitdiscount52 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Indoorcoil").getValue().toString());;
//                    int splitdiscount53 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoorcondenser").getValue().toString());
//                    int splitdiscount54 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Swingflap").getValue().toString());
//                    int splitdiscount55 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Remote").getValue().toString());
//
////
//                    if(splitdiscount26==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount27==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount28==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount29==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount30==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount31==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount32==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount33==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount34==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount35==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount36==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount37==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount38==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount39==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount40==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount41==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount42==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount43==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount44==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount45==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount46==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount47==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount48==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount49==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount50==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount51==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount52==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount53==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount54==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount55==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//
//
//
//
//                    int splitdiscount57 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Waterleak").getValue().toString());
//                    int splitdiscount58 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Pcboard").getValue().toString());
//                    int splitdiscount59 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Stabilizer").getValue().toString());
//                    int splitdiscount60 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Indoorcoil").getValue().toString());
//                    int splitdiscount61 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Outdoorcondenser").getValue().toString());
//                    int splitdiscount62 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Remote").getValue().toString());
//
//
//
//
//                    int splitdiscount63 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Waterleak").getValue().toString());
//                    int splitdiscount76 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Gasleak").getValue().toString());;
//                    int splitdiscount64 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Pcboard").getValue().toString());
//                    int splitdiscount65 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Stabilizer").getValue().toString());
//                    int splitdiscount66 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Indoorcoil").getValue().toString());
//                    int splitdiscount67 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Outdoorcondenser").getValue().toString());
//                    int splitdiscount68 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Remote").getValue().toString());
//
//
//                    int splitdiscount69 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Waterleak").getValue().toString());
//                    int splitdiscount70 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Gasleak").getValue().toString());
//                    int splitdiscount71 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Pcboard").getValue().toString());
//                    int splitdiscount72 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Stabilizer").getValue().toString());
//                    int splitdiscount73 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Indoorcoil").getValue().toString());
//                    int splitdiscount74 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Outdoorcondenser").getValue().toString());
//                    int splitdiscount75 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Remote").getValue().toString());;
//
//                    if(splitdiscount57==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//
//
//                    if(splitdiscount58==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount59==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount60==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount61==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount62==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount63==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount64==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount65==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount66==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount67==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount68==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount69==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount70==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount71==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount72==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount73==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount74==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount75==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
//                    if(splitdiscount76==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }
////Install
////Combo
////Uninstall
//
//                    int splitdiscount77 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Install").getValue().toString());
//                    int splitdiscount78 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Uninstall").getValue().toString());
//                    int splitdiscount79 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Combo").getValue().toString());
//                    int splitdiscount80 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Install").getValue().toString());
//                    int splitdiscount81 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Uninstall").getValue().toString());
//                    int splitdiscount82 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Combo").getValue().toString());
//                    int splitdiscount83= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Install").getValue().toString());
//                    int splitdiscount84 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Uninstall").getValue().toString());
//                    int splitdiscount85 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Combo").getValue().toString());
//                    if(splitdiscount77==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount78==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount79==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount80==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount81==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount82==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount83==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount84==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }  if(splitdiscount85==1)
//                    {
//                        cartprice = cartprice - price - discount;
//                    }
//                    else
//                    {
//                        cartprice = cartprice - price;
//                    }

                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
//////////////////////////////////////////
    private void totalprice3ss1(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);





                 //amc
                  //  split
                    //scheme1
                    int totaldiscount9 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child(Categoryname).getValue().toString());


                    if(totaldiscount9==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }



                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
    private void totalprice3ss11(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);





                    //amc
                    //  split
                    //scheme1

                    int totaldiscount11 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").child(Categoryname).getValue().toString());


                    if(totaldiscount11==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void totalprice3ss2(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);





                    // scheme2
                    int totaldiscount12 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child(Categoryname).getValue().toString());




                    if(totaldiscount12==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }



                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
    private void totalprice3ss21(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);





                    // scheme2

                    int totaldiscount14= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").child(Categoryname).getValue().toString());




                    if(totaldiscount14==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void totalprice3ss3(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);





                     //scheme3
                    int totaldiscount15 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child(Categoryname).getValue().toString());




                    if(totaldiscount15==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }



                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
    private void totalprice3ss31(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);





                    //scheme3

                    int totaldiscount16 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").child(Categoryname).getValue().toString());



                    if(totaldiscount16==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
/////////////////////////////////////////////////
    private void totalprice3ws1(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);






                    //windowac
                    //scheme1
                    int totaldiscount18 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child(Categoryname).getValue().toString());


//

                    if(totaldiscount18==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }



                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
    private void totalprice3ws11(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);






                    //windowac
                    //scheme1

                    int totaldiscount19= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").child(Categoryname).getValue().toString());


//


                    if(totaldiscount19==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void totalprice3ws2(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);




                    int totaldiscount22 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child(Categoryname).getValue().toString());


                    if(totaldiscount22==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }

                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
    private void totalprice3ws21(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);




                    //scheme2
                    int totaldiscount20= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").child(Categoryname).getValue().toString());






                    if(totaldiscount20==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }

                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
///////////////////////////////////////////////////////////////////
    private void totalprice3cs1(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);





                    //cassette

                    int totaldiscount25 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child(Categoryname).getValue().toString());




                    if(totaldiscount25==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
    private void totalprice3cs11(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);





                    //cassette
                    int totaldiscount23 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").child(Categoryname).getValue().toString());





                    if(totaldiscount23==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }



    private void totalprice4(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);














                    int splitdiscount26 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child(Categoryname).getValue().toString());



                    if(splitdiscount26==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }




                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
    private void totalprice41(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);









                    int splitdiscount36 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child(Categoryname).getValue().toString());


                    if(splitdiscount36==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }

                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
    private void totalprice42(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);













                    int splitdiscount46 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child(Categoryname).getValue().toString());

                    if(splitdiscount46==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }



                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void totalprice5(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);


                    int splitdiscount57 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child(Categoryname).getValue().toString());

                    if(splitdiscount57==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
    private void totalprice51(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);


                    int splitdiscount68 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child(Categoryname).getValue().toString());


                    if(splitdiscount68==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }

                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
    private void totalprice52(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);


















                    int splitdiscount69 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child(Categoryname).getValue().toString());

                    if(splitdiscount69==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void totalprice6(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);

//Install
//Combo
//Uninstall

                    int splitdiscount77 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child(Categoryname).getValue().toString());


                     if(splitdiscount77==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }

                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
    private void totalprice61(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);


                    int splitdiscount80 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child(Categoryname).getValue().toString());

                   if(splitdiscount80==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }

                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }
    private void totalprice62(String action, int price,int discount, String Categoryname) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);
                    cartprice = cartprice + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartprice = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALPRICE").getValue().toString();
                    int cartprice = Integer.parseInt(stringcartprice);


                    int splitdiscount85 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child(Categoryname).getValue().toString());
                    if(splitdiscount85==1)
                    {
                        cartprice = cartprice - price - discount;
                    }
                    else
                    {
                        cartprice = cartprice - price;
                    }

                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALPRICE", Integer.toString(cartprice));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // ACTIVATE BUTTON

    private void btn(String action) {
        if (action == "false") {

            // GENERAL SERVICE
            gsaddsplit.setEnabled(false);
            gssubsplit.setEnabled(false);
            gsaddwindow.setEnabled(false);
            gssubwindow.setEnabled(false);
            gsaddcassette.setEnabled(false);
            gssubcassette.setEnabled(false);

            // WATERWASH
            wwaddsplitss.setEnabled(false);
            wwsubsplitss.setEnabled(false);
            wwaddwindowss.setEnabled(false);
            wwsubwindowss.setEnabled(false);
            wwaddcassettess.setEnabled(false);
            wwsubcassettess.setEnabled(false);
            wwaddsplit360.setEnabled(false);
            wwsubsplit360.setEnabled(false);
            wwaddcassette360.setEnabled(false);
            wwsubcassette360.setEnabled(false);

            // AMC
            amcsplitscheme1withsparetotaladd.setEnabled(false);
            amcsplitscheme1withsparetotalsub.setEnabled(false);
            amcsplitscheme1withsparelimitedadd.setEnabled(false);
            amcsplitscheme1withsparelimitedsub.setEnabled(false);
            amcsplitscheme1withsparenoadd.setEnabled(false);
            amcsplitscheme1withsparenosub.setEnabled(false);

            amcsplitscheme2withsparetotaladd.setEnabled(false);
            amcsplitscheme2withsparetotalsub.setEnabled(false);
            amcsplitscheme2withsparelimitedadd.setEnabled(false);
            amcsplitscheme2withsparelimitedsub.setEnabled(false);
            amcsplitscheme2withsparenoadd.setEnabled(false);
            amcsplitscheme2withsparenosub.setEnabled(false);

            amcsplitscheme3withsparetotaladd.setEnabled(false);
            amcsplitscheme3withsparetotalsub.setEnabled(false);
            amcsplitscheme3withsparelimitedadd.setEnabled(false);
            amcsplitscheme3withsparelimitedsub.setEnabled(false);
            amcsplitscheme3withsparenoadd.setEnabled(false);
            amcsplitscheme3withsparenosub.setEnabled(false);

            amcwindowscheme1withsparetotaladd.setEnabled(false);
            amcwindowscheme1withsparetotalsub.setEnabled(false);
            amcwindowscheme1withsparelimitedadd.setEnabled(false);
            amcwindowscheme1withsparelimitedsub.setEnabled(false);
            amcwindowscheme1withsparenoadd.setEnabled(false);
            amcwindowscheme1withsparenosub.setEnabled(false);

            amcwindowscheme2withsparetotaladd.setEnabled(false);
            amcwindowscheme2withsparetotalsub.setEnabled(false);
            amcwindowscheme2withsparelimitedadd.setEnabled(false);
            amcwindowscheme2withsparelimitedsub.setEnabled(false);
            amcwindowscheme2withsparenoadd.setEnabled(false);
            amcwindowscheme2withsparenosub.setEnabled(false);

            amccassettescheme1withsparetotaladd.setEnabled(false);
            amccassettescheme1withsparetotalsub.setEnabled(false);
            amccassettescheme1withsparelimitedadd.setEnabled(false);
            amccassettescheme1withsparelimitedsub.setEnabled(false);
            amccassettescheme1withsparenoadd.setEnabled(false);
            amccassettescheme1withsparenosub.setEnabled(false);

            // SPARES
            //SPLITAC
            addsparesplitaccapacitor.setEnabled(false);
            subsparesplitaccapacitor.setEnabled(false);

            addsparesplitacblower.setEnabled(false);
            subsparesplitacblower.setEnabled(false);

            addsparesplitacoutdoorfan.setEnabled(false);
            subsparesplitacoutdoorfan.setEnabled(false);

            addsparesplitacindoormotor.setEnabled(false);
            subsparesplitacindoormotor.setEnabled(false);

            addsparesplitacoutdoormotor.setEnabled(false);
            subsparesplitacoutdoormotor.setEnabled(false);

            addsparesplitacswingmotor.setEnabled(false);
            subsparesplitacswingmotor.setEnabled(false);

            addsparesplitacindoorcoil.setEnabled(false);
            subsparesplitacindoorcoil.setEnabled(false);

            addsparesplitacoutdoorcondenser.setEnabled(false);
            subsparesplitacoutdoorcondenser.setEnabled(false);

            addsparesplitacswingflap.setEnabled(false);
            subsparesplitacswingflap.setEnabled(false);

            addsparesplitacremote.setEnabled(false);
            subsparesplitacremote.setEnabled(false);

            //windowAC
            addsparewindowaccapacitor.setEnabled(false);
            subsparewindowaccapacitor.setEnabled(false);

            addsparewindowacblower.setEnabled(false);
            subsparewindowacblower.setEnabled(false);

            addsparewindowacoutdoorfan.setEnabled(false);
            subsparewindowacoutdoorfan.setEnabled(false);

            addsparewindowacindoormotor.setEnabled(false);
            subsparewindowacindoormotor.setEnabled(false);

            addsparewindowacoutdoormotor.setEnabled(false);
            subsparewindowacoutdoormotor.setEnabled(false);

            addsparewindowacswingmotor.setEnabled(false);
            subsparewindowacswingmotor.setEnabled(false);

            addsparewindowacindoorcoil.setEnabled(false);
            subsparewindowacindoorcoil.setEnabled(false);

            addsparewindowacoutdoorcondenser.setEnabled(false);
            subsparewindowacoutdoorcondenser.setEnabled(false);

            addsparewindowacswingflap.setEnabled(false);
            subsparewindowacswingflap.setEnabled(false);

            addsparewindowacremote.setEnabled(false);
            subsparewindowacremote.setEnabled(false);

            //cassetteAC
            addsparecassetteaccapacitor.setEnabled(false);
            subsparecassetteaccapacitor.setEnabled(false);

            addsparecassetteacblower.setEnabled(false);
            subsparecassetteacblower.setEnabled(false);

            addsparecassetteacoutdoorfan.setEnabled(false);
            subsparecassetteacoutdoorfan.setEnabled(false);

            addsparecassetteacindoormotor.setEnabled(false);
            subsparecassetteacindoormotor.setEnabled(false);

            addsparecassetteacoutdoormotor.setEnabled(false);
            subsparecassetteacoutdoormotor.setEnabled(false);

            addsparecassetteacswingmotor.setEnabled(false);
            subsparecassetteacswingmotor.setEnabled(false);

            addsparecassetteacindoorcoil.setEnabled(false);
            subsparecassetteacindoorcoil.setEnabled(false);

            addsparecassetteacoutdoorcondenser.setEnabled(false);
            subsparecassetteacoutdoorcondenser.setEnabled(false);

            addsparecassetteacswingflap.setEnabled(false);
            subsparecassetteacswingflap.setEnabled(false);

            addsparecassetteacremote.setEnabled(false);
            subsparecassetteacremote.setEnabled(false);

            // faults
            //SPLITAC

            addfaultsplitacwaterleak.setEnabled(false);
            subfaultsplitacwaterleak.setEnabled(false);

            addfaultsplitacgasleak.setEnabled(false);
            subfaultsplitacgasleak.setEnabled(false);

            addfaultsplitacpcboard.setEnabled(false);
            subfaultsplitacpcboard.setEnabled(false);

            addfaultsplitacstabilizer.setEnabled(false);
            subfaultsplitacstabilizer.setEnabled(false);

            addfaultsplitacindoorcoil.setEnabled(false);
            subfaultsplitacindoorcoil.setEnabled(false);

            addfaultsplitacoutdoorcondenser.setEnabled(false);
            subfaultsplitacoutdoorcondenser.setEnabled(false);

            addfaultsplitacremote.setEnabled(false);
            subfaultsplitacremote.setEnabled(false);

            //windowAC

            addfaultwindowacwaterleak.setEnabled(false);
            subfaultwindowacwaterleak.setEnabled(false);

            addfaultwindowacgasleak.setEnabled(false);
            subfaultwindowacgasleak.setEnabled(false);

            addfaultwindowacpcboard.setEnabled(false);
            subfaultwindowacpcboard.setEnabled(false);

            addfaultwindowacstabilizer.setEnabled(false);
            subfaultwindowacstabilizer.setEnabled(false);

            addfaultwindowacindoorcoil.setEnabled(false);
            subfaultwindowacindoorcoil.setEnabled(false);

            addfaultwindowacoutdoorcondenser.setEnabled(false);
            subfaultwindowacoutdoorcondenser.setEnabled(false);

            addfaultwindowacremote.setEnabled(false);
            subfaultwindowacremote.setEnabled(false);

            //cassetteAC

            addfaultcassetteacwaterleak.setEnabled(false);
            subfaultcassetteacwaterleak.setEnabled(false);

            addfaultcassetteacgasleak.setEnabled(false);
            subfaultcassetteacgasleak.setEnabled(false);

            addfaultcassetteacpcboard.setEnabled(false);
            subfaultcassetteacpcboard.setEnabled(false);

            addfaultcassetteacstabilizer.setEnabled(false);
            subfaultcassetteacstabilizer.setEnabled(false);

            addfaultcassetteacindoorcoil.setEnabled(false);
            subfaultcassetteacindoorcoil.setEnabled(false);

            addfaultcassetteacoutdoorcondenser.setEnabled(false);
            subfaultcassetteacoutdoorcondenser.setEnabled(false);

            addfaultcassetteacremote.setEnabled(false);
            subfaultcassetteacremote.setEnabled(false);

            //installation and uninstallation

            /// splitac
            addsplitacinstall.setEnabled(false);
            subsplitacinstall.setEnabled(false);

            addsplitacuninstall.setEnabled(false);
            subsplitacuninstall.setEnabled(false);

            addsplitaccombo.setEnabled(false);
            subsplitaccombo.setEnabled(false);

            /// windowac
            addwindowacinstall.setEnabled(false);
            subwindowacinstall.setEnabled(false);

            addwindowacuninstall.setEnabled(false);
            subwindowacuninstall.setEnabled(false);

            addwindowaccombo.setEnabled(false);
            subwindowaccombo.setEnabled(false);

            /// cassetteac
            addcassetteacinstall.setEnabled(false);
            subcassetteacinstall.setEnabled(false);

            addcassetteacuninstall.setEnabled(false);
            subcassetteacuninstall.setEnabled(false);

            addcassetteaccombo.setEnabled(false);
            subcassetteaccombo.setEnabled(false);
        } else if (action == "true") {
            // GENERAL SERVICE
            gsaddsplit.setEnabled(true);
            gssubsplit.setEnabled(true);
            gsaddwindow.setEnabled(true);
            gssubwindow.setEnabled(true);
            gsaddcassette.setEnabled(true);
            gssubcassette.setEnabled(true);

            // WATERWASH
            wwaddsplitss.setEnabled(true);
            wwsubsplitss.setEnabled(true);
            wwaddwindowss.setEnabled(true);
            wwsubwindowss.setEnabled(true);
            wwaddcassettess.setEnabled(true);
            wwsubcassettess.setEnabled(true);
            wwaddsplit360.setEnabled(true);
            wwsubsplit360.setEnabled(true);
            wwaddcassette360.setEnabled(true);
            wwsubcassette360.setEnabled(true);

            // AMC
            amcsplitscheme1withsparetotaladd.setEnabled(true);
            amcsplitscheme1withsparetotalsub.setEnabled(true);
            amcsplitscheme1withsparelimitedadd.setEnabled(true);
            amcsplitscheme1withsparelimitedsub.setEnabled(true);
            amcsplitscheme1withsparenoadd.setEnabled(true);
            amcsplitscheme1withsparenosub.setEnabled(true);

            amcsplitscheme2withsparetotaladd.setEnabled(true);
            amcsplitscheme2withsparetotalsub.setEnabled(true);
            amcsplitscheme2withsparelimitedadd.setEnabled(true);
            amcsplitscheme2withsparelimitedsub.setEnabled(true);
            amcsplitscheme2withsparenoadd.setEnabled(true);
            amcsplitscheme2withsparenosub.setEnabled(true);

            amcsplitscheme3withsparetotaladd.setEnabled(true);
            amcsplitscheme3withsparetotalsub.setEnabled(true);
            amcsplitscheme3withsparelimitedadd.setEnabled(true);
            amcsplitscheme3withsparelimitedsub.setEnabled(true);
            amcsplitscheme3withsparenoadd.setEnabled(true);
            amcsplitscheme3withsparenosub.setEnabled(true);

            amcwindowscheme1withsparetotaladd.setEnabled(true);
            amcwindowscheme1withsparetotalsub.setEnabled(true);
            amcwindowscheme1withsparelimitedadd.setEnabled(true);
            amcwindowscheme1withsparelimitedsub.setEnabled(true);
            amcwindowscheme1withsparenoadd.setEnabled(true);
            amcwindowscheme1withsparenosub.setEnabled(true);

            amcwindowscheme2withsparetotaladd.setEnabled(true);
            amcwindowscheme2withsparetotalsub.setEnabled(true);
            amcwindowscheme2withsparelimitedadd.setEnabled(true);
            amcwindowscheme2withsparelimitedsub.setEnabled(true);
            amcwindowscheme2withsparenoadd.setEnabled(true);
            amcwindowscheme2withsparenosub.setEnabled(true);

            amccassettescheme1withsparetotaladd.setEnabled(true);
            amccassettescheme1withsparetotalsub.setEnabled(true);
            amccassettescheme1withsparelimitedadd.setEnabled(true);
            amccassettescheme1withsparelimitedsub.setEnabled(true);
            amccassettescheme1withsparenoadd.setEnabled(true);
            amccassettescheme1withsparenosub.setEnabled(true);

            // SPARES
            //SPLITAC
            addsparesplitaccapacitor.setEnabled(true);
            subsparesplitaccapacitor.setEnabled(true);

            addsparesplitacblower.setEnabled(true);
            subsparesplitacblower.setEnabled(true);

            addsparesplitacoutdoorfan.setEnabled(true);
            subsparesplitacoutdoorfan.setEnabled(true);

            addsparesplitacindoormotor.setEnabled(true);
            subsparesplitacindoormotor.setEnabled(true);

            addsparesplitacoutdoormotor.setEnabled(true);
            subsparesplitacoutdoormotor.setEnabled(true);

            addsparesplitacswingmotor.setEnabled(true);
            subsparesplitacswingmotor.setEnabled(true);

            addsparesplitacindoorcoil.setEnabled(true);
            subsparesplitacindoorcoil.setEnabled(true);

            addsparesplitacoutdoorcondenser.setEnabled(true);
            subsparesplitacoutdoorcondenser.setEnabled(true);

            addsparesplitacswingflap.setEnabled(true);
            subsparesplitacswingflap.setEnabled(true);

            addsparesplitacremote.setEnabled(true);
            subsparesplitacremote.setEnabled(true);

            //windowAC
            addsparewindowaccapacitor.setEnabled(true);
            subsparewindowaccapacitor.setEnabled(true);

            addsparewindowacblower.setEnabled(true);
            subsparewindowacblower.setEnabled(true);

            addsparewindowacoutdoorfan.setEnabled(true);
            subsparewindowacoutdoorfan.setEnabled(true);

            addsparewindowacindoormotor.setEnabled(true);
            subsparewindowacindoormotor.setEnabled(true);

            addsparewindowacoutdoormotor.setEnabled(true);
            subsparewindowacoutdoormotor.setEnabled(true);

            addsparewindowacswingmotor.setEnabled(true);
            subsparewindowacswingmotor.setEnabled(true);

            addsparewindowacindoorcoil.setEnabled(true);
            subsparewindowacindoorcoil.setEnabled(true);

            addsparewindowacoutdoorcondenser.setEnabled(true);
            subsparewindowacoutdoorcondenser.setEnabled(true);

            addsparewindowacswingflap.setEnabled(true);
            subsparewindowacswingflap.setEnabled(true);

            addsparewindowacremote.setEnabled(true);
            subsparewindowacremote.setEnabled(true);

            //cassetteAC
            addsparecassetteaccapacitor.setEnabled(true);
            subsparecassetteaccapacitor.setEnabled(true);

            addsparecassetteacblower.setEnabled(true);
            subsparecassetteacblower.setEnabled(true);

            addsparecassetteacoutdoorfan.setEnabled(true);
            subsparecassetteacoutdoorfan.setEnabled(true);

            addsparecassetteacindoormotor.setEnabled(true);
            subsparecassetteacindoormotor.setEnabled(true);

            addsparecassetteacoutdoormotor.setEnabled(true);
            subsparecassetteacoutdoormotor.setEnabled(true);

            addsparecassetteacswingmotor.setEnabled(true);
            subsparecassetteacswingmotor.setEnabled(true);

            addsparecassetteacindoorcoil.setEnabled(true);
            subsparecassetteacindoorcoil.setEnabled(true);

            addsparecassetteacoutdoorcondenser.setEnabled(true);
            subsparecassetteacoutdoorcondenser.setEnabled(true);

            addsparecassetteacswingflap.setEnabled(true);
            subsparecassetteacswingflap.setEnabled(true);

            addsparecassetteacremote.setEnabled(true);
            subsparecassetteacremote.setEnabled(true);

            // faults
            //SPLITAC
            addfaultsplitacwaterleak.setEnabled(true);
            subfaultsplitacwaterleak.setEnabled(true);

            addfaultsplitacgasleak.setEnabled(true);
            subfaultsplitacgasleak.setEnabled(true);

            addfaultsplitacpcboard.setEnabled(true);
            subfaultsplitacpcboard.setEnabled(true);

            addfaultsplitacstabilizer.setEnabled(true);
            subfaultsplitacstabilizer.setEnabled(true);

            addfaultsplitacindoorcoil.setEnabled(true);
            subfaultsplitacindoorcoil.setEnabled(true);

            addfaultsplitacoutdoorcondenser.setEnabled(true);
            subfaultsplitacoutdoorcondenser.setEnabled(true);

            addfaultsplitacremote.setEnabled(true);
            subfaultsplitacremote.setEnabled(true);

            //windowAC
            addfaultwindowacwaterleak.setEnabled(true);
            subfaultwindowacwaterleak.setEnabled(true);

            addfaultwindowacgasleak.setEnabled(true);
            subfaultwindowacgasleak.setEnabled(true);

            addfaultwindowacpcboard.setEnabled(true);
            subfaultwindowacpcboard.setEnabled(true);

            addfaultwindowacstabilizer.setEnabled(true);
            subfaultwindowacstabilizer.setEnabled(true);

            addfaultwindowacindoorcoil.setEnabled(true);
            subfaultwindowacindoorcoil.setEnabled(true);

            addfaultwindowacoutdoorcondenser.setEnabled(true);
            subfaultwindowacoutdoorcondenser.setEnabled(true);

            addfaultwindowacremote.setEnabled(true);
            subfaultwindowacremote.setEnabled(true);

            //cassetteAC
            addfaultcassetteacwaterleak.setEnabled(true);
            subfaultcassetteacwaterleak.setEnabled(true);

            addfaultcassetteacgasleak.setEnabled(true);
            subfaultcassetteacgasleak.setEnabled(true);

            addfaultcassetteacpcboard.setEnabled(true);
            subfaultcassetteacpcboard.setEnabled(true);

            addfaultcassetteacstabilizer.setEnabled(true);
            subfaultcassetteacstabilizer.setEnabled(true);

            addfaultcassetteacindoorcoil.setEnabled(true);
            subfaultcassetteacindoorcoil.setEnabled(true);

            addfaultcassetteacoutdoorcondenser.setEnabled(true);
            subfaultcassetteacoutdoorcondenser.setEnabled(true);

            addfaultcassetteacremote.setEnabled(true);
            subfaultcassetteacremote.setEnabled(true);

            //installation and uninstallation
            //splitac

            addsplitacinstall.setEnabled(true);
            subsplitacinstall.setEnabled(true);

            addsplitacuninstall.setEnabled(true);
            subsplitacuninstall.setEnabled(true);

            addsplitaccombo.setEnabled(true);
            subsplitaccombo.setEnabled(true);


            //windowac

            addwindowacinstall.setEnabled(true);
            subwindowacinstall.setEnabled(true);

            addwindowacuninstall.setEnabled(true);
            subwindowacuninstall.setEnabled(true);

            addwindowaccombo.setEnabled(true);
            subwindowaccombo.setEnabled(true);

            //cassetteac

            addcassetteacinstall.setEnabled(true);
            subcassetteacinstall.setEnabled(true);

            addcassetteacuninstall.setEnabled(true);
            subcassetteacuninstall.setEnabled(true);

            addcassetteaccombo.setEnabled(true);
            subcassetteaccombo.setEnabled(true);
        }
    }

    ///////////////////////////////////8888888888888888888888/////////////////////////////////////////////////////////

    // GENERAL SPLIT AC

    private void gssplitquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("SplitAC").getValue().toString();
                            int splitcount = Integer.parseInt(stringsplitcount);
                            splitcount = splitcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("SplitAC", Integer.toString(splitcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).updateChildren(cartt);
                            gssplitacprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("SplitAC").getValue().toString();
                            int splitcount = Integer.parseInt(stringsplitcount);
                            splitcount = splitcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("SplitAC", Integer.toString(splitcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).updateChildren(cartt);
                            if (splitcount <= 0) {
                                gssplitacprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                gssplitacprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void gssplitprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsplitcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("SplitACTOTAL").getValue().toString();
                    int splitcount = Integer.parseInt(stringsplitcount);
                    splitcount = splitcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SplitACTOTAL", Integer.toString(splitcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsplitcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("SplitACTOTAL").getValue().toString();
                    int splitcount = Integer.parseInt(stringsplitcount);
                    int splitdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("SplitAC").getValue().toString());
                    if(splitdiscount==1)
                    {
                        splitcount = splitcount - price - disgssplitacprice;
                    }
                    else
                    {
                        splitcount = splitcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SplitACTOTAL", Integer.toString(splitcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // GENERAL WINDOW AC

    private void gswindowquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("WindowAC").getValue().toString();
                            int windowcount = Integer.parseInt(stringwindowcount);
                            windowcount = windowcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("WindowAC", Integer.toString(windowcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).updateChildren(cartt);
                            gswindowacprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("WindowAC").getValue().toString();
                            int windowcount = Integer.parseInt(stringwindowcount);
                            windowcount = windowcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("WindowAC", Integer.toString(windowcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).updateChildren(cartt);
                            if (windowcount <= 0) {
                                gswindowacprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                gswindowacprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }                                         /////    general service

    private void gswindowprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringwindowcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("WindowACTOTAL").getValue().toString();
                    int windowcount = Integer.parseInt(stringwindowcount);
                    windowcount = windowcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("WindowACTOTAL", Integer.toString(windowcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringwindowcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("WindowACTOTAL").getValue().toString();
                    int windowcount = Integer.parseInt(stringwindowcount);
                    int splitdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("WindowAC").getValue().toString());
                    if(splitdiscount==1) {
                        windowcount = windowcount - price - disgswindowacprice;
                    }
                    else {
                        windowcount = windowcount - price;

                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("WindowACTOTAL", Integer.toString(windowcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // GENERAL CASSETTE AC

    private void gscassettequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassettecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("CassetteAC").getValue().toString();
                            int cassettecount = Integer.parseInt(stringcassettecount);
                            cassettecount = cassettecount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("CassetteAC", Integer.toString(cassettecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).updateChildren(cartt);
                            gscassetteacprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassettecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("CassetteAC").getValue().toString();
                            int cassettecount = Integer.parseInt(stringcassettecount);
                            cassettecount = cassettecount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("CassetteAC", Integer.toString(cassettecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).updateChildren(cartt);
                            if (cassettecount <= 0) {
                                gscassetteacprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                gscassetteacprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void gscassetteprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcassettecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("CassetteACTOTAL").getValue().toString();
                    int cassettecount = Integer.parseInt(stringcassettecount);
                    cassettecount = cassettecount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("CassetteACTOTAL", Integer.toString(cassettecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcassettecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("CassetteACTOTAL").getValue().toString();
                    int cassettecount = Integer.parseInt(stringcassettecount);
                    int splitdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child("CassetteAC").getValue().toString());
                    if(splitdiscount==1) {
                        cassettecount = cassettecount - price - disgscassetteacprice;
                    }
                    else {
                        cassettecount = cassettecount - price;

                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("CassetteACTOTAL", Integer.toString(cassettecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    /////////////////////////////////////////////8888888888888888888//////////////////////////////////////////////////////////////////////////

    // WATERWASH SPLITSS AC

    private void wwsplitssquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitsscount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("SplitSSAC").getValue().toString();
                            int splitsscount = Integer.parseInt(stringsplitsscount);
                            splitsscount = splitsscount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("SplitSSAC", Integer.toString(splitsscount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                            wwsplitssacprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitsscount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("SplitSSAC").getValue().toString();
                            int splitsscount = Integer.parseInt(stringsplitsscount);
                            splitsscount = splitsscount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("SplitSSAC", Integer.toString(splitsscount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                            if (splitsscount <= 0) {
                                wwsplitssacprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                wwsplitssacprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void wwsplitssprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsplitsscount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("SplitSSACTOTAL").getValue().toString();
                    int splitsscount = Integer.parseInt(stringsplitsscount);
                    splitsscount = splitsscount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SplitSSACTOTAL", Integer.toString(splitsscount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsplitsscount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("SplitSSACTOTAL").getValue().toString();
                    int splitsscount = Integer.parseInt(stringsplitsscount);
                    int splitdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("SplitSSAC").getValue().toString());
                    if(splitdiscount==1)
                    {
                        splitsscount = splitsscount - price - diswwsplitssacprice;
                    }
                    else
                    {
                        splitsscount = splitsscount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SplitSSACTOTAL", Integer.toString(splitsscount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // WATERWASH WINDOWSS AC

    private void wwwindowssquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowsscount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("WindowSSAC").getValue().toString();
                            int windowsscount = Integer.parseInt(stringwindowsscount);
                            windowsscount = windowsscount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("WindowSSAC", Integer.toString(windowsscount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                            wwwindowssacprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowsscount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("WindowSSAC").getValue().toString();
                            int windowsscount = Integer.parseInt(stringwindowsscount);
                            windowsscount = windowsscount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("WindowSSAC", Integer.toString(windowsscount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                            if (windowsscount <= 0) {
                                wwwindowssacprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                wwwindowssacprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void wwwindowssprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringwindowsscount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("WindowSSACTOTAL").getValue().toString();
                    int windowsscount = Integer.parseInt(stringwindowsscount);
                    windowsscount = windowsscount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("WindowSSACTOTAL", Integer.toString(windowsscount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringwindowsscount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("WindowSSACTOTAL").getValue().toString();
                    int windowsscount = Integer.parseInt(stringwindowsscount);
                    int windowdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("WindowSSAC").getValue().toString());
                    if(windowdiscount==1)
                    {
                        windowsscount = windowsscount - price - diswwwindowssacprice;
                    }
                    else
                    {
                        windowsscount = windowsscount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("WindowSSACTOTAL", Integer.toString(windowsscount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // WATERWASH CASSETTESS AC

    private void wwcassettessquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassettesscount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("CassetteSSAC").getValue().toString();
                            int cassettesscount = Integer.parseInt(stringcassettesscount);
                            cassettesscount = cassettesscount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("CassetteSSAC", Integer.toString(cassettesscount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                            wwcassettessacprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassettesscount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("CassetteSSAC").getValue().toString();
                            int cassettesscount = Integer.parseInt(stringcassettesscount);
                            cassettesscount = cassettesscount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("CassetteSSAC", Integer.toString(cassettesscount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                            if (cassettesscount <= 0) {
                                wwcassettessacprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                wwcassettessacprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void wwcassettessprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcassettesscount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("CassetteSSACTOTAL").getValue().toString();
                    int cassettesscount = Integer.parseInt(stringcassettesscount);
                    cassettesscount = cassettesscount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("CassetteSSACTOTAL", Integer.toString(cassettesscount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcassettesscount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("CassetteSSACTOTAL").getValue().toString();
                    int cassettesscount = Integer.parseInt(stringcassettesscount);
                    int cassettediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("CassetteSSAC").getValue().toString());
                    if(cassettediscount==1)
                    {
                        cassettesscount =  cassettesscount - price - diswwcassettessacprice;
                    }
                    else
                    {
                        cassettesscount =  cassettesscount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("CassetteSSACTOTAL", Integer.toString(cassettesscount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }                                /// WATER WASH

    // WATERWASH SPLIT360 AC

    private void wwsplit360quantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplit360count = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Split360AC").getValue().toString();
                            int split360count = Integer.parseInt(stringsplit360count);
                            split360count = split360count + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Split360AC", Integer.toString(split360count));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                            wwsplit360acprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplit360count = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Split360AC").getValue().toString();
                            int split360count = Integer.parseInt(stringsplit360count);
                            split360count = split360count - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Split360AC", Integer.toString(split360count));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                            if (split360count <= 0) {
                                wwsplit360acprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                wwsplit360acprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void wwsplit360price(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsplit360count = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Split360ACTOTAL").getValue().toString();
                    int split360count = Integer.parseInt(stringsplit360count);
                    split360count = split360count + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("Split360ACTOTAL", Integer.toString(split360count));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsplit360count = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Split360ACTOTAL").getValue().toString();
                    int split360count = Integer.parseInt(stringsplit360count);
                    int split360discount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Split360AC").getValue().toString());
                    if(split360discount==1)
                    {
                        split360count  =split360count  - price - diswwsplit360acprice;
                    }
                    else
                    {
                        split360count  =  split360count  - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("Split360ACTOTAL", Integer.toString(split360count));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // WATERWASH CASSETTE360 AC

    private void wwcassette360quantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassette360count = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Cassette360AC").getValue().toString();
                            int cassette360count = Integer.parseInt(stringcassette360count);
                            cassette360count = cassette360count + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Cassette360AC", Integer.toString(cassette360count));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                            wwcassette360acprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassette360count = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Cassette360AC").getValue().toString();
                            int cassette360count = Integer.parseInt(stringcassette360count);
                            cassette360count = cassette360count - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Cassette360AC", Integer.toString(cassette360count));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                            if (cassette360count <= 0) {
                                wwcassette360acprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                wwcassette360acprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void wwcassette360price(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcassette360count = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Cassette360ACTOTAL").getValue().toString();
                    int cassette360count = Integer.parseInt(stringcassette360count);
                    cassette360count = cassette360count + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("Cassette360ACTOTAL", Integer.toString(cassette360count));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcassette360count = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Cassette360ACTOTAL").getValue().toString();
                    int cassette360count = Integer.parseInt(stringcassette360count);
                    int cassette360discount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Cassette360AC").getValue().toString());
                    if(cassette360discount==1)
                    {
                        cassette360count  = cassette360count - price - diswwcassette360acprice;
                    }
                    else
                    {
                        cassette360count = cassette360count - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("Cassette360ACTOTAL", Integer.toString(cassette360count));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // AMC

    // SPLIT AC

    //    // SCHEME1 WITHSPARE
    private void amcsplitscheme1withsparetotalsparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme1withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString();
                            int intamcsplitscheme1withsparetotal = Integer.parseInt(amcsplitscheme1withsparetotal);
                            intamcsplitscheme1withsparetotal = intamcsplitscheme1withsparetotal + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Totalspare", Integer.toString(intamcsplitscheme1withsparetotal));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                            amcsplitscheme1withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme1withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString();
                            int intamcsplitscheme1withsparetotal = Integer.parseInt(amcsplitscheme1withsparetotal);
                            intamcsplitscheme1withsparetotal = intamcsplitscheme1withsparetotal - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Totalspare", Integer.toString(intamcsplitscheme1withsparetotal));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                            if (intamcsplitscheme1withsparetotal <= 0) {
                                amcsplitscheme1withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcsplitscheme1withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcsplitscheme1withsparetotalspareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringamcsplitscheme1withsparetotalcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                    int amcsplitscheme1withsparetotalcount = Integer.parseInt(stringamcsplitscheme1withsparetotalcount);
                    amcsplitscheme1withsparetotalcount = amcsplitscheme1withsparetotalcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TotalspareTOTAL", Integer.toString(amcsplitscheme1withsparetotalcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringamcsplitscheme1withsparetotalcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                    int amcsplitscheme1withsparetotalcount = Integer.parseInt(stringamcsplitscheme1withsparetotalcount);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("SplitAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        amcsplitscheme1withsparetotalcount= amcsplitscheme1withsparetotalcount - price - disamcsplitscheme1withsparetotalprice;
                    }
                    else
                    {
                        amcsplitscheme1withsparetotalcount = amcsplitscheme1withsparetotalcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TotalspareTOTAL", Integer.toString(amcsplitscheme1withsparetotalcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void amcsplitscheme1withsparelimitedsparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme1withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString();
                            int intamcsplitscheme1withsparelimited = Integer.parseInt(amcsplitscheme1withsparelimited);
                            intamcsplitscheme1withsparelimited = intamcsplitscheme1withsparelimited + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Limitedspare", Integer.toString(intamcsplitscheme1withsparelimited));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                            amcsplitscheme1withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme1withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString();
                            int intamcsplitscheme1withsparelimited = Integer.parseInt(amcsplitscheme1withsparelimited);
                            intamcsplitscheme1withsparelimited = intamcsplitscheme1withsparelimited - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Limitedspare", Integer.toString(intamcsplitscheme1withsparelimited));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                            if (intamcsplitscheme1withsparelimited <= 0) {
                                amcsplitscheme1withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcsplitscheme1withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcsplitscheme1withsparelimitedspareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme1withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                    int intamcsplitscheme1withsparelimited = Integer.parseInt(amcsplitscheme1withsparelimited);
                    intamcsplitscheme1withsparelimited = intamcsplitscheme1withsparelimited + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("LimitedspareTOTAL", Integer.toString(intamcsplitscheme1withsparelimited));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme1withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                    int intamcsplitscheme1withsparelimited = Integer.parseInt(amcsplitscheme1withsparelimited);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("SplitAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        intamcsplitscheme1withsparelimited= intamcsplitscheme1withsparelimited - price - disamcsplitscheme1withsparelimitedprice;
                    }
                    else
                    {
                        intamcsplitscheme1withsparelimited = intamcsplitscheme1withsparelimited - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("LimitedspareTOTAL", Integer.toString(intamcsplitscheme1withsparelimited));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void amcsplitscheme1withsparenosparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme1withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString();
                            int intamcsplitscheme1withspareno = Integer.parseInt(amcsplitscheme1withspareno);
                            intamcsplitscheme1withspareno = intamcsplitscheme1withspareno + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Nospare", Integer.toString(intamcsplitscheme1withspareno));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").updateChildren(cartt);
                            amcsplitscheme1withsparenoprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme1withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString();
                            int intamcsplitscheme1withspareno = Integer.parseInt(amcsplitscheme1withspareno);
                            intamcsplitscheme1withspareno = intamcsplitscheme1withspareno - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Nospare", Integer.toString(intamcsplitscheme1withspareno));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").updateChildren(cartt);
                            if (intamcsplitscheme1withspareno <= 0) {
                                amcsplitscheme1withsparenoprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcsplitscheme1withsparenoprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcsplitscheme1withsparenospareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme1withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                    int intamcsplitscheme1withspareno = Integer.parseInt(amcsplitscheme1withspareno);
                    intamcsplitscheme1withspareno = intamcsplitscheme1withspareno + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("NospareTOTAL", Integer.toString(intamcsplitscheme1withspareno));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme1withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                    int intamcsplitscheme1withspareno = Integer.parseInt(amcsplitscheme1withspareno);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("SplitAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        intamcsplitscheme1withspareno= intamcsplitscheme1withspareno - price - disamcsplitscheme1withsparenoprice ;
                    }
                    else
                    {
                        intamcsplitscheme1withspareno = intamcsplitscheme1withspareno - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("NospareTOTAL", Integer.toString(intamcsplitscheme1withspareno));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // SCHEME2
    private void amcsplitscheme2withsparetotalsparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme2withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Totalspare").getValue().toString();
                            int intamcsplitscheme2withsparetotal = Integer.parseInt(amcsplitscheme2withsparetotal);
                            intamcsplitscheme2withsparetotal = intamcsplitscheme2withsparetotal + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Totalspare", Integer.toString(intamcsplitscheme2withsparetotal));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                            amcsplitscheme2withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme2withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Totalspare").getValue().toString();
                            int intamcsplitscheme2withsparetotal = Integer.parseInt(amcsplitscheme2withsparetotal);
                            intamcsplitscheme2withsparetotal = intamcsplitscheme2withsparetotal - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Totalspare", Integer.toString(intamcsplitscheme2withsparetotal));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                            if (intamcsplitscheme2withsparetotal <= 0) {
                                amcsplitscheme2withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcsplitscheme2withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcsplitscheme2withsparetotalspareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringamcsplitscheme2withsparetotalcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                    int amcsplitscheme2withsparetotalcount = Integer.parseInt(stringamcsplitscheme2withsparetotalcount);
                    amcsplitscheme2withsparetotalcount = amcsplitscheme2withsparetotalcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TotalspareTOTAL", Integer.toString(amcsplitscheme2withsparetotalcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringamcsplitscheme2withsparetotalcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                    int amcsplitscheme2withsparetotalcount = Integer.parseInt(stringamcsplitscheme2withsparetotalcount);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("SplitAC").child("Scheme2").child("Withspare").child("Totalspare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        amcsplitscheme2withsparetotalcount= amcsplitscheme2withsparetotalcount - price - disamcsplitscheme2withsparetotalprice;
                    }
                    else
                    {
                        amcsplitscheme2withsparetotalcount = amcsplitscheme2withsparetotalcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TotalspareTOTAL", Integer.toString(amcsplitscheme2withsparetotalcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void amcsplitscheme2withsparelimitedsparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme2withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Limitedspare").getValue().toString();
                            int intamcsplitscheme2withsparelimited = Integer.parseInt(amcsplitscheme2withsparelimited);
                            intamcsplitscheme2withsparelimited = intamcsplitscheme2withsparelimited + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Limitedspare", Integer.toString(intamcsplitscheme2withsparelimited));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                            amcsplitscheme2withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme2withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("Limitedspare").getValue().toString();
                            int intamcsplitscheme2withsparelimited = Integer.parseInt(amcsplitscheme2withsparelimited);
                            intamcsplitscheme2withsparelimited = intamcsplitscheme2withsparelimited - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Limitedspare", Integer.toString(intamcsplitscheme2withsparelimited));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                            if (intamcsplitscheme2withsparelimited <= 0) {
                                amcsplitscheme2withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcsplitscheme2withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcsplitscheme2withsparelimitedspareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme2withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                    int intamcsplitscheme2withsparelimited = Integer.parseInt(amcsplitscheme2withsparelimited);
                    intamcsplitscheme2withsparelimited = intamcsplitscheme2withsparelimited + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("LimitedspareTOTAL", Integer.toString(intamcsplitscheme2withsparelimited));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme2withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                    int intamcsplitscheme2withsparelimited = Integer.parseInt(amcsplitscheme2withsparelimited);
                    int totalsparediscount =Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("SplitAC").child("Scheme2").child("Withspare").child("Limitedspare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        intamcsplitscheme2withsparelimited= intamcsplitscheme2withsparelimited - price - disamcsplitscheme2withsparelimitedprice;
                    }
                    else
                    {
                        intamcsplitscheme2withsparelimited = intamcsplitscheme2withsparelimited - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("LimitedspareTOTAL", Integer.toString(intamcsplitscheme2withsparelimited));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void amcsplitscheme2withsparenosparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme2withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").child("Nospare").getValue().toString();
                            int intamcsplitscheme2withspareno = Integer.parseInt(amcsplitscheme2withspareno);
                            intamcsplitscheme2withspareno = intamcsplitscheme2withspareno + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Nospare", Integer.toString(intamcsplitscheme2withspareno));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").updateChildren(cartt);
                            amcsplitscheme2withsparenoprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme2withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").child("Nospare").getValue().toString();
                            int intamcsplitscheme2withspareno = Integer.parseInt(amcsplitscheme2withspareno);
                            intamcsplitscheme2withspareno = intamcsplitscheme2withspareno - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Nospare", Integer.toString(intamcsplitscheme2withspareno));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").updateChildren(cartt);
                            if (intamcsplitscheme2withspareno <= 0) {
                                amcsplitscheme2withsparenoprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcsplitscheme2withsparenoprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcsplitscheme2withsparenospareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme2withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                    int intamcsplitscheme2withspareno = Integer.parseInt(amcsplitscheme2withspareno);
                    intamcsplitscheme2withspareno = intamcsplitscheme2withspareno + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("NospareTOTAL", Integer.toString(intamcsplitscheme2withspareno));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme2withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                    int intamcsplitscheme2withspareno = Integer.parseInt(amcsplitscheme2withspareno);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("SplitAC").child("Scheme2").child("Withoutspare").child("Nospare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        intamcsplitscheme2withspareno= intamcsplitscheme2withspareno - price -disamcsplitscheme2withsparenoprice;
                    }
                    else
                    {
                        intamcsplitscheme2withspareno = intamcsplitscheme2withspareno - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("NospareTOTAL", Integer.toString(intamcsplitscheme2withspareno));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // SCHEME3
    private void amcsplitscheme3withsparetotalsparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme3withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Totalspare").getValue().toString();
                            int intamcsplitscheme3withsparetotal = Integer.parseInt(amcsplitscheme3withsparetotal);
                            intamcsplitscheme3withsparetotal = intamcsplitscheme3withsparetotal + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Totalspare", Integer.toString(intamcsplitscheme3withsparetotal));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").updateChildren(cartt);
                            amcsplitscheme3withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme3withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Totalspare").getValue().toString();
                            int intamcsplitscheme3withsparetotal = Integer.parseInt(amcsplitscheme3withsparetotal);
                            intamcsplitscheme3withsparetotal = intamcsplitscheme3withsparetotal - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Totalspare", Integer.toString(intamcsplitscheme3withsparetotal));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").updateChildren(cartt);
                            if (intamcsplitscheme3withsparetotal <= 0) {
                                amcsplitscheme3withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcsplitscheme3withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcsplitscheme3withsparetotalspareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme3withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                    int intamcsplitscheme3withsparetotal = Integer.parseInt(amcsplitscheme3withsparetotal);
                    intamcsplitscheme3withsparetotal = intamcsplitscheme3withsparetotal + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TotalspareTOTAL", Integer.toString(intamcsplitscheme3withsparetotal));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme3withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                    int intamcsplitscheme3withsparetotal = Integer.parseInt(amcsplitscheme3withsparetotal);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("SplitAC").child("Scheme3").child("Withspare").child("Totalspare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        intamcsplitscheme3withsparetotal= intamcsplitscheme3withsparetotal - price - disamcsplitscheme3withsparetotalprice;
                    }
                    else
                    {
                        intamcsplitscheme3withsparetotal = intamcsplitscheme3withsparetotal - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TotalspareTOTAL", Integer.toString(intamcsplitscheme3withsparetotal));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void amcsplitscheme3withsparelimitedsparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme3withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Limitedspare").getValue().toString();
                            int intamcsplitscheme3withsparelimited = Integer.parseInt(amcsplitscheme3withsparelimited);
                            intamcsplitscheme3withsparelimited = intamcsplitscheme3withsparelimited + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Limitedspare", Integer.toString(intamcsplitscheme3withsparelimited));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").updateChildren(cartt);
                            amcsplitscheme3withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme3withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("Limitedspare").getValue().toString();
                            int intamcsplitscheme3withsparelimited = Integer.parseInt(amcsplitscheme3withsparelimited);
                            intamcsplitscheme3withsparelimited = intamcsplitscheme3withsparelimited - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Limitedspare", Integer.toString(intamcsplitscheme3withsparelimited));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").updateChildren(cartt);
                            if (intamcsplitscheme3withsparelimited <= 0) {
                                amcsplitscheme3withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcsplitscheme3withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcsplitscheme3withsparelimitedspareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme3withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                    int intamcsplitscheme3withsparelimited = Integer.parseInt(amcsplitscheme3withsparelimited);
                    intamcsplitscheme3withsparelimited = intamcsplitscheme3withsparelimited + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("LimitedspareTOTAL", Integer.toString(intamcsplitscheme3withsparelimited));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme3withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                    int intamcsplitscheme3withsparelimited = Integer.parseInt(amcsplitscheme3withsparelimited);
                    int totalsparediscount =Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("SplitAC").child("Scheme3").child("Withspare").child("Limitedspare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        intamcsplitscheme3withsparelimited= intamcsplitscheme3withsparelimited - price - disamcsplitscheme3withsparelimitedprice;
                    }
                    else
                    {
                        intamcsplitscheme3withsparelimited = intamcsplitscheme3withsparelimited - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("LimitedspareTOTAL", Integer.toString(intamcsplitscheme3withsparelimited));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void amcsplitscheme3withsparenosparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme3withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").child("Nospare").getValue().toString();
                            int intamcsplitscheme3withspareno = Integer.parseInt(amcsplitscheme3withspareno);
                            intamcsplitscheme3withspareno = intamcsplitscheme3withspareno + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Nospare", Integer.toString(intamcsplitscheme3withspareno));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").updateChildren(cartt);
                            amcsplitscheme3withsparenoprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcsplitscheme3withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").child("Nospare").getValue().toString();
                            int intamcsplitscheme3withspareno = Integer.parseInt(amcsplitscheme3withspareno);
                            intamcsplitscheme3withspareno = intamcsplitscheme3withspareno - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Nospare", Integer.toString(intamcsplitscheme3withspareno));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").updateChildren(cartt);
                            if (intamcsplitscheme3withspareno <= 0) {
                                amcsplitscheme3withsparenoprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcsplitscheme3withsparenoprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcsplitscheme3withsparenospareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme3withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                    int intamcsplitscheme3withspareno = Integer.parseInt(amcsplitscheme3withspareno);
                    intamcsplitscheme3withspareno = intamcsplitscheme3withspareno + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("NospareTOTAL", Integer.toString(intamcsplitscheme3withspareno));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcsplitscheme3withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                    int intamcsplitscheme3withspareno = Integer.parseInt(amcsplitscheme3withspareno);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("SplitAC").child("Scheme3").child("Withoutspare").child("Nospare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        intamcsplitscheme3withspareno= intamcsplitscheme3withspareno - price - disamcsplitscheme3withsparenoprice;
                    }
                    else
                    {
                        intamcsplitscheme3withspareno = intamcsplitscheme3withspareno - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("NospareTOTAL", Integer.toString(intamcsplitscheme3withspareno));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }


    // window AC

    //    // SCHEME1 WITHSPARE
    private void amcwindowscheme1withsparetotalsparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcwindowscheme1withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString();
                            int intamcwindowscheme1withsparetotal = Integer.parseInt(amcwindowscheme1withsparetotal);
                            intamcwindowscheme1withsparetotal = intamcwindowscheme1withsparetotal + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Totalspare", Integer.toString(intamcwindowscheme1withsparetotal));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                            amcwindowscheme1withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcwindowscheme1withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString();
                            int intamcwindowscheme1withsparetotal = Integer.parseInt(amcwindowscheme1withsparetotal);
                            intamcwindowscheme1withsparetotal = intamcwindowscheme1withsparetotal - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Totalspare", Integer.toString(intamcwindowscheme1withsparetotal));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                            if (intamcwindowscheme1withsparetotal <= 0) {
                                amcwindowscheme1withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcwindowscheme1withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcwindowscheme1withsparetotalspareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringamcwindowscheme1withsparetotalcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                    int amcwindowscheme1withsparetotalcount = Integer.parseInt(stringamcwindowscheme1withsparetotalcount);
                    amcwindowscheme1withsparetotalcount = amcwindowscheme1withsparetotalcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TotalspareTOTAL", Integer.toString(amcwindowscheme1withsparetotalcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringamcwindowscheme1withsparetotalcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                    int amcwindowscheme1withsparetotalcount = Integer.parseInt(stringamcwindowscheme1withsparetotalcount);

                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        amcwindowscheme1withsparetotalcount= amcwindowscheme1withsparetotalcount - price - disamcwindowscheme1withsparetotalprice;
                    }
                    else
                    {
                        amcwindowscheme1withsparetotalcount = amcwindowscheme1withsparetotalcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TotalspareTOTAL", Integer.toString(amcwindowscheme1withsparetotalcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void amcwindowscheme1withsparelimitedsparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcwindowscheme1withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString();
                            int intamcwindowscheme1withsparelimited = Integer.parseInt(amcwindowscheme1withsparelimited);
                            intamcwindowscheme1withsparelimited = intamcwindowscheme1withsparelimited + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Limitedspare", Integer.toString(intamcwindowscheme1withsparelimited));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                            amcwindowscheme1withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcwindowscheme1withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString();
                            int intamcwindowscheme1withsparelimited = Integer.parseInt(amcwindowscheme1withsparelimited);
                            intamcwindowscheme1withsparelimited = intamcwindowscheme1withsparelimited - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Limitedspare", Integer.toString(intamcwindowscheme1withsparelimited));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                            if (intamcwindowscheme1withsparelimited <= 0) {
                                amcwindowscheme1withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcwindowscheme1withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcwindowscheme1withsparelimitedspareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcwindowscheme1withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                    int intamcwindowscheme1withsparelimited = Integer.parseInt(amcwindowscheme1withsparelimited);
                    intamcwindowscheme1withsparelimited = intamcwindowscheme1withsparelimited + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("LimitedspareTOTAL", Integer.toString(intamcwindowscheme1withsparelimited));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcwindowscheme1withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                    int intamcwindowscheme1withsparelimited = Integer.parseInt(amcwindowscheme1withsparelimited);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        intamcwindowscheme1withsparelimited= intamcwindowscheme1withsparelimited - price - disamcwindowscheme1withsparelimitedprice;
                    }
                    else
                    {
                        intamcwindowscheme1withsparelimited = intamcwindowscheme1withsparelimited - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("LimitedspareTOTAL", Integer.toString(intamcwindowscheme1withsparelimited));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void amcwindowscheme1withsparenosparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcwindowscheme1withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString();
                            int intamcwindowscheme1withspareno = Integer.parseInt(amcwindowscheme1withspareno);
                            intamcwindowscheme1withspareno = intamcwindowscheme1withspareno + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Nospare", Integer.toString(intamcwindowscheme1withspareno));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").updateChildren(cartt);
                            amcwindowscheme1withsparenoprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcwindowscheme1withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString();
                            int intamcwindowscheme1withspareno = Integer.parseInt(amcwindowscheme1withspareno);
                            intamcwindowscheme1withspareno = intamcwindowscheme1withspareno - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Nospare", Integer.toString(intamcwindowscheme1withspareno));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").updateChildren(cartt);
                            if (intamcwindowscheme1withspareno <= 0) {
                                amcwindowscheme1withsparenoprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcwindowscheme1withsparenoprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcwindowscheme1withsparenospareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcwindowscheme1withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                    int intamcwindowscheme1withspareno = Integer.parseInt(amcwindowscheme1withspareno);
                    intamcwindowscheme1withspareno = intamcwindowscheme1withspareno + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("NospareTOTAL", Integer.toString(intamcwindowscheme1withspareno));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcwindowscheme1withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                    int intamcwindowscheme1withspareno = Integer.parseInt(amcwindowscheme1withspareno);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("WindowAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        intamcwindowscheme1withspareno= intamcwindowscheme1withspareno - price - disamcwindowscheme1withsparenoprice;
                    }
                    else
                    {
                        intamcwindowscheme1withspareno = intamcwindowscheme1withspareno - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("NospareTOTAL", Integer.toString(intamcwindowscheme1withspareno));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // SCHEME2
    private void amcwindowscheme2withsparetotalsparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcwindowscheme2withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Totalspare").getValue().toString();
                            int intamcwindowscheme2withsparetotal = Integer.parseInt(amcwindowscheme2withsparetotal);
                            intamcwindowscheme2withsparetotal = intamcwindowscheme2withsparetotal + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Totalspare", Integer.toString(intamcwindowscheme2withsparetotal));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                            amcwindowscheme2withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcwindowscheme2withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Totalspare").getValue().toString();
                            int intamcwindowscheme2withsparetotal = Integer.parseInt(amcwindowscheme2withsparetotal);
                            intamcwindowscheme2withsparetotal = intamcwindowscheme2withsparetotal - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Totalspare", Integer.toString(intamcwindowscheme2withsparetotal));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                            if (intamcwindowscheme2withsparetotal <= 0) {
                                amcwindowscheme2withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcwindowscheme2withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcwindowscheme2withsparetotalspareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringamcwindowscheme2withsparetotalcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                    int amcwindowscheme2withsparetotalcount = Integer.parseInt(stringamcwindowscheme2withsparetotalcount);
                    amcwindowscheme2withsparetotalcount = amcwindowscheme2withsparetotalcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TotalspareTOTAL", Integer.toString(amcwindowscheme2withsparetotalcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringamcwindowscheme2withsparetotalcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                    int amcwindowscheme2withsparetotalcount = Integer.parseInt(stringamcwindowscheme2withsparetotalcount);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("WindowAC").child("Scheme2").child("Withspare").child("Totalspare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        amcwindowscheme2withsparetotalcount= amcwindowscheme2withsparetotalcount - price - disamcwindowscheme2withsparetotalprice;
                    }
                    else
                    {
                        amcwindowscheme2withsparetotalcount = amcwindowscheme2withsparetotalcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TotalspareTOTAL", Integer.toString(amcwindowscheme2withsparetotalcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void amcwindowscheme2withsparelimitedsparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcwindowscheme2withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Limitedspare").getValue().toString();
                            int intamcwindowscheme2withsparelimited = Integer.parseInt(amcwindowscheme2withsparelimited);
                            intamcwindowscheme2withsparelimited = intamcwindowscheme2withsparelimited + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Limitedspare", Integer.toString(intamcwindowscheme2withsparelimited));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                            amcwindowscheme2withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcwindowscheme2withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("Limitedspare").getValue().toString();
                            int intamcwindowscheme2withsparelimited = Integer.parseInt(amcwindowscheme2withsparelimited);
                            intamcwindowscheme2withsparelimited = intamcwindowscheme2withsparelimited - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Limitedspare", Integer.toString(intamcwindowscheme2withsparelimited));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                            if (intamcwindowscheme2withsparelimited <= 0) {
                                amcwindowscheme2withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcwindowscheme2withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcwindowscheme2withsparelimitedspareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcwindowscheme2withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                    int intamcwindowscheme2withsparelimited = Integer.parseInt(amcwindowscheme2withsparelimited);
                    intamcwindowscheme2withsparelimited = intamcwindowscheme2withsparelimited + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("LimitedspareTOTAL", Integer.toString(intamcwindowscheme2withsparelimited));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcwindowscheme2withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                    int intamcwindowscheme2withsparelimited = Integer.parseInt(amcwindowscheme2withsparelimited);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("WindowAC").child("Scheme2").child("Withspare").child("Limitedspare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        intamcwindowscheme2withsparelimited= intamcwindowscheme2withsparelimited - price - disamcwindowscheme2withsparelimitedprice;
                    }
                    else
                    {
                        intamcwindowscheme2withsparelimited = intamcwindowscheme2withsparelimited - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("LimitedspareTOTAL", Integer.toString(intamcwindowscheme2withsparelimited));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void amcwindowscheme2withsparenosparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcwindowscheme2withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").child("Nospare").getValue().toString();
                            int intamcwindowscheme2withspareno = Integer.parseInt(amcwindowscheme2withspareno);
                            intamcwindowscheme2withspareno = intamcwindowscheme2withspareno + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Nospare", Integer.toString(intamcwindowscheme2withspareno));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").updateChildren(cartt);
                            amcwindowscheme2withsparenoprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amcwindowscheme2withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").child("Nospare").getValue().toString();
                            int intamcwindowscheme2withspareno = Integer.parseInt(amcwindowscheme2withspareno);
                            intamcwindowscheme2withspareno = intamcwindowscheme2withspareno - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Nospare", Integer.toString(intamcwindowscheme2withspareno));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").updateChildren(cartt);
                            if (intamcwindowscheme2withspareno <= 0) {
                                amcwindowscheme2withsparenoprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amcwindowscheme2withsparenoprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amcwindowscheme2withsparenospareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcwindowscheme2withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                    int intamcwindowscheme2withspareno = Integer.parseInt(amcwindowscheme2withspareno);
                    intamcwindowscheme2withspareno = intamcwindowscheme2withspareno + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("NospareTOTAL", Integer.toString(intamcwindowscheme2withspareno));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amcwindowscheme2withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                    int intamcwindowscheme2withspareno = Integer.parseInt(amcwindowscheme2withspareno);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("WindowAC").child("Scheme2").child("Withoutspare").child("Nospare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        intamcwindowscheme2withspareno= intamcwindowscheme2withspareno - price - disamcwindowscheme2withsparenoprice;
                    }
                    else
                    {
                        intamcwindowscheme2withspareno = intamcwindowscheme2withspareno - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("NospareTOTAL", Integer.toString(intamcwindowscheme2withspareno));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // cassette AC

    //    // SCHEME1 WITHSPARE
    private void amccassettescheme1withsparetotalsparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amccassettescheme1withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString();
                            int intamccassettescheme1withsparetotal = Integer.parseInt(amccassettescheme1withsparetotal);
                            intamccassettescheme1withsparetotal = intamccassettescheme1withsparetotal + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Totalspare", Integer.toString(intamccassettescheme1withsparetotal));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                            amccassettescheme1withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amccassettescheme1withsparetotal = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString();
                            int intamccassettescheme1withsparetotal = Integer.parseInt(amccassettescheme1withsparetotal);
                            intamccassettescheme1withsparetotal = intamccassettescheme1withsparetotal - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Totalspare", Integer.toString(intamccassettescheme1withsparetotal));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                            if (intamccassettescheme1withsparetotal <= 0) {
                                amccassettescheme1withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amccassettescheme1withsparetotalprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amccassettescheme1withsparetotalspareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringamccassettescheme1withsparetotalcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                    int amccassettescheme1withsparetotalcount = Integer.parseInt(stringamccassettescheme1withsparetotalcount);
                    amccassettescheme1withsparetotalcount = amccassettescheme1withsparetotalcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TotalspareTOTAL", Integer.toString(amccassettescheme1withsparetotalcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringamccassettescheme1withsparetotalcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("TotalspareTOTAL").getValue().toString();
                    int amccassettescheme1withsparetotalcount = Integer.parseInt(stringamccassettescheme1withsparetotalcount);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("CassetteAC").child("Scheme1").child("Withspare").child("Totalspare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        amccassettescheme1withsparetotalcount= amccassettescheme1withsparetotalcount - price - disamccassettescheme1withsparetotalprice;
                    }
                    else
                    {
                        amccassettescheme1withsparetotalcount = amccassettescheme1withsparetotalcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TotalspareTOTAL", Integer.toString(amccassettescheme1withsparetotalcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void amccassettescheme1withsparelimitedsparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amccassettescheme1withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString();
                            int intamccassettescheme1withsparelimited = Integer.parseInt(amccassettescheme1withsparelimited);
                            intamccassettescheme1withsparelimited = intamccassettescheme1withsparelimited + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Limitedspare", Integer.toString(intamccassettescheme1withsparelimited));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                            amccassettescheme1withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amccassettescheme1withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString();
                            int intamccassettescheme1withsparelimited = Integer.parseInt(amccassettescheme1withsparelimited);
                            intamccassettescheme1withsparelimited = intamccassettescheme1withsparelimited - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Limitedspare", Integer.toString(intamccassettescheme1withsparelimited));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                            if (intamccassettescheme1withsparelimited <= 0) {
                                amccassettescheme1withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amccassettescheme1withsparelimitedprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amccassettescheme1withsparelimitedspareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amccassettescheme1withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                    int intamccassettescheme1withsparelimited = Integer.parseInt(amccassettescheme1withsparelimited);
                    intamccassettescheme1withsparelimited = intamccassettescheme1withsparelimited + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("LimitedspareTOTAL", Integer.toString(intamccassettescheme1withsparelimited));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amccassettescheme1withsparelimited = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child("LimitedspareTOTAL").getValue().toString();
                    int intamccassettescheme1withsparelimited = Integer.parseInt(amccassettescheme1withsparelimited);
                    int totalsparediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("CassetteAC").child("Scheme1").child("Withspare").child("Limitedspare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        intamccassettescheme1withsparelimited= intamccassettescheme1withsparelimited - price - disamccassettescheme1withsparelimitedprice;
                    }
                    else
                    {
                        intamccassettescheme1withsparelimited = intamccassettescheme1withsparelimited - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("LimitedspareTOTAL", Integer.toString(intamccassettescheme1withsparelimited));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void amccassettescheme1withsparenosparequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amccassettescheme1withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString();
                            int intamccassettescheme1withspareno = Integer.parseInt(amccassettescheme1withspareno);
                            intamccassettescheme1withspareno = intamccassettescheme1withspareno + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Nospare", Integer.toString(intamccassettescheme1withspareno));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").updateChildren(cartt);
                            amccassettescheme1withsparenoprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String amccassettescheme1withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString();
                            int intamccassettescheme1withspareno = Integer.parseInt(amccassettescheme1withspareno);
                            intamccassettescheme1withspareno = intamccassettescheme1withspareno - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Nospare", Integer.toString(intamccassettescheme1withspareno));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").updateChildren(cartt);
                            if (intamccassettescheme1withspareno <= 0) {
                                amccassettescheme1withsparenoprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                amccassettescheme1withsparenoprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void amccassettescheme1withsparenospareprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amccassettescheme1withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                    int intamccassettescheme1withspareno = Integer.parseInt(amccassettescheme1withspareno);
                    intamccassettescheme1withspareno = intamccassettescheme1withspareno + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("NospareTOTAL", Integer.toString(intamccassettescheme1withspareno));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String amccassettescheme1withspareno = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").child("NospareTOTAL").getValue().toString();
                    int intamccassettescheme1withspareno = Integer.parseInt(amccassettescheme1withspareno);
                    int totalsparediscount =Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("AMC").child("CassetteAC").child("Scheme1").child("Withoutspare").child("Nospare").getValue().toString());
                    if(totalsparediscount==1)
                    {
                        intamccassettescheme1withspareno = intamccassettescheme1withspareno - price - disamccassettescheme1withsparenoprice;
                    }
                    else
                    {
                        intamccassettescheme1withspareno = intamccassettescheme1withspareno - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("NospareTOTAL", Integer.toString(intamccassettescheme1withspareno));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // SPARES

    // SPLITAC

    private void sparessplitaccapacitorquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitaccapacitorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Capacitor").getValue().toString();
                            int sparessplitaccapacitorcount = Integer.parseInt(stringsparessplitaccapacitorcount);
                            sparessplitaccapacitorcount = sparessplitaccapacitorcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Capacitor", Integer.toString(sparessplitaccapacitorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            sparesplitaccapacitorprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitaccapacitorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Capacitor").getValue().toString();
                            int sparessplitaccapacitorcount = Integer.parseInt(stringsparessplitaccapacitorcount);
                            sparessplitaccapacitorcount = sparessplitaccapacitorcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Capacitor", Integer.toString(sparessplitaccapacitorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            if (sparessplitaccapacitorcount <= 0) {
                                sparesplitaccapacitorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparesplitaccapacitorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparessplitaccapacitorprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitaccapacitorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("CapacitorTOTAL").getValue().toString();
                    int sparessplitaccapacitorcount = Integer.parseInt(stringsparessplitaccapacitorcount);
                    sparessplitaccapacitorcount = sparessplitaccapacitorcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("CapacitorTOTAL", Integer.toString(sparessplitaccapacitorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitaccapacitorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("CapacitorTOTAL").getValue().toString();
                    int sparessplitaccapacitorcount = Integer.parseInt(stringsparessplitaccapacitorcount);
                    int capacitordiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Capacitor").getValue().toString());
                    if(capacitordiscount==1)
                    {
                        sparessplitaccapacitorcount= sparessplitaccapacitorcount - price - dissparessplitaccapacitorprice;
                    }
                    else
                    {
                        sparessplitaccapacitorcount = sparessplitaccapacitorcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("CapacitorTOTAL", Integer.toString(sparessplitaccapacitorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparessplitacblowerquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacblowercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Blower").getValue().toString();
                            int sparessplitacblowercount = Integer.parseInt(stringsparessplitacblowercount);
                            sparessplitacblowercount = sparessplitacblowercount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Blower", Integer.toString(sparessplitacblowercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            sparesplitacblowerprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacblowercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Blower").getValue().toString();
                            int sparessplitacblowercount = Integer.parseInt(stringsparessplitacblowercount);
                            sparessplitacblowercount = sparessplitacblowercount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Blower", Integer.toString(sparessplitacblowercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            if (sparessplitacblowercount <= 0) {
                                sparesplitacblowerprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparesplitacblowerprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparessplitacblowerprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacblowercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("BlowerTOTAL").getValue().toString();
                    int sparessplitacblowercount = Integer.parseInt(stringsparessplitacblowercount);
                    sparessplitacblowercount = sparessplitacblowercount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("BlowerTOTAL", Integer.toString(sparessplitacblowercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacblowercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("BlowerTOTAL").getValue().toString();
                    int sparessplitacblowercount = Integer.parseInt(stringsparessplitacblowercount);
                    int blowerdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Blower").getValue().toString());
                    if(blowerdiscount==1)
                    {
                        sparessplitacblowercount = sparessplitacblowercount - price - dissparessplitacblowerprice;
                    }
                    else
                    {
                        sparessplitacblowercount = sparessplitacblowercount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("BlowerTOTAL", Integer.toString(sparessplitacblowercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparessplitacoutdoorfanquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacoutdoorfancount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoorfan").getValue().toString();
                            int sparessplitacoutdoorfancount = Integer.parseInt(stringsparessplitacoutdoorfancount);
                            sparessplitacoutdoorfancount = sparessplitacoutdoorfancount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorfan", Integer.toString(sparessplitacoutdoorfancount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            sparesplitacoutdoorfanprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacoutdoorfancount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoorfan").getValue().toString();
                            int sparessplitacoutdoorfancount = Integer.parseInt(stringsparessplitacoutdoorfancount);
                            sparessplitacoutdoorfancount = sparessplitacoutdoorfancount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorfan", Integer.toString(sparessplitacoutdoorfancount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            if (sparessplitacoutdoorfancount <= 0) {
                                sparesplitacoutdoorfanprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparesplitacoutdoorfanprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparessplitacoutdoorfanprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacoutdoorfancount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("OutdoorfanTOTAL").getValue().toString();
                    int sparessplitacoutdoorfancount = Integer.parseInt(stringsparessplitacoutdoorfancount);
                    sparessplitacoutdoorfancount = sparessplitacoutdoorfancount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorfanTOTAL", Integer.toString(sparessplitacoutdoorfancount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacoutdoorfancount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("OutdoorfanTOTAL").getValue().toString();
                    int sparessplitacoutdoorfancount = Integer.parseInt(stringsparessplitacoutdoorfancount);
                    int outdoorfandiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoorfan").getValue().toString());
                    if(outdoorfandiscount==1)
                    {
                        sparessplitacoutdoorfancount = sparessplitacoutdoorfancount - price - dissparessplitacoutdoorfanprice;
                    }
                    else
                    {
                        sparessplitacoutdoorfancount = sparessplitacoutdoorfancount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorfanTOTAL", Integer.toString(sparessplitacoutdoorfancount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparessplitacindoormotorquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacindoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Indoormotor").getValue().toString();
                            int sparessplitacindoormotorcount = Integer.parseInt(stringsparessplitacindoormotorcount);
                            sparessplitacindoormotorcount = sparessplitacindoormotorcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoormotor", Integer.toString(sparessplitacindoormotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            sparesplitacindoormotorprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacindoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Indoormotor").getValue().toString();
                            int sparessplitacindoormotorcount = Integer.parseInt(stringsparessplitacindoormotorcount);
                            sparessplitacindoormotorcount = sparessplitacindoormotorcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoormotor", Integer.toString(sparessplitacindoormotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            if (sparessplitacindoormotorcount <= 0) {
                                sparesplitacindoormotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparesplitacindoormotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparessplitacindoormotorprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacindoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("IndoormotorTOTAL").getValue().toString();
                    int sparessplitacindoormotorcount = Integer.parseInt(stringsparessplitacindoormotorcount);
                    sparessplitacindoormotorcount = sparessplitacindoormotorcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoormotorTOTAL", Integer.toString(sparessplitacindoormotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacindoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("IndoormotorTOTAL").getValue().toString();
                    int sparessplitacindoormotorcount = Integer.parseInt(stringsparessplitacindoormotorcount);
                    int indoormotordiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Indoormotor").getValue().toString());
                    if(indoormotordiscount==1)
                    {
                        sparessplitacindoormotorcount = sparessplitacindoormotorcount - price - dissparessplitacindoormotorprice;
                    }
                    else
                    {
                        sparessplitacindoormotorcount = sparessplitacindoormotorcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoormotorTOTAL", Integer.toString(sparessplitacindoormotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparessplitacoutdoormotorquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacoutdoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoormotor").getValue().toString();
                            int sparessplitacoutdoormotorcount = Integer.parseInt(stringsparessplitacoutdoormotorcount);
                            sparessplitacoutdoormotorcount = sparessplitacoutdoormotorcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoormotor", Integer.toString(sparessplitacoutdoormotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            sparesplitacoutdoormotorprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacoutdoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoormotor").getValue().toString();
                            int sparessplitacoutdoormotorcount = Integer.parseInt(stringsparessplitacoutdoormotorcount);
                            sparessplitacoutdoormotorcount = sparessplitacoutdoormotorcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoormotor", Integer.toString(sparessplitacoutdoormotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            if (sparessplitacoutdoormotorcount <= 0) {
                                sparesplitacoutdoormotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparesplitacoutdoormotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparessplitacoutdoormotorprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacoutdoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("OutdoormotorTOTAL").getValue().toString();
                    int sparessplitacoutdoormotorcount = Integer.parseInt(stringsparessplitacoutdoormotorcount);
                    sparessplitacoutdoormotorcount = sparessplitacoutdoormotorcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoormotorTOTAL", Integer.toString(sparessplitacoutdoormotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacoutdoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("OutdoormotorTOTAL").getValue().toString();
                    int sparessplitacoutdoormotorcount = Integer.parseInt(stringsparessplitacoutdoormotorcount);
                    int outdoordiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoormotor").getValue().toString());
                    if(outdoordiscount==1)
                    {
                        sparessplitacoutdoormotorcount = sparessplitacoutdoormotorcount - price - dissparessplitacoutdoormotorprice;
                    }
                    else
                    {
                        sparessplitacoutdoormotorcount = sparessplitacoutdoormotorcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoormotorTOTAL", Integer.toString(sparessplitacoutdoormotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparessplitacswingmotorquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacswingmotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Swingmotor").getValue().toString();
                            int sparessplitacswingmotorcount = Integer.parseInt(stringsparessplitacswingmotorcount);
                            sparessplitacswingmotorcount = sparessplitacswingmotorcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Swingmotor", Integer.toString(sparessplitacswingmotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            sparesplitacswingmotorprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacswingmotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Swingmotor").getValue().toString();
                            int sparessplitacswingmotorcount = Integer.parseInt(stringsparessplitacswingmotorcount);
                            sparessplitacswingmotorcount = sparessplitacswingmotorcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Swingmotor", Integer.toString(sparessplitacswingmotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            if (sparessplitacswingmotorcount <= 0) {
                                sparesplitacswingmotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparesplitacswingmotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparessplitacswingmotorprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacswingmotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("SwingmotorTOTAL").getValue().toString();
                    int sparessplitacswingmotorcount = Integer.parseInt(stringsparessplitacswingmotorcount);
                    sparessplitacswingmotorcount = sparessplitacswingmotorcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SwingmotorTOTAL", Integer.toString(sparessplitacswingmotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacswingmotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("SwingmotorTOTAL").getValue().toString();
                    int sparessplitacswingmotorcount = Integer.parseInt(stringsparessplitacswingmotorcount);
                    int swingmotordiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Swingmotor").getValue().toString());
                    if(swingmotordiscount==1)
                    {
                        sparessplitacswingmotorcount = sparessplitacswingmotorcount - price - dissparessplitacswingmotorprice;
                    }
                    else
                    {
                        sparessplitacswingmotorcount = sparessplitacswingmotorcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SwingmotorTOTAL", Integer.toString(sparessplitacswingmotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparessplitacindoorcoilquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Indoorcoil").getValue().toString();
                            int sparessplitacindoorcoilcount = Integer.parseInt(stringsparessplitacindoorcoilcount);
                            sparessplitacindoorcoilcount = sparessplitacindoorcoilcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoorcoil", Integer.toString(sparessplitacindoorcoilcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            sparesplitacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Indoorcoil").getValue().toString();
                            int sparessplitacindoorcoilcount = Integer.parseInt(stringsparessplitacindoorcoilcount);
                            sparessplitacindoorcoilcount = sparessplitacindoorcoilcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoorcoil", Integer.toString(sparessplitacindoorcoilcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            if (sparessplitacindoorcoilcount <= 0) {
                                sparesplitacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparesplitacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparessplitacindoorcoilprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("IndoorcoilTOTAL").getValue().toString();
                    int sparessplitacindoorcoilcount = Integer.parseInt(stringsparessplitacindoorcoilcount);
                    sparessplitacindoorcoilcount = sparessplitacindoorcoilcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoorcoilTOTAL", Integer.toString(sparessplitacindoorcoilcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("IndoorcoilTOTAL").getValue().toString();
                    int sparessplitacindoorcoilcount = Integer.parseInt(stringsparessplitacindoorcoilcount);
                    int indoorcoildiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Indoorcoil").getValue().toString());
                    if(indoorcoildiscount==1)
                    {
                        sparessplitacindoorcoilcount = sparessplitacindoorcoilcount - price - dissparessplitacindoorcoilprice;
                    }
                    else
                    {
                        sparessplitacindoorcoilcount = sparessplitacindoorcoilcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoorcoilTOTAL", Integer.toString(sparessplitacindoorcoilcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparessplitacoutdoorcondenserquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoorcondenser").getValue().toString();
                            int sparessplitacoutdoorcondensercount = Integer.parseInt(stringsparessplitacoutdoorcondensercount);
                            sparessplitacoutdoorcondensercount = sparessplitacoutdoorcondensercount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorcondenser", Integer.toString(sparessplitacoutdoorcondensercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            sparesplitacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoorcondenser").getValue().toString();
                            int sparessplitacoutdoorcondensercount = Integer.parseInt(stringsparessplitacoutdoorcondensercount);
                            sparessplitacoutdoorcondensercount = sparessplitacoutdoorcondensercount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorcondenser", Integer.toString(sparessplitacoutdoorcondensercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            if (sparessplitacoutdoorcondensercount <= 0) {
                                sparesplitacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparesplitacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparessplitacoutdoorcondenserprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("OutdoorcondenserTOTAL").getValue().toString();
                    int sparessplitacoutdoorcondensercount = Integer.parseInt(stringsparessplitacoutdoorcondensercount);
                    sparessplitacoutdoorcondensercount = sparessplitacoutdoorcondensercount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorcondenserTOTAL", Integer.toString(sparessplitacoutdoorcondensercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("OutdoorcondenserTOTAL").getValue().toString();
                    int sparessplitacoutdoorcondensercount = Integer.parseInt(stringsparessplitacoutdoorcondensercount);

                    int outdoorcondenserdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Outdoorcondenser").getValue().toString());
                    if(outdoorcondenserdiscount==1)
                    {
                        sparessplitacoutdoorcondensercount = sparessplitacoutdoorcondensercount - price - dissparessplitacoutdoorcondenserprice;
                    }
                    else
                    {
                        sparessplitacoutdoorcondensercount = sparessplitacoutdoorcondensercount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorcondenserTOTAL", Integer.toString(sparessplitacoutdoorcondensercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparessplitacswingflapquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacswingflapcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Swingflap").getValue().toString();
                            int sparessplitacswingflapcount = Integer.parseInt(stringsparessplitacswingflapcount);
                            sparessplitacswingflapcount = sparessplitacswingflapcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Swingflap", Integer.toString(sparessplitacswingflapcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            sparesplitacswingflapprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacswingflapcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Swingflap").getValue().toString();
                            int sparessplitacswingflapcount = Integer.parseInt(stringsparessplitacswingflapcount);
                            sparessplitacswingflapcount = sparessplitacswingflapcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Swingflap", Integer.toString(sparessplitacswingflapcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            if (sparessplitacswingflapcount <= 0) {
                                sparesplitacswingflapprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparesplitacswingflapprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparessplitacswingflapprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacswingflapcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("SwingflapTOTAL").getValue().toString();
                    int sparessplitacswingflapcount = Integer.parseInt(stringsparessplitacswingflapcount);
                    sparessplitacswingflapcount = sparessplitacswingflapcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SwingflapTOTAL", Integer.toString(sparessplitacswingflapcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacswingflapcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("SwingflapTOTAL").getValue().toString();
                    int sparessplitacswingflapcount = Integer.parseInt(stringsparessplitacswingflapcount);
                    int swingflapdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Swingflap").getValue().toString());
                    if(swingflapdiscount==1)
                    {
                        sparessplitacswingflapcount = sparessplitacswingflapcount - price - dissparessplitacswingflapprice;
                    }
                    else
                    {
                        sparessplitacswingflapcount = sparessplitacswingflapcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SwingflapTOTAL", Integer.toString(sparessplitacswingflapcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparessplitacremotequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Remote").getValue().toString();
                            int sparessplitacremotecount = Integer.parseInt(stringsparessplitacremotecount);
                            sparessplitacremotecount = sparessplitacremotecount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Remote", Integer.toString(sparessplitacremotecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            sparesplitacremoteprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparessplitacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Remote").getValue().toString();
                            int sparessplitacremotecount = Integer.parseInt(stringsparessplitacremotecount);
                            sparessplitacremotecount = sparessplitacremotecount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Remote", Integer.toString(sparessplitacremotecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                            if (sparessplitacremotecount <= 0) {
                                sparesplitacremoteprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparesplitacremoteprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparessplitacremoteprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("RemoteTOTAL").getValue().toString();
                    int sparessplitacremotecount = Integer.parseInt(stringsparessplitacremotecount);
                    sparessplitacremotecount = sparessplitacremotecount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("RemoteTOTAL", Integer.toString(sparessplitacremotecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparessplitacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("RemoteTOTAL").getValue().toString();
                    int sparessplitacremotecount = Integer.parseInt(stringsparessplitacremotecount);
                    int remotediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child("Remote").getValue().toString());
                    if(remotediscount==1)
                    {
                        sparessplitacremotecount = sparessplitacremotecount - price - dissparessplitacremoteprice;
                    }
                    else
                    {
                        sparessplitacremotecount = sparessplitacremotecount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("RemoteTOTAL", Integer.toString(sparessplitacremotecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // windowAC

    private void spareswindowaccapacitorquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowaccapacitorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Capacitor").getValue().toString();
                            int spareswindowaccapacitorcount = Integer.parseInt(stringspareswindowaccapacitorcount);
                            spareswindowaccapacitorcount = spareswindowaccapacitorcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Capacitor", Integer.toString(spareswindowaccapacitorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            sparewindowaccapacitorprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowaccapacitorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Capacitor").getValue().toString();
                            int spareswindowaccapacitorcount = Integer.parseInt(stringspareswindowaccapacitorcount);
                            spareswindowaccapacitorcount = spareswindowaccapacitorcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Capacitor", Integer.toString(spareswindowaccapacitorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            if (spareswindowaccapacitorcount <= 0) {
                                sparewindowaccapacitorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparewindowaccapacitorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void spareswindowaccapacitorprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowaccapacitorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("CapacitorTOTAL").getValue().toString();
                    int spareswindowaccapacitorcount = Integer.parseInt(stringspareswindowaccapacitorcount);
                    spareswindowaccapacitorcount = spareswindowaccapacitorcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("CapacitorTOTAL", Integer.toString(spareswindowaccapacitorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowaccapacitorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("CapacitorTOTAL").getValue().toString();
                    int spareswindowaccapacitorcount = Integer.parseInt(stringspareswindowaccapacitorcount);
                    int capacitordiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Capacitor").getValue().toString());

                    if(capacitordiscount==1)
                    {
                        spareswindowaccapacitorcount= spareswindowaccapacitorcount - price - disspareswindowaccapacitorprice;
                    }
                    else
                    {
                        spareswindowaccapacitorcount = spareswindowaccapacitorcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("CapacitorTOTAL", Integer.toString(spareswindowaccapacitorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void spareswindowacblowerquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacblowercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Blower").getValue().toString();
                            int spareswindowacblowercount = Integer.parseInt(stringspareswindowacblowercount);
                            spareswindowacblowercount = spareswindowacblowercount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Blower", Integer.toString(spareswindowacblowercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            sparewindowacblowerprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacblowercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Blower").getValue().toString();
                            int spareswindowacblowercount = Integer.parseInt(stringspareswindowacblowercount);
                            spareswindowacblowercount = spareswindowacblowercount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Blower", Integer.toString(spareswindowacblowercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            if (spareswindowacblowercount <= 0) {
                                sparewindowacblowerprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparewindowacblowerprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void spareswindowacblowerprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacblowercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("BlowerTOTAL").getValue().toString();
                    int spareswindowacblowercount = Integer.parseInt(stringspareswindowacblowercount);
                    spareswindowacblowercount = spareswindowacblowercount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("BlowerTOTAL", Integer.toString(spareswindowacblowercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacblowercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("BlowerTOTAL").getValue().toString();
                    int spareswindowacblowercount = Integer.parseInt(stringspareswindowacblowercount);
                    int blowerdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Blower").getValue().toString());
                    if(blowerdiscount==1)
                    {
                        spareswindowacblowercount = spareswindowacblowercount - price - disspareswindowacblowerprice;
                    }
                    else
                    {
                        spareswindowacblowercount = spareswindowacblowercount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("BlowerTOTAL", Integer.toString(spareswindowacblowercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void spareswindowacoutdoorfanquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacoutdoorfancount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoorfan").getValue().toString();
                            int spareswindowacoutdoorfancount = Integer.parseInt(stringspareswindowacoutdoorfancount);
                            spareswindowacoutdoorfancount = spareswindowacoutdoorfancount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorfan", Integer.toString(spareswindowacoutdoorfancount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            sparewindowacoutdoorfanprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacoutdoorfancount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoorfan").getValue().toString();
                            int spareswindowacoutdoorfancount = Integer.parseInt(stringspareswindowacoutdoorfancount);
                            spareswindowacoutdoorfancount = spareswindowacoutdoorfancount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorfan", Integer.toString(spareswindowacoutdoorfancount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            if (spareswindowacoutdoorfancount <= 0) {
                                sparewindowacoutdoorfanprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparewindowacoutdoorfanprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void spareswindowacoutdoorfanprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacoutdoorfancount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("OutdoorfanTOTAL").getValue().toString();
                    int spareswindowacoutdoorfancount = Integer.parseInt(stringspareswindowacoutdoorfancount);
                    spareswindowacoutdoorfancount = spareswindowacoutdoorfancount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorfanTOTAL", Integer.toString(spareswindowacoutdoorfancount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacoutdoorfancount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("OutdoorfanTOTAL").getValue().toString();
                    int spareswindowacoutdoorfancount = Integer.parseInt(stringspareswindowacoutdoorfancount);
                    int outdoorfandiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoorfan").getValue().toString());
                    if(outdoorfandiscount==1)
                    {
                        spareswindowacoutdoorfancount = spareswindowacoutdoorfancount - price - disspareswindowacoutdoorfanprice;
                    }
                    else
                    {
                        spareswindowacoutdoorfancount = spareswindowacoutdoorfancount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorfanTOTAL", Integer.toString(spareswindowacoutdoorfancount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void spareswindowacindoormotorquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacindoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Indoormotor").getValue().toString();
                            int spareswindowacindoormotorcount = Integer.parseInt(stringspareswindowacindoormotorcount);
                            spareswindowacindoormotorcount = spareswindowacindoormotorcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoormotor", Integer.toString(spareswindowacindoormotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            sparewindowacindoormotorprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacindoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Indoormotor").getValue().toString();
                            int spareswindowacindoormotorcount = Integer.parseInt(stringspareswindowacindoormotorcount);
                            spareswindowacindoormotorcount = spareswindowacindoormotorcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoormotor", Integer.toString(spareswindowacindoormotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            if (spareswindowacindoormotorcount <= 0) {
                                sparewindowacindoormotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparewindowacindoormotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void spareswindowacindoormotorprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacindoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("IndoormotorTOTAL").getValue().toString();
                    int spareswindowacindoormotorcount = Integer.parseInt(stringspareswindowacindoormotorcount);
                    spareswindowacindoormotorcount = spareswindowacindoormotorcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoormotorTOTAL", Integer.toString(spareswindowacindoormotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacindoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("IndoormotorTOTAL").getValue().toString();
                    int spareswindowacindoormotorcount = Integer.parseInt(stringspareswindowacindoormotorcount);
                    int indoormotordiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Indoormotor").getValue().toString());
                    if(indoormotordiscount==1)
                    {
                        spareswindowacindoormotorcount = spareswindowacindoormotorcount - price - disspareswindowacindoormotorprice;
                    }
                    else
                    {
                        spareswindowacindoormotorcount = spareswindowacindoormotorcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoormotorTOTAL", Integer.toString(spareswindowacindoormotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void spareswindowacoutdoormotorquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacoutdoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoormotor").getValue().toString();
                            int spareswindowacoutdoormotorcount = Integer.parseInt(stringspareswindowacoutdoormotorcount);
                            spareswindowacoutdoormotorcount = spareswindowacoutdoormotorcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoormotor", Integer.toString(spareswindowacoutdoormotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            sparewindowacoutdoormotorprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacoutdoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoormotor").getValue().toString();
                            int spareswindowacoutdoormotorcount = Integer.parseInt(stringspareswindowacoutdoormotorcount);
                            spareswindowacoutdoormotorcount = spareswindowacoutdoormotorcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoormotor", Integer.toString(spareswindowacoutdoormotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            if (spareswindowacoutdoormotorcount <= 0) {
                                sparewindowacoutdoormotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparewindowacoutdoormotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void spareswindowacoutdoormotorprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacoutdoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("OutdoormotorTOTAL").getValue().toString();
                    int spareswindowacoutdoormotorcount = Integer.parseInt(stringspareswindowacoutdoormotorcount);
                    spareswindowacoutdoormotorcount = spareswindowacoutdoormotorcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoormotorTOTAL", Integer.toString(spareswindowacoutdoormotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacoutdoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("OutdoormotorTOTAL").getValue().toString();
                    int spareswindowacoutdoormotorcount = Integer.parseInt(stringspareswindowacoutdoormotorcount);

                    int outdoordiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoormotor").getValue().toString());
                    if(outdoordiscount==1)
                    {
                        spareswindowacoutdoormotorcount = spareswindowacoutdoormotorcount - price - disspareswindowacoutdoormotorprice;
                    }
                    else
                    {
                        spareswindowacoutdoormotorcount = spareswindowacoutdoormotorcount - price;
                    }

                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoormotorTOTAL", Integer.toString(spareswindowacoutdoormotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void spareswindowacswingmotorquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacswingmotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Swingmotor").getValue().toString();
                            int spareswindowacswingmotorcount = Integer.parseInt(stringspareswindowacswingmotorcount);
                            spareswindowacswingmotorcount = spareswindowacswingmotorcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Swingmotor", Integer.toString(spareswindowacswingmotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            sparewindowacswingmotorprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacswingmotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Swingmotor").getValue().toString();
                            int spareswindowacswingmotorcount = Integer.parseInt(stringspareswindowacswingmotorcount);
                            spareswindowacswingmotorcount = spareswindowacswingmotorcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Swingmotor", Integer.toString(spareswindowacswingmotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            if (spareswindowacswingmotorcount <= 0) {
                                sparewindowacswingmotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparewindowacswingmotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void spareswindowacswingmotorprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacswingmotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("SwingmotorTOTAL").getValue().toString();
                    int spareswindowacswingmotorcount = Integer.parseInt(stringspareswindowacswingmotorcount);
                    spareswindowacswingmotorcount = spareswindowacswingmotorcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SwingmotorTOTAL", Integer.toString(spareswindowacswingmotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacswingmotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("SwingmotorTOTAL").getValue().toString();
                    int spareswindowacswingmotorcount = Integer.parseInt(stringspareswindowacswingmotorcount);
                    int swingmotordiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Swingmotor").getValue().toString());
                    if(swingmotordiscount==1)
                    {
                        spareswindowacswingmotorcount = spareswindowacswingmotorcount - price - disspareswindowacswingmotorprice;
                    }
                    else
                    {
                        spareswindowacswingmotorcount = spareswindowacswingmotorcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SwingmotorTOTAL", Integer.toString(spareswindowacswingmotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void spareswindowacindoorcoilquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Indoorcoil").getValue().toString();
                            int spareswindowacindoorcoilcount = Integer.parseInt(stringspareswindowacindoorcoilcount);
                            spareswindowacindoorcoilcount = spareswindowacindoorcoilcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoorcoil", Integer.toString(spareswindowacindoorcoilcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            sparewindowacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Indoorcoil").getValue().toString();
                            int spareswindowacindoorcoilcount = Integer.parseInt(stringspareswindowacindoorcoilcount);
                            spareswindowacindoorcoilcount = spareswindowacindoorcoilcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoorcoil", Integer.toString(spareswindowacindoorcoilcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            if (spareswindowacindoorcoilcount <= 0) {
                                sparewindowacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparewindowacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void spareswindowacindoorcoilprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("IndoorcoilTOTAL").getValue().toString();
                    int spareswindowacindoorcoilcount = Integer.parseInt(stringspareswindowacindoorcoilcount);
                    spareswindowacindoorcoilcount = spareswindowacindoorcoilcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoorcoilTOTAL", Integer.toString(spareswindowacindoorcoilcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("IndoorcoilTOTAL").getValue().toString();
                    int spareswindowacindoorcoilcount = Integer.parseInt(stringspareswindowacindoorcoilcount);
                    int swingmotordiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Swingmotor").getValue().toString());
                    if(swingmotordiscount==1)
                    {
                        spareswindowacindoorcoilcount = spareswindowacindoorcoilcount - price - disspareswindowacindoorcoilprice;
                    }
                    else
                    {
                        spareswindowacindoorcoilcount = spareswindowacindoorcoilcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoorcoilTOTAL", Integer.toString(spareswindowacindoorcoilcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void spareswindowacoutdoorcondenserquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoorcondenser").getValue().toString();
                            int spareswindowacoutdoorcondensercount = Integer.parseInt(stringspareswindowacoutdoorcondensercount);
                            spareswindowacoutdoorcondensercount = spareswindowacoutdoorcondensercount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorcondenser", Integer.toString(spareswindowacoutdoorcondensercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            sparewindowacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoorcondenser").getValue().toString();
                            int spareswindowacoutdoorcondensercount = Integer.parseInt(stringspareswindowacoutdoorcondensercount);
                            spareswindowacoutdoorcondensercount = spareswindowacoutdoorcondensercount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorcondenser", Integer.toString(spareswindowacoutdoorcondensercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            if (spareswindowacoutdoorcondensercount <= 0) {
                                sparewindowacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparewindowacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void spareswindowacoutdoorcondenserprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("OutdoorcondenserTOTAL").getValue().toString();
                    int spareswindowacoutdoorcondensercount = Integer.parseInt(stringspareswindowacoutdoorcondensercount);
                    spareswindowacoutdoorcondensercount = spareswindowacoutdoorcondensercount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorcondenserTOTAL", Integer.toString(spareswindowacoutdoorcondensercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("OutdoorcondenserTOTAL").getValue().toString();
                    int spareswindowacoutdoorcondensercount = Integer.parseInt(stringspareswindowacoutdoorcondensercount);
                    int outdoorcondenserdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Outdoorcondenser").getValue().toString());
                    if(outdoorcondenserdiscount==1)
                    {
                        spareswindowacoutdoorcondensercount = spareswindowacoutdoorcondensercount - price - disspareswindowacoutdoorcondenserprice;
                    }
                    else
                    {
                        spareswindowacoutdoorcondensercount = spareswindowacoutdoorcondensercount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorcondenserTOTAL", Integer.toString(spareswindowacoutdoorcondensercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void spareswindowacswingflapquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacswingflapcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Swingflap").getValue().toString();
                            int spareswindowacswingflapcount = Integer.parseInt(stringspareswindowacswingflapcount);
                            spareswindowacswingflapcount = spareswindowacswingflapcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Swingflap", Integer.toString(spareswindowacswingflapcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            sparewindowacswingflapprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacswingflapcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Swingflap").getValue().toString();
                            int spareswindowacswingflapcount = Integer.parseInt(stringspareswindowacswingflapcount);
                            spareswindowacswingflapcount = spareswindowacswingflapcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Swingflap", Integer.toString(spareswindowacswingflapcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            if (spareswindowacswingflapcount <= 0) {
                                sparewindowacswingflapprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparewindowacswingflapprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void spareswindowacswingflapprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacswingflapcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("SwingflapTOTAL").getValue().toString();
                    int spareswindowacswingflapcount = Integer.parseInt(stringspareswindowacswingflapcount);
                    spareswindowacswingflapcount = spareswindowacswingflapcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SwingflapTOTAL", Integer.toString(spareswindowacswingflapcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacswingflapcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("SwingflapTOTAL").getValue().toString();
                    int spareswindowacswingflapcount = Integer.parseInt(stringspareswindowacswingflapcount);
                    int swingflapdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Swingflap").getValue().toString());
                    if(swingflapdiscount==1)
                    {
                        spareswindowacswingflapcount = spareswindowacswingflapcount - price - disspareswindowacswingflapprice;
                    }
                    else
                    {
                        spareswindowacswingflapcount = spareswindowacswingflapcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SwingflapTOTAL", Integer.toString(spareswindowacswingflapcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void spareswindowacremotequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Remote").getValue().toString();
                            int spareswindowacremotecount = Integer.parseInt(stringspareswindowacremotecount);
                            spareswindowacremotecount = spareswindowacremotecount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Remote", Integer.toString(spareswindowacremotecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            sparewindowacremoteprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringspareswindowacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Remote").getValue().toString();
                            int spareswindowacremotecount = Integer.parseInt(stringspareswindowacremotecount);
                            spareswindowacremotecount = spareswindowacremotecount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Remote", Integer.toString(spareswindowacremotecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                            if (spareswindowacremotecount <= 0) {
                                sparewindowacremoteprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparewindowacremoteprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void spareswindowacremoteprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("RemoteTOTAL").getValue().toString();
                    int spareswindowacremotecount = Integer.parseInt(stringspareswindowacremotecount);
                    spareswindowacremotecount = spareswindowacremotecount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("RemoteTOTAL", Integer.toString(spareswindowacremotecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringspareswindowacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("RemoteTOTAL").getValue().toString();
                    int spareswindowacremotecount = Integer.parseInt(stringspareswindowacremotecount);
                    int remotediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child("Remote").getValue().toString());
                    if(remotediscount==1)
                    {
                        spareswindowacremotecount = spareswindowacremotecount - price - disspareswindowacremoteprice;
                    }
                    else
                    {
                        spareswindowacremotecount = spareswindowacremotecount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("RemoteTOTAL", Integer.toString(spareswindowacremotecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // cassetteAC

    private void sparescassetteaccapacitorquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteaccapacitorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Capacitor").getValue().toString();
                            int sparescassetteaccapacitorcount = Integer.parseInt(stringsparescassetteaccapacitorcount);
                            sparescassetteaccapacitorcount = sparescassetteaccapacitorcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Capacitor", Integer.toString(sparescassetteaccapacitorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            sparecassetteaccapacitorprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteaccapacitorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Capacitor").getValue().toString();
                            int sparescassetteaccapacitorcount = Integer.parseInt(stringsparescassetteaccapacitorcount);
                            sparescassetteaccapacitorcount = sparescassetteaccapacitorcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Capacitor", Integer.toString(sparescassetteaccapacitorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            if (sparescassetteaccapacitorcount <= 0) {
                                sparecassetteaccapacitorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparecassetteaccapacitorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparescassetteaccapacitorprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteaccapacitorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("CapacitorTOTAL").getValue().toString();
                    int sparescassetteaccapacitorcount = Integer.parseInt(stringsparescassetteaccapacitorcount);
                    sparescassetteaccapacitorcount = sparescassetteaccapacitorcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("CapacitorTOTAL", Integer.toString(sparescassetteaccapacitorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteaccapacitorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("CapacitorTOTAL").getValue().toString();
                    int sparescassetteaccapacitorcount = Integer.parseInt(stringsparescassetteaccapacitorcount);
                    int capacitordiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Capacitor").getValue().toString());

                    if(capacitordiscount==1)
                    {
                        sparescassetteaccapacitorcount= sparescassetteaccapacitorcount - price - dissparescassetteaccapacitorprice;
                    }
                    else
                    {
                        sparescassetteaccapacitorcount = sparescassetteaccapacitorcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("CapacitorTOTAL", Integer.toString(sparescassetteaccapacitorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparescassetteacblowerquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacblowercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Blower").getValue().toString();
                            int sparescassetteacblowercount = Integer.parseInt(stringsparescassetteacblowercount);
                            sparescassetteacblowercount = sparescassetteacblowercount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Blower", Integer.toString(sparescassetteacblowercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            sparecassetteacblowerprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacblowercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Blower").getValue().toString();
                            int sparescassetteacblowercount = Integer.parseInt(stringsparescassetteacblowercount);
                            sparescassetteacblowercount = sparescassetteacblowercount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Blower", Integer.toString(sparescassetteacblowercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            if (sparescassetteacblowercount <= 0) {
                                sparecassetteacblowerprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparecassetteacblowerprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparescassetteacblowerprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacblowercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("BlowerTOTAL").getValue().toString();
                    int sparescassetteacblowercount = Integer.parseInt(stringsparescassetteacblowercount);
                    sparescassetteacblowercount = sparescassetteacblowercount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("BlowerTOTAL", Integer.toString(sparescassetteacblowercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacblowercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("BlowerTOTAL").getValue().toString();
                    int sparescassetteacblowercount = Integer.parseInt(stringsparescassetteacblowercount);
                    int blowerdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Blower").getValue().toString());
                    if(blowerdiscount==1)
                    {
                        sparescassetteacblowercount = sparescassetteacblowercount - price - dissparescassetteacblowerprice;
                    }
                    else
                    {
                        sparescassetteacblowercount = sparescassetteacblowercount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("BlowerTOTAL", Integer.toString(sparescassetteacblowercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparescassetteacoutdoorfanquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacoutdoorfancount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoorfan").getValue().toString();
                            int sparescassetteacoutdoorfancount = Integer.parseInt(stringsparescassetteacoutdoorfancount);
                            sparescassetteacoutdoorfancount = sparescassetteacoutdoorfancount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorfan", Integer.toString(sparescassetteacoutdoorfancount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            sparecassetteacoutdoorfanprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacoutdoorfancount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoorfan").getValue().toString();
                            int sparescassetteacoutdoorfancount = Integer.parseInt(stringsparescassetteacoutdoorfancount);
                            sparescassetteacoutdoorfancount = sparescassetteacoutdoorfancount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorfan", Integer.toString(sparescassetteacoutdoorfancount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            if (sparescassetteacoutdoorfancount <= 0) {
                                sparecassetteacoutdoorfanprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparecassetteacoutdoorfanprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparescassetteacoutdoorfanprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacoutdoorfancount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("OutdoorfanTOTAL").getValue().toString();
                    int sparescassetteacoutdoorfancount = Integer.parseInt(stringsparescassetteacoutdoorfancount);
                    sparescassetteacoutdoorfancount = sparescassetteacoutdoorfancount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorfanTOTAL", Integer.toString(sparescassetteacoutdoorfancount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacoutdoorfancount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("OutdoorfanTOTAL").getValue().toString();
                    int sparescassetteacoutdoorfancount = Integer.parseInt(stringsparescassetteacoutdoorfancount);
                    int outdoorfandiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoorfan").getValue().toString());
                    if(outdoorfandiscount==1)
                    {
                        sparescassetteacoutdoorfancount = sparescassetteacoutdoorfancount - price - dissparescassetteacoutdoorfanprice;
                    }
                    else
                    {
                        sparescassetteacoutdoorfancount = sparescassetteacoutdoorfancount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorfanTOTAL", Integer.toString(sparescassetteacoutdoorfancount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparescassetteacindoormotorquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacindoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Indoormotor").getValue().toString();
                            int sparescassetteacindoormotorcount = Integer.parseInt(stringsparescassetteacindoormotorcount);
                            sparescassetteacindoormotorcount = sparescassetteacindoormotorcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoormotor", Integer.toString(sparescassetteacindoormotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            sparecassetteacindoormotorprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacindoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Indoormotor").getValue().toString();
                            int sparescassetteacindoormotorcount = Integer.parseInt(stringsparescassetteacindoormotorcount);
                            sparescassetteacindoormotorcount = sparescassetteacindoormotorcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoormotor", Integer.toString(sparescassetteacindoormotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            if (sparescassetteacindoormotorcount <= 0) {
                                sparecassetteacindoormotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparecassetteacindoormotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparescassetteacindoormotorprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacindoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("IndoormotorTOTAL").getValue().toString();
                    int sparescassetteacindoormotorcount = Integer.parseInt(stringsparescassetteacindoormotorcount);
                    sparescassetteacindoormotorcount = sparescassetteacindoormotorcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoormotorTOTAL", Integer.toString(sparescassetteacindoormotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacindoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("IndoormotorTOTAL").getValue().toString();
                    int sparescassetteacindoormotorcount = Integer.parseInt(stringsparescassetteacindoormotorcount);
                    int indoormotordiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Indoormotor").getValue().toString());
                    if(indoormotordiscount==1)
                    {
                        sparescassetteacindoormotorcount = sparescassetteacindoormotorcount - price - dissparescassetteacindoormotorprice;
                    }
                    else
                    {
                        sparescassetteacindoormotorcount = sparescassetteacindoormotorcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoormotorTOTAL", Integer.toString(sparescassetteacindoormotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparescassetteacoutdoormotorquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacoutdoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoormotor").getValue().toString();
                            int sparescassetteacoutdoormotorcount = Integer.parseInt(stringsparescassetteacoutdoormotorcount);
                            sparescassetteacoutdoormotorcount = sparescassetteacoutdoormotorcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoormotor", Integer.toString(sparescassetteacoutdoormotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            sparecassetteacoutdoormotorprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacoutdoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoormotor").getValue().toString();
                            int sparescassetteacoutdoormotorcount = Integer.parseInt(stringsparescassetteacoutdoormotorcount);
                            sparescassetteacoutdoormotorcount = sparescassetteacoutdoormotorcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoormotor", Integer.toString(sparescassetteacoutdoormotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            if (sparescassetteacoutdoormotorcount <= 0) {
                                sparecassetteacoutdoormotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparecassetteacoutdoormotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparescassetteacoutdoormotorprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacoutdoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("OutdoormotorTOTAL").getValue().toString();
                    int sparescassetteacoutdoormotorcount = Integer.parseInt(stringsparescassetteacoutdoormotorcount);
                    sparescassetteacoutdoormotorcount = sparescassetteacoutdoormotorcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoormotorTOTAL", Integer.toString(sparescassetteacoutdoormotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacoutdoormotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("OutdoormotorTOTAL").getValue().toString();
                    int sparescassetteacoutdoormotorcount = Integer.parseInt(stringsparescassetteacoutdoormotorcount);
                    int outdoordiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoormotor").getValue().toString());
                    if(outdoordiscount==1)
                    {
                        sparescassetteacoutdoormotorcount = sparescassetteacoutdoormotorcount - price - dissparescassetteacoutdoormotorprice;
                    }
                    else
                    {
                        sparescassetteacoutdoormotorcount = sparescassetteacoutdoormotorcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoormotorTOTAL", Integer.toString(sparescassetteacoutdoormotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparescassetteacswingmotorquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacswingmotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Swingmotor").getValue().toString();
                            int sparescassetteacswingmotorcount = Integer.parseInt(stringsparescassetteacswingmotorcount);
                            sparescassetteacswingmotorcount = sparescassetteacswingmotorcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Swingmotor", Integer.toString(sparescassetteacswingmotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            sparecassetteacswingmotorprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacswingmotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Swingmotor").getValue().toString();
                            int sparescassetteacswingmotorcount = Integer.parseInt(stringsparescassetteacswingmotorcount);
                            sparescassetteacswingmotorcount = sparescassetteacswingmotorcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Swingmotor", Integer.toString(sparescassetteacswingmotorcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            if (sparescassetteacswingmotorcount <= 0) {
                                sparecassetteacswingmotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparecassetteacswingmotorprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparescassetteacswingmotorprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacswingmotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("SwingmotorTOTAL").getValue().toString();
                    int sparescassetteacswingmotorcount = Integer.parseInt(stringsparescassetteacswingmotorcount);
                    sparescassetteacswingmotorcount = sparescassetteacswingmotorcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SwingmotorTOTAL", Integer.toString(sparescassetteacswingmotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacswingmotorcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("SwingmotorTOTAL").getValue().toString();
                    int sparescassetteacswingmotorcount = Integer.parseInt(stringsparescassetteacswingmotorcount);
                    int swingmotordiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Swingmotor").getValue().toString());
                    if(swingmotordiscount==1)
                    {
                        sparescassetteacswingmotorcount = sparescassetteacswingmotorcount - price - dissparescassetteacswingmotorprice;
                    }
                    else
                    {
                        sparescassetteacswingmotorcount = sparescassetteacswingmotorcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SwingmotorTOTAL", Integer.toString(sparescassetteacswingmotorcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparescassetteacindoorcoilquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Indoorcoil").getValue().toString();
                            int sparescassetteacindoorcoilcount = Integer.parseInt(stringsparescassetteacindoorcoilcount);
                            sparescassetteacindoorcoilcount = sparescassetteacindoorcoilcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoorcoil", Integer.toString(sparescassetteacindoorcoilcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            sparecassetteacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Indoorcoil").getValue().toString();
                            int sparescassetteacindoorcoilcount = Integer.parseInt(stringsparescassetteacindoorcoilcount);
                            sparescassetteacindoorcoilcount = sparescassetteacindoorcoilcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoorcoil", Integer.toString(sparescassetteacindoorcoilcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            if (sparescassetteacindoorcoilcount <= 0) {
                                sparecassetteacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparecassetteacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparescassetteacindoorcoilprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("IndoorcoilTOTAL").getValue().toString();
                    int sparescassetteacindoorcoilcount = Integer.parseInt(stringsparescassetteacindoorcoilcount);
                    sparescassetteacindoorcoilcount = sparescassetteacindoorcoilcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoorcoilTOTAL", Integer.toString(sparescassetteacindoorcoilcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("IndoorcoilTOTAL").getValue().toString();
                    int sparescassetteacindoorcoilcount = Integer.parseInt(stringsparescassetteacindoorcoilcount);
                    int indoorcoildiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Indoorcoil").getValue().toString());
                    if(indoorcoildiscount==1)
                    {
                        sparescassetteacindoorcoilcount = sparescassetteacindoorcoilcount - price - dissparescassetteacindoorcoilprice;
                    }
                    else
                    {
                        sparescassetteacindoorcoilcount = sparescassetteacindoorcoilcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoorcoilTOTAL", Integer.toString(sparescassetteacindoorcoilcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparescassetteacoutdoorcondenserquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoorcondenser").getValue().toString();
                            int sparescassetteacoutdoorcondensercount = Integer.parseInt(stringsparescassetteacoutdoorcondensercount);
                            sparescassetteacoutdoorcondensercount = sparescassetteacoutdoorcondensercount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorcondenser", Integer.toString(sparescassetteacoutdoorcondensercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            sparecassetteacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoorcondenser").getValue().toString();
                            int sparescassetteacoutdoorcondensercount = Integer.parseInt(stringsparescassetteacoutdoorcondensercount);
                            sparescassetteacoutdoorcondensercount = sparescassetteacoutdoorcondensercount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorcondenser", Integer.toString(sparescassetteacoutdoorcondensercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            if (sparescassetteacoutdoorcondensercount <= 0) {
                                sparecassetteacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparecassetteacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparescassetteacoutdoorcondenserprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("OutdoorcondenserTOTAL").getValue().toString();
                    int sparescassetteacoutdoorcondensercount = Integer.parseInt(stringsparescassetteacoutdoorcondensercount);
                    sparescassetteacoutdoorcondensercount = sparescassetteacoutdoorcondensercount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorcondenserTOTAL", Integer.toString(sparescassetteacoutdoorcondensercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("OutdoorcondenserTOTAL").getValue().toString();
                    int sparescassetteacoutdoorcondensercount = Integer.parseInt(stringsparescassetteacoutdoorcondensercount);
                    int outdoorcondenserdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Outdoorcondenser").getValue().toString());
                    if(outdoorcondenserdiscount==1)
                    {
                        sparescassetteacoutdoorcondensercount = sparescassetteacoutdoorcondensercount - price - dissparescassetteacoutdoorcondenserprice;
                    }
                    else
                    {
                        sparescassetteacoutdoorcondensercount = sparescassetteacoutdoorcondensercount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorcondenserTOTAL", Integer.toString(sparescassetteacoutdoorcondensercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparescassetteacswingflapquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacswingflapcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Swingflap").getValue().toString();
                            int sparescassetteacswingflapcount = Integer.parseInt(stringsparescassetteacswingflapcount);
                            sparescassetteacswingflapcount = sparescassetteacswingflapcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Swingflap", Integer.toString(sparescassetteacswingflapcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            sparecassetteacswingflapprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacswingflapcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Swingflap").getValue().toString();
                            int sparescassetteacswingflapcount = Integer.parseInt(stringsparescassetteacswingflapcount);
                            sparescassetteacswingflapcount = sparescassetteacswingflapcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Swingflap", Integer.toString(sparescassetteacswingflapcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            if (sparescassetteacswingflapcount <= 0) {
                                sparecassetteacswingflapprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparecassetteacswingflapprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparescassetteacswingflapprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacswingflapcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("SwingflapTOTAL").getValue().toString();
                    int sparescassetteacswingflapcount = Integer.parseInt(stringsparescassetteacswingflapcount);
                    sparescassetteacswingflapcount = sparescassetteacswingflapcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SwingflapTOTAL", Integer.toString(sparescassetteacswingflapcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacswingflapcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("SwingflapTOTAL").getValue().toString();
                    int sparescassetteacswingflapcount = Integer.parseInt(stringsparescassetteacswingflapcount);
                    int swingflapdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Swingflap").getValue().toString());
                    if(swingflapdiscount==1)
                    {
                        sparescassetteacswingflapcount = sparescassetteacswingflapcount - price - dissparescassetteacswingflapprice;
                    }
                    else
                    {
                        sparescassetteacswingflapcount = sparescassetteacswingflapcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("SwingflapTOTAL", Integer.toString(sparescassetteacswingflapcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void sparescassetteacremotequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Remote").getValue().toString();
                            int sparescassetteacremotecount = Integer.parseInt(stringsparescassetteacremotecount);
                            sparescassetteacremotecount = sparescassetteacremotecount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Remote", Integer.toString(sparescassetteacremotecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            sparecassetteacremoteprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsparescassetteacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Remote").getValue().toString();
                            int sparescassetteacremotecount = Integer.parseInt(stringsparescassetteacremotecount);
                            sparescassetteacremotecount = sparescassetteacremotecount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Remote", Integer.toString(sparescassetteacremotecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                            if (sparescassetteacremotecount <= 0) {
                                sparecassetteacremoteprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                sparecassetteacremoteprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void sparescassetteacremoteprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("RemoteTOTAL").getValue().toString();
                    int sparescassetteacremotecount = Integer.parseInt(stringsparescassetteacremotecount);
                    sparescassetteacremotecount = sparescassetteacremotecount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("RemoteTOTAL", Integer.toString(sparescassetteacremotecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringsparescassetteacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("RemoteTOTAL").getValue().toString();
                    int sparescassetteacremotecount = Integer.parseInt(stringsparescassetteacremotecount);
                    int remotediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child("Remote").getValue().toString());
                    if(remotediscount==1)
                    {
                        sparescassetteacremotecount = sparescassetteacremotecount - price - dissparescassetteacremoteprice;
                    }
                    else
                    {
                        sparescassetteacremotecount = sparescassetteacremotecount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("RemoteTOTAL", Integer.toString(sparescassetteacremotecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // faults

    // SPLITAC

    private void faultssplitacwaterleakquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacwaterleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Waterleak").getValue().toString();
                            int faultssplitacwaterleakcount = Integer.parseInt(stringfaultssplitacwaterleakcount);
                            faultssplitacwaterleakcount = faultssplitacwaterleakcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Waterleak", Integer.toString(faultssplitacwaterleakcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            faultsplitacwaterleakprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacwaterleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Waterleak").getValue().toString();
                            int faultssplitacwaterleakcount = Integer.parseInt(stringfaultssplitacwaterleakcount);
                            faultssplitacwaterleakcount = faultssplitacwaterleakcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Waterleak", Integer.toString(faultssplitacwaterleakcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            if (faultssplitacwaterleakcount <= 0) {
                                faultsplitacwaterleakprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultsplitacwaterleakprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultssplitacwaterleakprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacwaterleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("WaterleakTOTAL").getValue().toString();
                    int faultssplitacwaterleakcount = Integer.parseInt(stringfaultssplitacwaterleakcount);
                    faultssplitacwaterleakcount = faultssplitacwaterleakcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("WaterleakTOTAL", Integer.toString(faultssplitacwaterleakcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacwaterleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("WaterleakTOTAL").getValue().toString();
                    int faultssplitacwaterleakcount = Integer.parseInt(stringfaultssplitacwaterleakcount);
                    int waterleakdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Waterleak").getValue().toString());
                    if(waterleakdiscount==1)
                    {
                        faultssplitacwaterleakcount= faultssplitacwaterleakcount - price - disfaultssplitacwaterleakprice;
                    }
                    else
                    {
                        faultssplitacwaterleakcount = faultssplitacwaterleakcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("WaterleakTOTAL", Integer.toString(faultssplitacwaterleakcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultssplitacgasleakquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacgasleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Gasleak").getValue().toString();
                            int faultssplitacgasleakcount = Integer.parseInt(stringfaultssplitacgasleakcount);
                            faultssplitacgasleakcount = faultssplitacgasleakcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Gasleak", Integer.toString(faultssplitacgasleakcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            faultsplitacgasleakprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacgasleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Gasleak").getValue().toString();
                            int faultssplitacgasleakcount = Integer.parseInt(stringfaultssplitacgasleakcount);
                            faultssplitacgasleakcount = faultssplitacgasleakcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Gasleak", Integer.toString(faultssplitacgasleakcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            if (faultssplitacgasleakcount <= 0) {
                                faultsplitacgasleakprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultsplitacgasleakprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultssplitacgasleakprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacgasleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("GasleakTOTAL").getValue().toString();
                    int faultssplitacgasleakcount = Integer.parseInt(stringfaultssplitacgasleakcount);
                    faultssplitacgasleakcount = faultssplitacgasleakcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("GasleakTOTAL", Integer.toString(faultssplitacgasleakcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacgasleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("GasleakTOTAL").getValue().toString();
                    int faultssplitacgasleakcount = Integer.parseInt(stringfaultssplitacgasleakcount);
                    int gasleakdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Gasleak").getValue().toString());
                    if(gasleakdiscount==1)
                    {
                        faultssplitacgasleakcount = faultssplitacgasleakcount - price - disfaultssplitacgasleakprice;
                    }
                    else
                    {
                        faultssplitacgasleakcount = faultssplitacgasleakcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("GasleakTOTAL", Integer.toString(faultssplitacgasleakcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultssplitacpcboardquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacpcboardcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Pcboard").getValue().toString();
                            int faultssplitacpcboardcount = Integer.parseInt(stringfaultssplitacpcboardcount);
                            faultssplitacpcboardcount = faultssplitacpcboardcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Pcboard", Integer.toString(faultssplitacpcboardcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            faultsplitacpcboardprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacpcboardcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Pcboard").getValue().toString();
                            int faultssplitacpcboardcount = Integer.parseInt(stringfaultssplitacpcboardcount);
                            faultssplitacpcboardcount = faultssplitacpcboardcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Pcboard", Integer.toString(faultssplitacpcboardcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            if (faultssplitacpcboardcount <= 0) {
                                faultsplitacpcboardprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultsplitacpcboardprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultssplitacpcboardprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacpcboardcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("PcboardTOTAL").getValue().toString();
                    int faultssplitacpcboardcount = Integer.parseInt(stringfaultssplitacpcboardcount);
                    faultssplitacpcboardcount = faultssplitacpcboardcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("PcboardTOTAL", Integer.toString(faultssplitacpcboardcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacpcboardcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("PcboardTOTAL").getValue().toString();
                    int faultssplitacpcboardcount = Integer.parseInt(stringfaultssplitacpcboardcount);
                    int pcboarddiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Pcboard").getValue().toString());
                    if(pcboarddiscount==1)
                    {
                        faultssplitacpcboardcount = faultssplitacpcboardcount - price - disfaultssplitacpcboardprice;
                    }
                    else
                    {
                        faultssplitacpcboardcount = faultssplitacpcboardcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("PcboardTOTAL", Integer.toString(faultssplitacpcboardcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultssplitacstabilizerquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacstabilizercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Stabilizer").getValue().toString();
                            int faultssplitacstabilizercount = Integer.parseInt(stringfaultssplitacstabilizercount);
                            faultssplitacstabilizercount = faultssplitacstabilizercount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Stabilizer", Integer.toString(faultssplitacstabilizercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            faultsplitacstabilizerprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacstabilizercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Stabilizer").getValue().toString();
                            int faultssplitacstabilizercount = Integer.parseInt(stringfaultssplitacstabilizercount);
                            faultssplitacstabilizercount = faultssplitacstabilizercount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Stabilizer", Integer.toString(faultssplitacstabilizercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            if (faultssplitacstabilizercount <= 0) {
                                faultsplitacstabilizerprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultsplitacstabilizerprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultssplitacstabilizerprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacstabilizercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("StabilizerTOTAL").getValue().toString();
                    int faultssplitacstabilizercount = Integer.parseInt(stringfaultssplitacstabilizercount);
                    faultssplitacstabilizercount = faultssplitacstabilizercount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("StabilizerTOTAL", Integer.toString(faultssplitacstabilizercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacstabilizercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("StabilizerTOTAL").getValue().toString();
                    int faultssplitacstabilizercount = Integer.parseInt(stringfaultssplitacstabilizercount);
                    int stabilizerdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Stabilizer").getValue().toString());
                    if(stabilizerdiscount==1)
                    {
                        faultssplitacstabilizercount = faultssplitacstabilizercount - price - disfaultssplitacstabilizerprice;
                    }
                    else
                    {
                        faultssplitacstabilizercount = faultssplitacstabilizercount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("StabilizerTOTAL", Integer.toString(faultssplitacstabilizercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultssplitacindoorcoilquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Indoorcoil").getValue().toString();
                            int faultssplitacindoorcoilcount = Integer.parseInt(stringfaultssplitacindoorcoilcount);
                            faultssplitacindoorcoilcount = faultssplitacindoorcoilcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoorcoil", Integer.toString(faultssplitacindoorcoilcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            faultsplitacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Indoorcoil").getValue().toString();
                            int faultssplitacindoorcoilcount = Integer.parseInt(stringfaultssplitacindoorcoilcount);
                            faultssplitacindoorcoilcount = faultssplitacindoorcoilcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoorcoil", Integer.toString(faultssplitacindoorcoilcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            if (faultssplitacindoorcoilcount <= 0) {
                                faultsplitacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultsplitacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultssplitacindoorcoilprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("IndoorcoilTOTAL").getValue().toString();
                    int faultssplitacindoorcoilcount = Integer.parseInt(stringfaultssplitacindoorcoilcount);
                    faultssplitacindoorcoilcount = faultssplitacindoorcoilcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoorcoilTOTAL", Integer.toString(faultssplitacindoorcoilcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("IndoorcoilTOTAL").getValue().toString();
                    int faultssplitacindoorcoilcount = Integer.parseInt(stringfaultssplitacindoorcoilcount);
                    int indoorcoildiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Indoorcoil").getValue().toString());
                    if(indoorcoildiscount==1)
                    {
                        faultssplitacindoorcoilcount = faultssplitacindoorcoilcount - price - disfaultssplitacindoorcoilprice;
                    }
                    else
                    {
                        faultssplitacindoorcoilcount = faultssplitacindoorcoilcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoorcoilTOTAL", Integer.toString(faultssplitacindoorcoilcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultssplitacoutdoorcondenserquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Outdoorcondenser").getValue().toString();
                            int faultssplitacoutdoorcondensercount = Integer.parseInt(stringfaultssplitacoutdoorcondensercount);
                            faultssplitacoutdoorcondensercount = faultssplitacoutdoorcondensercount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorcondenser", Integer.toString(faultssplitacoutdoorcondensercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            faultsplitacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Outdoorcondenser").getValue().toString();
                            int faultssplitacoutdoorcondensercount = Integer.parseInt(stringfaultssplitacoutdoorcondensercount);
                            faultssplitacoutdoorcondensercount = faultssplitacoutdoorcondensercount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorcondenser", Integer.toString(faultssplitacoutdoorcondensercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            if (faultssplitacoutdoorcondensercount <= 0) {
                                faultsplitacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultsplitacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultssplitacoutdoorcondenserprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("OutdoorcondenserTOTAL").getValue().toString();
                    int faultssplitacoutdoorcondensercount = Integer.parseInt(stringfaultssplitacoutdoorcondensercount);
                    faultssplitacoutdoorcondensercount = faultssplitacoutdoorcondensercount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorcondenserTOTAL", Integer.toString(faultssplitacoutdoorcondensercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("OutdoorcondenserTOTAL").getValue().toString();
                    int faultssplitacoutdoorcondensercount = Integer.parseInt(stringfaultssplitacoutdoorcondensercount);
                    int outdoorcondenserdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Outdoorcondenser").getValue().toString());
                    if(outdoorcondenserdiscount==1)
                    {
                        faultssplitacoutdoorcondensercount = faultssplitacoutdoorcondensercount - price - disfaultssplitacoutdoorcondenserprice;
                    }
                    else
                    {
                        faultssplitacoutdoorcondensercount = faultssplitacoutdoorcondensercount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorcondenserTOTAL", Integer.toString(faultssplitacoutdoorcondensercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultssplitacremotequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Remote").getValue().toString();
                            int faultssplitacremotecount = Integer.parseInt(stringfaultssplitacremotecount);
                            faultssplitacremotecount = faultssplitacremotecount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Remote", Integer.toString(faultssplitacremotecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            faultsplitacremoteprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultssplitacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Remote").getValue().toString();
                            int faultssplitacremotecount = Integer.parseInt(stringfaultssplitacremotecount);
                            faultssplitacremotecount = faultssplitacremotecount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Remote", Integer.toString(faultssplitacremotecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                            if (faultssplitacremotecount <= 0) {
                                faultsplitacremoteprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultsplitacremoteprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultssplitacremoteprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("RemoteTOTAL").getValue().toString();
                    int faultssplitacremotecount = Integer.parseInt(stringfaultssplitacremotecount);
                    faultssplitacremotecount = faultssplitacremotecount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("RemoteTOTAL", Integer.toString(faultssplitacremotecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultssplitacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("RemoteTOTAL").getValue().toString();
                    int faultssplitacremotecount = Integer.parseInt(stringfaultssplitacremotecount);
                    int remotediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Remote").getValue().toString());
                    if(remotediscount==1)
                    {
                        faultssplitacremotecount = faultssplitacremotecount - price - disfaultssplitacremoteprice;
                    }
                    else
                    {
                        faultssplitacremotecount = faultssplitacremotecount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("RemoteTOTAL", Integer.toString(faultssplitacremotecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // windowAC

    private void faultswindowacwaterleakquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacwaterleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Waterleak").getValue().toString();
                            int faultswindowacwaterleakcount = Integer.parseInt(stringfaultswindowacwaterleakcount);
                            faultswindowacwaterleakcount = faultswindowacwaterleakcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Waterleak", Integer.toString(faultswindowacwaterleakcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            faultwindowacwaterleakprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacwaterleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Waterleak").getValue().toString();
                            int faultswindowacwaterleakcount = Integer.parseInt(stringfaultswindowacwaterleakcount);
                            faultswindowacwaterleakcount = faultswindowacwaterleakcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Waterleak", Integer.toString(faultswindowacwaterleakcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            if (faultswindowacwaterleakcount <= 0) {
                                faultwindowacwaterleakprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultwindowacwaterleakprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultswindowacwaterleakprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacwaterleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("WaterleakTOTAL").getValue().toString();
                    int faultswindowacwaterleakcount = Integer.parseInt(stringfaultswindowacwaterleakcount);
                    faultswindowacwaterleakcount = faultswindowacwaterleakcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("WaterleakTOTAL", Integer.toString(faultswindowacwaterleakcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacwaterleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("WaterleakTOTAL").getValue().toString();
                    int faultswindowacwaterleakcount = Integer.parseInt(stringfaultswindowacwaterleakcount);
                    int waterleakdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Waterleak").getValue().toString());
                    if(waterleakdiscount==1)
                    {
                        faultswindowacwaterleakcount= faultswindowacwaterleakcount - price - disfaultswindowacwaterleakprice;
                    }
                    else
                    {
                        faultswindowacwaterleakcount = faultswindowacwaterleakcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("WaterleakTOTAL", Integer.toString(faultswindowacwaterleakcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultswindowacgasleakquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacgasleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Gasleak").getValue().toString();
                            int faultswindowacgasleakcount = Integer.parseInt(stringfaultswindowacgasleakcount);
                            faultswindowacgasleakcount = faultswindowacgasleakcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Gasleak", Integer.toString(faultswindowacgasleakcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            faultwindowacgasleakprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacgasleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Gasleak").getValue().toString();
                            int faultswindowacgasleakcount = Integer.parseInt(stringfaultswindowacgasleakcount);
                            faultswindowacgasleakcount = faultswindowacgasleakcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Gasleak", Integer.toString(faultswindowacgasleakcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            if (faultswindowacgasleakcount <= 0) {
                                faultwindowacgasleakprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultwindowacgasleakprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultswindowacgasleakprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacgasleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("GasleakTOTAL").getValue().toString();
                    int faultswindowacgasleakcount = Integer.parseInt(stringfaultswindowacgasleakcount);
                    faultswindowacgasleakcount = faultswindowacgasleakcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("GasleakTOTAL", Integer.toString(faultswindowacgasleakcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacgasleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("GasleakTOTAL").getValue().toString();
                    int faultswindowacgasleakcount = Integer.parseInt(stringfaultswindowacgasleakcount);
                    int gasleakdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Gasleak").getValue().toString());
                    if(gasleakdiscount==1)
                    {
                        faultswindowacgasleakcount = faultswindowacgasleakcount - price - disfaultswindowacgasleakprice;
                    }
                    else
                    {
                        faultswindowacgasleakcount = faultswindowacgasleakcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("GasleakTOTAL", Integer.toString(faultswindowacgasleakcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultswindowacpcboardquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacpcboardcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Pcboard").getValue().toString();
                            int faultswindowacpcboardcount = Integer.parseInt(stringfaultswindowacpcboardcount);
                            faultswindowacpcboardcount = faultswindowacpcboardcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Pcboard", Integer.toString(faultswindowacpcboardcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            faultwindowacpcboardprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacpcboardcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Pcboard").getValue().toString();
                            int faultswindowacpcboardcount = Integer.parseInt(stringfaultswindowacpcboardcount);
                            faultswindowacpcboardcount = faultswindowacpcboardcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Pcboard", Integer.toString(faultswindowacpcboardcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            if (faultswindowacpcboardcount <= 0) {
                                faultwindowacpcboardprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultwindowacpcboardprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultswindowacpcboardprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacpcboardcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("PcboardTOTAL").getValue().toString();
                    int faultswindowacpcboardcount = Integer.parseInt(stringfaultswindowacpcboardcount);
                    faultswindowacpcboardcount = faultswindowacpcboardcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("PcboardTOTAL", Integer.toString(faultswindowacpcboardcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacpcboardcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("PcboardTOTAL").getValue().toString();
                    int faultswindowacpcboardcount = Integer.parseInt(stringfaultswindowacpcboardcount);
                    int pcboarddiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Pcboard").getValue().toString());
                    if(pcboarddiscount==1)
                    {
                        faultswindowacpcboardcount = faultswindowacpcboardcount - price - disfaultswindowacpcboardprice;
                    }
                    else
                    {
                        faultswindowacpcboardcount = faultswindowacpcboardcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("PcboardTOTAL", Integer.toString(faultswindowacpcboardcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultswindowacstabilizerquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacstabilizercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Stabilizer").getValue().toString();
                            int faultswindowacstabilizercount = Integer.parseInt(stringfaultswindowacstabilizercount);
                            faultswindowacstabilizercount = faultswindowacstabilizercount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Stabilizer", Integer.toString(faultswindowacstabilizercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            faultwindowacstabilizerprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacstabilizercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Stabilizer").getValue().toString();
                            int faultswindowacstabilizercount = Integer.parseInt(stringfaultswindowacstabilizercount);
                            faultswindowacstabilizercount = faultswindowacstabilizercount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Stabilizer", Integer.toString(faultswindowacstabilizercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            if (faultswindowacstabilizercount <= 0) {
                                faultwindowacstabilizerprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultwindowacstabilizerprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultswindowacstabilizerprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacstabilizercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("StabilizerTOTAL").getValue().toString();
                    int faultswindowacstabilizercount = Integer.parseInt(stringfaultswindowacstabilizercount);
                    faultswindowacstabilizercount = faultswindowacstabilizercount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("StabilizerTOTAL", Integer.toString(faultswindowacstabilizercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacstabilizercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("StabilizerTOTAL").getValue().toString();
                    int faultswindowacstabilizercount = Integer.parseInt(stringfaultswindowacstabilizercount);
                    int stabilizerdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Stabilizer").getValue().toString());
                    if(stabilizerdiscount==1)
                    {
                        faultswindowacstabilizercount = faultswindowacstabilizercount - price - disfaultswindowacstabilizerprice;
                    }
                    else
                    {
                        faultswindowacstabilizercount = faultswindowacstabilizercount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("StabilizerTOTAL", Integer.toString(faultswindowacstabilizercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultswindowacindoorcoilquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Indoorcoil").getValue().toString();
                            int faultswindowacindoorcoilcount = Integer.parseInt(stringfaultswindowacindoorcoilcount);
                            faultswindowacindoorcoilcount = faultswindowacindoorcoilcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoorcoil", Integer.toString(faultswindowacindoorcoilcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            faultwindowacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Indoorcoil").getValue().toString();
                            int faultswindowacindoorcoilcount = Integer.parseInt(stringfaultswindowacindoorcoilcount);
                            faultswindowacindoorcoilcount = faultswindowacindoorcoilcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoorcoil", Integer.toString(faultswindowacindoorcoilcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            if (faultswindowacindoorcoilcount <= 0) {
                                faultwindowacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultwindowacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultswindowacindoorcoilprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("IndoorcoilTOTAL").getValue().toString();
                    int faultswindowacindoorcoilcount = Integer.parseInt(stringfaultswindowacindoorcoilcount);
                    faultswindowacindoorcoilcount = faultswindowacindoorcoilcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoorcoilTOTAL", Integer.toString(faultswindowacindoorcoilcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("IndoorcoilTOTAL").getValue().toString();
                    int faultswindowacindoorcoilcount = Integer.parseInt(stringfaultswindowacindoorcoilcount);
                    int indoorcoildiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Indoorcoil").getValue().toString());
                    if(indoorcoildiscount==1)
                    {
                        faultswindowacindoorcoilcount = faultswindowacindoorcoilcount - price - disfaultswindowacindoorcoilprice;
                    }
                    else
                    {
                        faultswindowacindoorcoilcount = faultswindowacindoorcoilcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoorcoilTOTAL", Integer.toString(faultswindowacindoorcoilcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultswindowacoutdoorcondenserquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Outdoorcondenser").getValue().toString();
                            int faultswindowacoutdoorcondensercount = Integer.parseInt(stringfaultswindowacoutdoorcondensercount);
                            faultswindowacoutdoorcondensercount = faultswindowacoutdoorcondensercount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorcondenser", Integer.toString(faultswindowacoutdoorcondensercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            faultwindowacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Outdoorcondenser").getValue().toString();
                            int faultswindowacoutdoorcondensercount = Integer.parseInt(stringfaultswindowacoutdoorcondensercount);
                            faultswindowacoutdoorcondensercount = faultswindowacoutdoorcondensercount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorcondenser", Integer.toString(faultswindowacoutdoorcondensercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            if (faultswindowacoutdoorcondensercount <= 0) {
                                faultwindowacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultwindowacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultswindowacoutdoorcondenserprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("OutdoorcondenserTOTAL").getValue().toString();
                    int faultswindowacoutdoorcondensercount = Integer.parseInt(stringfaultswindowacoutdoorcondensercount);
                    faultswindowacoutdoorcondensercount = faultswindowacoutdoorcondensercount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorcondenserTOTAL", Integer.toString(faultswindowacoutdoorcondensercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("OutdoorcondenserTOTAL").getValue().toString();
                    int faultswindowacoutdoorcondensercount = Integer.parseInt(stringfaultswindowacoutdoorcondensercount);
                    int outdoorcondenserdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Outdoorcondenser").getValue().toString());
                    if(outdoorcondenserdiscount==1)
                    {
                        faultswindowacoutdoorcondensercount = faultswindowacoutdoorcondensercount - price - disfaultswindowacoutdoorcondenserprice;
                    }
                    else
                    {
                        faultswindowacoutdoorcondensercount = faultswindowacoutdoorcondensercount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorcondenserTOTAL", Integer.toString(faultswindowacoutdoorcondensercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultswindowacremotequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Remote").getValue().toString();
                            int faultswindowacremotecount = Integer.parseInt(stringfaultswindowacremotecount);
                            faultswindowacremotecount = faultswindowacremotecount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Remote", Integer.toString(faultswindowacremotecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            faultwindowacremoteprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultswindowacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Remote").getValue().toString();
                            int faultswindowacremotecount = Integer.parseInt(stringfaultswindowacremotecount);
                            faultswindowacremotecount = faultswindowacremotecount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Remote", Integer.toString(faultswindowacremotecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                            if (faultswindowacremotecount <= 0) {
                                faultwindowacremoteprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultwindowacremoteprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultswindowacremoteprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("RemoteTOTAL").getValue().toString();
                    int faultswindowacremotecount = Integer.parseInt(stringfaultswindowacremotecount);
                    faultswindowacremotecount = faultswindowacremotecount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("RemoteTOTAL", Integer.toString(faultswindowacremotecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultswindowacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("RemoteTOTAL").getValue().toString();
                    int faultswindowacremotecount = Integer.parseInt(stringfaultswindowacremotecount);
                    int remotediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child("Remote").getValue().toString());
                    if(remotediscount==1)
                    {
                        faultswindowacremotecount = faultswindowacremotecount - price - disfaultswindowacremoteprice;
                    }
                    else
                    {
                        faultswindowacremotecount = faultswindowacremotecount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("RemoteTOTAL", Integer.toString(faultswindowacremotecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    // cassetteAC

    private void faultscassetteacwaterleakquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacwaterleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Waterleak").getValue().toString();
                            int faultscassetteacwaterleakcount = Integer.parseInt(stringfaultscassetteacwaterleakcount);
                            faultscassetteacwaterleakcount = faultscassetteacwaterleakcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Waterleak", Integer.toString(faultscassetteacwaterleakcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            faultcassetteacwaterleakprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacwaterleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Waterleak").getValue().toString();
                            int faultscassetteacwaterleakcount = Integer.parseInt(stringfaultscassetteacwaterleakcount);
                            faultscassetteacwaterleakcount = faultscassetteacwaterleakcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Waterleak", Integer.toString(faultscassetteacwaterleakcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            if (faultscassetteacwaterleakcount <= 0) {
                                faultcassetteacwaterleakprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultcassetteacwaterleakprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultscassetteacwaterleakprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacwaterleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("WaterleakTOTAL").getValue().toString();
                    int faultscassetteacwaterleakcount = Integer.parseInt(stringfaultscassetteacwaterleakcount);
                    faultscassetteacwaterleakcount = faultscassetteacwaterleakcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("WaterleakTOTAL", Integer.toString(faultscassetteacwaterleakcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacwaterleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("WaterleakTOTAL").getValue().toString();
                    int faultscassetteacwaterleakcount = Integer.parseInt(stringfaultscassetteacwaterleakcount);
                    int waterleakdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Waterleak").getValue().toString());
                    if(waterleakdiscount==1)
                    {
                        faultscassetteacwaterleakcount= faultscassetteacwaterleakcount - price - disfaultscassetteacwaterleakprice;
                    }
                    else
                    {
                        faultscassetteacwaterleakcount = faultscassetteacwaterleakcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("WaterleakTOTAL", Integer.toString(faultscassetteacwaterleakcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultscassetteacgasleakquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacgasleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Gasleak").getValue().toString();
                            int faultscassetteacgasleakcount = Integer.parseInt(stringfaultscassetteacgasleakcount);
                            faultscassetteacgasleakcount = faultscassetteacgasleakcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Gasleak", Integer.toString(faultscassetteacgasleakcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            faultcassetteacgasleakprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacgasleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Gasleak").getValue().toString();
                            int faultscassetteacgasleakcount = Integer.parseInt(stringfaultscassetteacgasleakcount);
                            faultscassetteacgasleakcount = faultscassetteacgasleakcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Gasleak", Integer.toString(faultscassetteacgasleakcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            if (faultscassetteacgasleakcount <= 0) {
                                faultcassetteacgasleakprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultcassetteacgasleakprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultscassetteacgasleakprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacgasleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("GasleakTOTAL").getValue().toString();
                    int faultscassetteacgasleakcount = Integer.parseInt(stringfaultscassetteacgasleakcount);
                    faultscassetteacgasleakcount = faultscassetteacgasleakcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("GasleakTOTAL", Integer.toString(faultscassetteacgasleakcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacgasleakcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("GasleakTOTAL").getValue().toString();
                    int faultscassetteacgasleakcount = Integer.parseInt(stringfaultscassetteacgasleakcount);
                    int gasleakdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Gasleak").getValue().toString());
                    if(gasleakdiscount==1)
                    {
                        faultscassetteacgasleakcount = faultscassetteacgasleakcount - price - disfaultscassetteacgasleakprice;
                    }
                    else
                    {
                        faultscassetteacgasleakcount = faultscassetteacgasleakcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("GasleakTOTAL", Integer.toString(faultscassetteacgasleakcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultscassetteacpcboardquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacpcboardcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Pcboard").getValue().toString();
                            int faultscassetteacpcboardcount = Integer.parseInt(stringfaultscassetteacpcboardcount);
                            faultscassetteacpcboardcount = faultscassetteacpcboardcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Pcboard", Integer.toString(faultscassetteacpcboardcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            faultcassetteacpcboardprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacpcboardcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Pcboard").getValue().toString();
                            int faultscassetteacpcboardcount = Integer.parseInt(stringfaultscassetteacpcboardcount);
                            faultscassetteacpcboardcount = faultscassetteacpcboardcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Pcboard", Integer.toString(faultscassetteacpcboardcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            if (faultscassetteacpcboardcount <= 0) {
                                faultcassetteacpcboardprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultcassetteacpcboardprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultscassetteacpcboardprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacpcboardcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("PcboardTOTAL").getValue().toString();
                    int faultscassetteacpcboardcount = Integer.parseInt(stringfaultscassetteacpcboardcount);
                    faultscassetteacpcboardcount = faultscassetteacpcboardcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("PcboardTOTAL", Integer.toString(faultscassetteacpcboardcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacpcboardcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("PcboardTOTAL").getValue().toString();
                    int faultscassetteacpcboardcount = Integer.parseInt(stringfaultscassetteacpcboardcount);
                    int pcboarddiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Pcboard").getValue().toString());
                    if(pcboarddiscount==1)
                    {
                        faultscassetteacpcboardcount = faultscassetteacpcboardcount - price - disfaultscassetteacpcboardprice;
                    }
                    else
                    {
                        faultscassetteacpcboardcount = faultscassetteacpcboardcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("PcboardTOTAL", Integer.toString(faultscassetteacpcboardcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultscassetteacstabilizerquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacstabilizercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Stabilizer").getValue().toString();
                            int faultscassetteacstabilizercount = Integer.parseInt(stringfaultscassetteacstabilizercount);
                            faultscassetteacstabilizercount = faultscassetteacstabilizercount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Stabilizer", Integer.toString(faultscassetteacstabilizercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            faultcassetteacstabilizerprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacstabilizercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Stabilizer").getValue().toString();
                            int faultscassetteacstabilizercount = Integer.parseInt(stringfaultscassetteacstabilizercount);
                            faultscassetteacstabilizercount = faultscassetteacstabilizercount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Stabilizer", Integer.toString(faultscassetteacstabilizercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            if (faultscassetteacstabilizercount <= 0) {
                                faultcassetteacstabilizerprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultcassetteacstabilizerprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultscassetteacstabilizerprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacstabilizercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("StabilizerTOTAL").getValue().toString();
                    int faultscassetteacstabilizercount = Integer.parseInt(stringfaultscassetteacstabilizercount);
                    faultscassetteacstabilizercount = faultscassetteacstabilizercount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("StabilizerTOTAL", Integer.toString(faultscassetteacstabilizercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacstabilizercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("StabilizerTOTAL").getValue().toString();
                    int faultscassetteacstabilizercount = Integer.parseInt(stringfaultscassetteacstabilizercount);
                    int stabilizerdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Stabilizer").getValue().toString());
                    if(stabilizerdiscount==1)
                    {
                        faultscassetteacstabilizercount = faultscassetteacstabilizercount - price - disfaultscassetteacstabilizerprice;
                    }
                    else
                    {
                        faultscassetteacstabilizercount = faultscassetteacstabilizercount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("StabilizerTOTAL", Integer.toString(faultscassetteacstabilizercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultscassetteacindoorcoilquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Indoorcoil").getValue().toString();
                            int faultscassetteacindoorcoilcount = Integer.parseInt(stringfaultscassetteacindoorcoilcount);
                            faultscassetteacindoorcoilcount = faultscassetteacindoorcoilcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoorcoil", Integer.toString(faultscassetteacindoorcoilcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            faultcassetteacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Indoorcoil").getValue().toString();
                            int faultscassetteacindoorcoilcount = Integer.parseInt(stringfaultscassetteacindoorcoilcount);
                            faultscassetteacindoorcoilcount = faultscassetteacindoorcoilcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Indoorcoil", Integer.toString(faultscassetteacindoorcoilcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            if (faultscassetteacindoorcoilcount <= 0) {
                                faultcassetteacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultcassetteacindoorcoilprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultscassetteacindoorcoilprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("IndoorcoilTOTAL").getValue().toString();
                    int faultscassetteacindoorcoilcount = Integer.parseInt(stringfaultscassetteacindoorcoilcount);
                    faultscassetteacindoorcoilcount = faultscassetteacindoorcoilcount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoorcoilTOTAL", Integer.toString(faultscassetteacindoorcoilcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacindoorcoilcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("IndoorcoilTOTAL").getValue().toString();
                    int faultscassetteacindoorcoilcount = Integer.parseInt(stringfaultscassetteacindoorcoilcount);
                    int indoorcoildiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Indoorcoil").getValue().toString());
                    if(indoorcoildiscount==1)
                    {
                        faultscassetteacindoorcoilcount = faultscassetteacindoorcoilcount - price - disfaultscassetteacindoorcoilprice;
                    }
                    else
                    {
                        faultscassetteacindoorcoilcount = faultscassetteacindoorcoilcount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("IndoorcoilTOTAL", Integer.toString(faultscassetteacindoorcoilcount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultscassetteacoutdoorcondenserquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Outdoorcondenser").getValue().toString();
                            int faultscassetteacoutdoorcondensercount = Integer.parseInt(stringfaultscassetteacoutdoorcondensercount);
                            faultscassetteacoutdoorcondensercount = faultscassetteacoutdoorcondensercount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorcondenser", Integer.toString(faultscassetteacoutdoorcondensercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            faultcassetteacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Outdoorcondenser").getValue().toString();
                            int faultscassetteacoutdoorcondensercount = Integer.parseInt(stringfaultscassetteacoutdoorcondensercount);
                            faultscassetteacoutdoorcondensercount = faultscassetteacoutdoorcondensercount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Outdoorcondenser", Integer.toString(faultscassetteacoutdoorcondensercount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            if (faultscassetteacoutdoorcondensercount <= 0) {
                                faultcassetteacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultcassetteacoutdoorcondenserprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultscassetteacoutdoorcondenserprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("OutdoorcondenserTOTAL").getValue().toString();
                    int faultscassetteacoutdoorcondensercount = Integer.parseInt(stringfaultscassetteacoutdoorcondensercount);
                    faultscassetteacoutdoorcondensercount = faultscassetteacoutdoorcondensercount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorcondenserTOTAL", Integer.toString(faultscassetteacoutdoorcondensercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacoutdoorcondensercount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("OutdoorcondenserTOTAL").getValue().toString();
                    int faultscassetteacoutdoorcondensercount = Integer.parseInt(stringfaultscassetteacoutdoorcondensercount);
                    int outdoorcondenserdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Outdoorcondenser").getValue().toString());
                    if(outdoorcondenserdiscount==1)
                    {
                        faultscassetteacoutdoorcondensercount = faultscassetteacoutdoorcondensercount - price - disfaultscassetteacoutdoorcondenserprice;
                    }
                    else
                    {
                        faultscassetteacoutdoorcondensercount = faultscassetteacoutdoorcondensercount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("OutdoorcondenserTOTAL", Integer.toString(faultscassetteacoutdoorcondensercount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    private void faultscassetteacremotequantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Remote").getValue().toString();
                            int faultscassetteacremotecount = Integer.parseInt(stringfaultscassetteacremotecount);
                            faultscassetteacremotecount = faultscassetteacremotecount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Remote", Integer.toString(faultscassetteacremotecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            faultcassetteacremoteprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringfaultscassetteacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Remote").getValue().toString();
                            int faultscassetteacremotecount = Integer.parseInt(stringfaultscassetteacremotecount);
                            faultscassetteacremotecount = faultscassetteacremotecount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Remote", Integer.toString(faultscassetteacremotecount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                            if (faultscassetteacremotecount <= 0) {
                                faultcassetteacremoteprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                faultcassetteacremoteprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void faultscassetteacremoteprice(String action, int price) {
        if (action == "add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("RemoteTOTAL").getValue().toString();
                    int faultscassetteacremotecount = Integer.parseInt(stringfaultscassetteacremotecount);
                    faultscassetteacremotecount = faultscassetteacremotecount + price;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("RemoteTOTAL", Integer.toString(faultscassetteacremotecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        } else if (action == "sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringfaultscassetteacremotecount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("RemoteTOTAL").getValue().toString();
                    int faultscassetteacremotecount = Integer.parseInt(stringfaultscassetteacremotecount);
                    int remotediscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child("Remote").getValue().toString());
                    if(remotediscount==1)
                    {
                        faultscassetteacremotecount = faultscassetteacremotecount - price - disfaultscassetteacremoteprice;
                    }
                    else
                    {
                        faultscassetteacremotecount = faultscassetteacremotecount - price;
                    }
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("RemoteTOTAL", Integer.toString(faultscassetteacremotecount));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").updateChildren(cartt);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
    }

    //installation and uninstallation
    //splitac

    private void splitacinstallquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitacinstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Install").getValue().toString();
                            int splitacinstallcount = Integer.parseInt(stringsplitacinstallcount);
                            splitacinstallcount = splitacinstallcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Install", Integer.toString(splitacinstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").updateChildren(cartt);
                            splitacinstallprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitacinstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Install").getValue().toString();
                            int splitacinstallcount = Integer.parseInt(stringsplitacinstallcount);
                            splitacinstallcount = splitacinstallcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Install", Integer.toString(splitacinstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").updateChildren(cartt);
                            if (splitacinstallcount <= 0) {
                                splitacinstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                splitacinstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void splitacinstallprice(String action, int price) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitacinstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("InstallTOTAL").getValue().toString();
                            int splitacinstallcount = Integer.parseInt(stringsplitacinstallcount);
                            splitacinstallcount = splitacinstallcount + price;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("InstallTOTAL", Integer.toString(splitacinstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").updateChildren(cartt);
                            splitacinstallprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitacinstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("InstallTOTAL").getValue().toString();
                            int splitacinstallcount = Integer.parseInt(stringsplitacinstallcount);
                            int installdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("Installuninstall").child("SplitAC").child("Install").getValue().toString());
                            if(installdiscount==1)
                            {
                                splitacinstallcount = splitacinstallcount - price - dissplitacinstallprice;
                            }
                            else
                            {
                                splitacinstallcount = splitacinstallcount - price;
                            }
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("InstallTOTAL", Integer.toString(splitacinstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").updateChildren(cartt);
                            if (splitacinstallcount <= 0) {
                                splitacinstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                splitacinstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void splitacuninstallquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitacuninstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Uninstall").getValue().toString();
                            int splitacuninstallcount = Integer.parseInt(stringsplitacuninstallcount);
                            splitacuninstallcount = splitacuninstallcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Uninstall", Integer.toString(splitacuninstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").updateChildren(cartt);
                            splitacuninstallprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitacuninstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Uninstall").getValue().toString();
                            int splitacuninstallcount = Integer.parseInt(stringsplitacuninstallcount);
                            splitacuninstallcount = splitacuninstallcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Uninstall", Integer.toString(splitacuninstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").updateChildren(cartt);
                            if (splitacuninstallcount <= 0) {
                                splitacuninstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                splitacuninstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void splitacuninstallprice(String action, int price) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitacuninstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("UninstallTOTAL").getValue().toString();
                            int splitacuninstallcount = Integer.parseInt(stringsplitacuninstallcount);
                            splitacuninstallcount = splitacuninstallcount + price;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("UninstallTOTAL", Integer.toString(splitacuninstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").updateChildren(cartt);
                            splitacuninstallprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitacuninstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("UninstallTOTAL").getValue().toString();
                            int splitacuninstallcount = Integer.parseInt(stringsplitacuninstallcount);
                            int uninstalldiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("Installuninstall").child("SplitAC").child("Uninstall").getValue().toString());
                            if(uninstalldiscount==1)
                            {
                                splitacuninstallcount = splitacuninstallcount - price - dissplitacuninstallprice;
                            }
                            else
                            {
                                splitacuninstallcount = splitacuninstallcount - price;
                            }
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("UninstallTOTAL", Integer.toString(splitacuninstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").updateChildren(cartt);
                            if (splitacuninstallcount <= 0) {
                                splitacuninstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                splitacuninstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void splitaccomboquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitaccombocount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Combo").getValue().toString();
                            int splitaccombocount = Integer.parseInt(stringsplitaccombocount);
                            splitaccombocount = splitaccombocount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Combo", Integer.toString(splitaccombocount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").updateChildren(cartt);
                            splitaccomboprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitaccombocount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("Combo").getValue().toString();
                            int splitaccombocount = Integer.parseInt(stringsplitaccombocount);
                            splitaccombocount = splitaccombocount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Combo", Integer.toString(splitaccombocount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").updateChildren(cartt);
                            if (splitaccombocount <= 0) {
                                splitaccomboprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                splitaccomboprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void splitaccomboprice(String action, int price) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitaccombocount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("ComboTOTAL").getValue().toString();
                            int splitaccombocount = Integer.parseInt(stringsplitaccombocount);
                            splitaccombocount = splitaccombocount + price;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("ComboTOTAL", Integer.toString(splitaccombocount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").updateChildren(cartt);
                            splitaccomboprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringsplitaccombocount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child("ComboTOTAL").getValue().toString();
                            int splitaccombocount = Integer.parseInt(stringsplitaccombocount);
                            int combodiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("Installuninstall").child("SplitAC").child("Combo").getValue().toString());
                            if(combodiscount==1)
                            {
                                splitaccombocount= splitaccombocount - price - dissplitaccomboprice;
                            }
                            else
                            {
                                splitaccombocount = splitaccombocount - price;
                            }
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("ComboTOTAL", Integer.toString(splitaccombocount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").updateChildren(cartt);
                            if (splitaccombocount <= 0) {
                                splitaccomboprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                splitaccomboprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    //windowac

    private void windowacinstallquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowacinstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Install").getValue().toString();
                            int windowacinstallcount = Integer.parseInt(stringwindowacinstallcount);
                            windowacinstallcount = windowacinstallcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Install", Integer.toString(windowacinstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").updateChildren(cartt);
                            windowacinstallprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowacinstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Install").getValue().toString();
                            int windowacinstallcount = Integer.parseInt(stringwindowacinstallcount);
                            windowacinstallcount = windowacinstallcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Install", Integer.toString(windowacinstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").updateChildren(cartt);
                            if (windowacinstallcount <= 0) {
                                windowacinstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                windowacinstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void windowacinstallprice(String action, int price) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowacinstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("InstallTOTAL").getValue().toString();
                            int windowacinstallcount = Integer.parseInt(stringwindowacinstallcount);
                            windowacinstallcount = windowacinstallcount + price;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("InstallTOTAL", Integer.toString(windowacinstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").updateChildren(cartt);
                            windowacinstallprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowacinstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("InstallTOTAL").getValue().toString();
                            int windowacinstallcount = Integer.parseInt(stringwindowacinstallcount);
                            int installdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("Installuninstall").child("WindowAC").child("Install").getValue().toString());
                            if(installdiscount==1)
                            {
                                windowacinstallcount = windowacinstallcount - price - diswindowacinstallprice;
                            }
                            else
                            {
                                windowacinstallcount = windowacinstallcount - price;
                            }
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("InstallTOTAL", Integer.toString(windowacinstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").updateChildren(cartt);
                            if (windowacinstallcount <= 0) {
                                windowacinstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                windowacinstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void windowacuninstallquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowacuninstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Uninstall").getValue().toString();
                            int windowacuninstallcount = Integer.parseInt(stringwindowacuninstallcount);
                            windowacuninstallcount = windowacuninstallcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Uninstall", Integer.toString(windowacuninstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").updateChildren(cartt);
                            windowacuninstallprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowacuninstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Uninstall").getValue().toString();
                            int windowacuninstallcount = Integer.parseInt(stringwindowacuninstallcount);
                            windowacuninstallcount = windowacuninstallcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Uninstall", Integer.toString(windowacuninstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").updateChildren(cartt);
                            if (windowacuninstallcount <= 0) {
                                windowacuninstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                windowacuninstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void windowacuninstallprice(String action, int price) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowacuninstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("UninstallTOTAL").getValue().toString();
                            int windowacuninstallcount = Integer.parseInt(stringwindowacuninstallcount);
                            windowacuninstallcount = windowacuninstallcount + price;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("UninstallTOTAL", Integer.toString(windowacuninstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").updateChildren(cartt);
                            windowacuninstallprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowacuninstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("UninstallTOTAL").getValue().toString();
                            int windowacuninstallcount = Integer.parseInt(stringwindowacuninstallcount);
                            int uninstalldiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("Installuninstall").child("WindowAC").child("Uninstall").getValue().toString());
                            if(uninstalldiscount==1)
                            {
                                windowacuninstallcount = windowacuninstallcount - price - diswindowacuninstallprice;
                            }
                            else
                            {
                                windowacuninstallcount = windowacuninstallcount - price;
                            }
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("UninstallTOTAL", Integer.toString(windowacuninstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").updateChildren(cartt);
                            if (windowacuninstallcount <= 0) {
                                windowacuninstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                windowacuninstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void windowaccomboquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowaccombocount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Combo").getValue().toString();
                            int windowaccombocount = Integer.parseInt(stringwindowaccombocount);
                            windowaccombocount = windowaccombocount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Combo", Integer.toString(windowaccombocount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").updateChildren(cartt);
                            windowaccomboprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowaccombocount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("Combo").getValue().toString();
                            int windowaccombocount = Integer.parseInt(stringwindowaccombocount);
                            windowaccombocount = windowaccombocount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Combo", Integer.toString(windowaccombocount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").updateChildren(cartt);
                            if (windowaccombocount <= 0) {
                                windowaccomboprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                windowaccomboprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void windowaccomboprice(String action, int price) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowaccombocount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("ComboTOTAL").getValue().toString();
                            int windowaccombocount = Integer.parseInt(stringwindowaccombocount);
                            windowaccombocount = windowaccombocount + price;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("ComboTOTAL", Integer.toString(windowaccombocount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").updateChildren(cartt);
                            windowaccomboprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringwindowaccombocount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child("ComboTOTAL").getValue().toString();
                            int windowaccombocount = Integer.parseInt(stringwindowaccombocount);
                            int combodiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("Installuninstall").child("WindowAC").child("Combo").getValue().toString());
                            if(combodiscount==1)
                            {
                                windowaccombocount= windowaccombocount - price - diswindowaccomboprice;
                            }
                            else
                            {
                                windowaccombocount = windowaccombocount - price;
                            }
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("ComboTOTAL", Integer.toString(windowaccombocount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").updateChildren(cartt);
                            if (windowaccombocount <= 0) {
                                windowaccomboprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                windowaccomboprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    //cassetteac

    private void cassetteacinstallquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassetteacinstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Install").getValue().toString();
                            int cassetteacinstallcount = Integer.parseInt(stringcassetteacinstallcount);
                            cassetteacinstallcount = cassetteacinstallcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Install", Integer.toString(cassetteacinstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").updateChildren(cartt);
                            cassetteacinstallprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error)
                        {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassetteacinstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Install").getValue().toString();
                            int cassetteacinstallcount = Integer.parseInt(stringcassetteacinstallcount);
                            cassetteacinstallcount = cassetteacinstallcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Install", Integer.toString(cassetteacinstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").updateChildren(cartt);
                            if (cassetteacinstallcount <= 0) {
                                cassetteacinstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                cassetteacinstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void cassetteacinstallprice(String action, int price) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassetteacinstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("InstallTOTAL").getValue().toString();
                            int cassetteacinstallcount = Integer.parseInt(stringcassetteacinstallcount);
                            cassetteacinstallcount = cassetteacinstallcount + price;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("InstallTOTAL", Integer.toString(cassetteacinstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").updateChildren(cartt);
                            cassetteacinstallprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassetteacinstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("InstallTOTAL").getValue().toString();
                            int cassetteacinstallcount = Integer.parseInt(stringcassetteacinstallcount);
                            int installdiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("Installuninstall").child("CassetteAC").child("Install").getValue().toString());
                            if(installdiscount==1)
                            {
                                cassetteacinstallcount = cassetteacinstallcount - price - discassetteacinstallprice;
                            }
                            else
                            {
                                cassetteacinstallcount = cassetteacinstallcount - price;
                            }
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("InstallTOTAL", Integer.toString(cassetteacinstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").updateChildren(cartt);
                            if (cassetteacinstallcount <= 0) {
                                cassetteacinstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                cassetteacinstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void cassetteacuninstallquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassetteacuninstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Uninstall").getValue().toString();
                            int cassetteacuninstallcount = Integer.parseInt(stringcassetteacuninstallcount);
                            cassetteacuninstallcount = cassetteacuninstallcount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Uninstall", Integer.toString(cassetteacuninstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").updateChildren(cartt);
                            cassetteacuninstallprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassetteacuninstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Uninstall").getValue().toString();
                            int cassetteacuninstallcount = Integer.parseInt(stringcassetteacuninstallcount);
                            cassetteacuninstallcount = cassetteacuninstallcount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Uninstall", Integer.toString(cassetteacuninstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").updateChildren(cartt);
                            if (cassetteacuninstallcount <= 0) {
                                cassetteacuninstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                cassetteacuninstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void cassetteacuninstallprice(String action, int price) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassetteacuninstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("UninstallTOTAL").getValue().toString();
                            int cassetteacuninstallcount = Integer.parseInt(stringcassetteacuninstallcount);
                            cassetteacuninstallcount = cassetteacuninstallcount + price;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("UninstallTOTAL", Integer.toString(cassetteacuninstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").updateChildren(cartt);
                            cassetteacuninstallprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassetteacuninstallcount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("UninstallTOTAL").getValue().toString();
                            int cassetteacuninstallcount = Integer.parseInt(stringcassetteacuninstallcount);
                            int uninstalldiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("Installuninstall").child("CassetteAC").child("Uninstall").getValue().toString());
                            if(uninstalldiscount==1)
                            {
                                cassetteacuninstallcount = cassetteacuninstallcount - price - discassetteacinstallprice;
                            }
                            else
                            {
                                cassetteacuninstallcount = cassetteacuninstallcount - price;
                            }
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("UninstallTOTAL", Integer.toString(cassetteacuninstallcount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").updateChildren(cartt);
                            if (cassetteacuninstallcount <= 0) {
                                cassetteacuninstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                cassetteacuninstallprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void cassetteaccomboquantity(String action) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassetteaccombocount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Combo").getValue().toString();
                            int cassetteaccombocount = Integer.parseInt(stringcassetteaccombocount);
                            cassetteaccombocount = cassetteaccombocount + 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Combo", Integer.toString(cassetteaccombocount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").updateChildren(cartt);
                            cassetteaccomboprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassetteaccombocount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("Combo").getValue().toString();
                            int cassetteaccombocount = Integer.parseInt(stringcassetteaccombocount);
                            cassetteaccombocount = cassetteaccombocount - 1;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("Combo", Integer.toString(cassetteaccombocount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").updateChildren(cartt);
                            if (cassetteaccombocount <= 0) {
                                cassetteaccomboprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                cassetteaccomboprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    private void cassetteaccomboprice(String action, int price) {

        if (action == "add") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassetteaccombocount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("ComboTOTAL").getValue().toString();
                            int cassetteaccombocount = Integer.parseInt(stringcassetteaccombocount);
                            cassetteaccombocount = cassetteaccombocount + price;
                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("ComboTOTAL", Integer.toString(cassetteaccombocount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").updateChildren(cartt);
                            cassetteaccomboprogressbar.setVisibility(View.INVISIBLE);
                            btn("true");
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        } else if (action == "sub") {
            Handler delay = new Handler();
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    cart.addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                            String stringcassetteaccombocount = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child("ComboTOTAL").getValue().toString();
                            int cassetteaccombocount = Integer.parseInt(stringcassetteaccombocount);
                            int combodiscount = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("Installuninstall").child("CassetteAC").child("Combo").getValue().toString());
                            if(combodiscount==1)
                            {
                                cassetteaccombocount= cassetteaccombocount - price - discassetteaccomboprice;
                            }
                            else
                            {
                                cassetteaccombocount = cassetteaccombocount - price;
                            }

                            HashMap<String, Object> cartt = new HashMap<>();
                            cartt.put("ComboTOTAL", Integer.toString(cassetteaccombocount));
                            cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").updateChildren(cartt);
                            if (cassetteaccombocount <= 0) {
                                cassetteaccomboprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            } else {
                                cassetteaccomboprogressbar.setVisibility(View.INVISIBLE);
                                btn("true");
                            }
                        }

                        @Override
                        public void onCancelled(@NonNull DatabaseError error) {

                        }
                    });
                }
            };
            delay.postDelayed(run, 500);
        }

    }

    public void onRadioButtonClicked(View view) {
        // Is the button now checked?
        boolean checked = ((RadioButton) view).isChecked();

        // Check which radio button was clicked
        switch (view.getId()) {
            case R.id.cod:
                if (checked) {
                    payment = "1";
                    break;
                }
            case R.id.online:
                if (checked) {
                    payment  = "0";
                    break;
                }
        }

    }



    private void totalsaved1(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    //generalservie
                    int totaldiscount2 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category1).child(categoryname).getValue().toString());
                    if(totaldiscount2==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }



                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
    private void totalsaved2(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);


                    //waterwash

                    int totaldiscount4 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child(categoryname).getValue().toString());
//                    int totaldiscount5 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("WindowSSAC").getValue().toString());
//                    int totaldiscount6 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("CassetteSSAC").getValue().toString());
//                    int totaldiscount7 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Split360AC").getValue().toString());
//                    int totaldiscount8 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category2).child("Cassette360AC").getValue().toString());
                    if(totaldiscount4==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }






                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }

    private void totalsaved3ss1(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);





                    int totaldiscount9 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withspare").child(categoryname).getValue().toString());

                    if(totaldiscount9==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
    private void totalsaved3ss11(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);



                    //amc
                    //split
                    //scheme1

                int totaldiscount11 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme1").child("Withoutspare").child(categoryname).getValue().toString());



                    if(totaldiscount11==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }

    private void totalsaved3ss2(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);



                    //amc
                    //split
                    //scheme1
                    int totaldiscount9 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withspare").child(categoryname).getValue().toString());
//

                    if(totaldiscount9==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
    private void totalsaved3ss21(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);



                    //amc
                    //split
                    //scheme1
                    int totaldiscount12 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme2").child("Withoutspare").child(categoryname).getValue().toString());
//


                    if(totaldiscount12==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }

    private void totalsaved3ss3(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);


                    //scheme3
                    int totaldiscount15 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withspare").child(categoryname).getValue().toString());



                    if(totaldiscount15==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }



                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
    private void totalsaved3ss31(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);


                    //scheme3
                    int totaldiscount16 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("SplitAC").child("Scheme3").child("Withoutspare").child(categoryname).getValue().toString());




                    if(totaldiscount16==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }






    private void totalsaved3ws1(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);



                    //windowac
                    //scheme1
                    int totaldiscount18 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withspare").child(categoryname).getValue().toString());

                    if(totaldiscount18==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }






                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
    private void totalsaved3ws11(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);



                    //windowac
                    //scheme1

                    int totaldiscount19= Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme1").child("Withoutspare").child(categoryname).getValue().toString());


                    if(totaldiscount19==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }




                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }


    private void totalsaved3ws2(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);



                    //amc
                 //scheme2
                    int totaldiscount21 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withspare").child(categoryname).getValue().toString());

                    if(totaldiscount21==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }






                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
    private void totalsaved3ws21(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);



                    //amc
                    //scheme2
                    int totaldiscount21 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("WindowAC").child("Scheme2").child("Withoutspare").child(categoryname).getValue().toString());

                    if(totaldiscount21==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }






                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }

    private void totalsaved3cs1(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);



                    //cassette
                    int totaldiscount24 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withspare").child(categoryname).getValue().toString());

                    if(totaldiscount24==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }



                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
    private void totalsaved3cs11(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);



                    //cassette
                    int totaldiscount23 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category3).child("CassetteAC").child("Scheme1").child("Withoutspare").child(categoryname).getValue().toString());


                    if(totaldiscount23==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }




                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
///////////////////////////////////////////////////////////

    private void totalsaved4(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);





                    int splitdiscount26 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("SplitAC").child(categoryname).getValue().toString());
                    if(splitdiscount26==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }





                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
    private void totalsaved41(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);



                    int splitdiscount27 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("WindowAC").child(categoryname).getValue().toString());
                    if(splitdiscount27==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }





                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);



                }


                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
    private void totalsaved42(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);


                    int splitdiscount28 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category4).child("CassetteAC").child(categoryname).getValue().toString());
                    if(splitdiscount28==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }





                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }

    private void totalsaved5(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);





                   // faults

                    int splitdiscount57 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child(categoryname).getValue().toString());
//                    int splitdiscount58 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Pcboard").getValue().toString());
//                    int splitdiscount59 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Stabilizer").getValue().toString());
//                    int splitdiscount60 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Indoorcoil").getValue().toString());
//                    int splitdiscount61 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Outdoorcondenser").getValue().toString());
//                    int splitdiscount62 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("SplitAC").child("Remote").getValue().toString());





                    if(splitdiscount57==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }





                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
    private void totalsaved51(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);





                    // faults


                    int splitdiscount58 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("WindowAC").child(categoryname).getValue().toString());
              if(splitdiscount58==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }



                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
    private void totalsaved52(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);





                    int splitdiscount59 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category5).child("CassetteAC").child(categoryname).getValue().toString());

                    if(splitdiscount59==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }





                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }




    private void totalsaved6(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);





//install
                    int splitdiscount77 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("SplitAC").child(categoryname).getValue().toString());








                    if(splitdiscount77==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
//                    if(splitdiscount78==1)
//                    {
//                        HashMap<String, Object> cartt = new HashMap<>();
//                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
//                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
//                        // footer.setVisibility(View.VISIBLE);
//                    }
//                    else
//                    {
//                        cartsaved = cartsaved - discount;
//                        HashMap<String, Object> cartt = new HashMap<>();
//                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
//                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
//                        // footer.setVisibility(View.VISIBLE);
//                    }
//
//
//                    if(splitdiscount79==1)
//                    {
//                        HashMap<String, Object> cartt = new HashMap<>();
//                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
//                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
//                        // footer.setVisibility(View.VISIBLE);
//                    }
//                    else
//                    {
//                        cartsaved = cartsaved - discount;
//                        HashMap<String, Object> cartt = new HashMap<>();
//                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
//                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
//                        // footer.setVisibility(View.VISIBLE);
//                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
    private void totalsaved61(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);






                 int splitdiscount78 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("WindowAC").child(categoryname).getValue().toString());







                    if(splitdiscount78==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }




                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }
    private void totalsaved62(String action,int discount,String categoryname) {
        if(action=="add") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);
                    cartsaved = cartsaved + discount;
                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                    // footer.setVisibility(View.VISIBLE);
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }
        else if(action=="sub") {
            cart.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    String stringcartsaved = snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child("TOTALSAVED").getValue().toString();
                    int cartsaved = Integer.parseInt(stringcartsaved);





                    int splitdiscount79 = Integer.parseInt(snapshot.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").child(Category6).child("CassetteAC").child(categoryname).getValue().toString());




                    if(splitdiscount79==1)
                    {
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        cartsaved = cartsaved - discount;
                        HashMap<String, Object> cartt = new HashMap<>();
                        cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                        cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);
                        // footer.setVisibility(View.VISIBLE);
                    }


                    HashMap<String, Object> cartt = new HashMap<>();
                    cartt.put("TOTALSAVED", Integer.toString(cartsaved));
                    cart.child("Users").child(mAuth.getCurrentUser().getUid()).child("Addcart").updateChildren(cartt);











                }




                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });
        }

    }





}